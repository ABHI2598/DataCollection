{"arnumber": "4385745", "details": {"title": "Software Reliability Analysis and Measurement Using Finite and Infinite Server Queueing Models", "volume": "57", "keywords": [{"type": "IEEE Keywords", "kwd": ["Software reliability", "Software measurement", "Queueing analysis", "Fault detection", "Data engineering", "Reliability engineering", "Failure analysis", "Delay effects", "Software debugging", "Predictive models"]}, {"type": "INSPEC: Controlled Indexing", "kwd": ["software fault tolerance", "probability", "program debugging", "queueing theory"]}, {"type": "INSPEC: Non-Controlled Indexing", "kwd": ["software debugging process", "software reliability analysis", "software reliability measurement", "finite server queueing models", "infinite server queueing models", "failure-free software operation", "probability", "software reliability growth models"]}, {"type": "Author Keywords ", "kwd": ["Software testing", "Fault correction", "non-homogeneous Poisson process (NHPP)", "queueing theory", "software reliability growth model (SRGM)"]}], "issue": "1", "link": "http://ieeexplore.ieee.org/servlet/opac?punumber=24", "authors": [{"affiliation": "Nat. Tsing Hua Univ., Hsinchu", "bio": {"p": ["Chin-Yu Huang is currently an Assistant Professor in the Department of Computer Science at National Tsing Hua University, Hsinchu, Taiwan. He received the MS (1994), and the Ph.D. (2000) in Electrical Engineering from National Taiwan University, Taipei. He was with the Bank of Taiwan from 1994 to 1999, and was a senior software engineer at Taiwan Semiconductor Manufacturing Company from 1999 to 2000. Before joining NTHU in 2003, he was a division chief of the Central Bank of China, Taipei. His research interests are in software reliability engineering, software testing, software metrics, software testability, fault tree analysis, and system safety assessment. He is a member of IEEE."]}, "name": "Chin-Yu Huang"}, {"affiliation": "Nat. Tsing Hua Univ., Hsinchu", "bio": {"p": ["Wei-Chih Huang received the B.S. (2004) in Information and Computer Education from National Taiwan Normal University, Taipei, Taiwan. He received the MS (2006) in Computer Science from National Tsing Hua University, Hsinchu, Taiwan. Currently he works at Billion Electric Co., Ltd., Taipei, Taiwan. His research interests include software reliability, software process improvement, and software quality assurance."]}, "name": "Wei-Chih Huang"}], "publisher": "IEEE", "doi": "10.1109/TR.2007.909777", "abstract": "Software reliability is often defined as the probability of failure-free software operation for a specified period of time in a specified environment. During the past 30 years, many software reliability growth models (SRGM) have been proposed for estimating the reliability growth of software. In practice, effective debugging is not easy because the fault may not be immediately obvious. Software engineers need time to read, and analyze the collected failure data. The time delayed by the fault detection &amp; correction processes should not be negligible. Experience shows that the software debugging process can be described, and modeled using queueing system. In this paper, we will use both finite, and infinite server queueing models to predict software reliability. We will also investigate the problem of imperfect debugging, where fixing one bug creates another. Numerical examples based on two sets of real failure data are presented, and discussed in detail. Experimental results show that the proposed framework incorporating both fault detection, and correction processes for SRGM has a fairly accurate prediction capability."}, "references": [{"title": "Handbook of Software Reliability Engineering", "context": [{"text": " Software reliability is often defined as the probability of failure-free software operation for a specified period of time in a specified environment [1].", "sec": "sec1", "part": "1"}, {"text": " Equation (2) is called the Goel-Okumoto model [1].", "sec": "sec3a", "part": "1"}, {"text": " KD is defined as [1], [37] where \\$k\\$ is the sample size, \\$F^{\\ast}(x)\\$ is the normalized observed cumulative distribution at the \\$x\\$-th time point, and \\$F(x)\\$ is the expected cumulative distribution at the \\$x\\$-th time point, based on the model.", "sec": "sec4b", "part": "1"}, {"text": " The two most popular estimation techniques are MLE, and LSE [1], [2].", "sec": "sec4c", "part": "1"}], "order": "1", "id": "ref1", "text": "<em>Handbook of Software Reliability Engineering</em>, 1996.", "refType": "biblio"}, {"title": "Software Reliability Modeling", "context": [{"text": " Since the 1970s, many SRGM [2]\u2013[5] have been proposed for estimation of reliability growth of products during the software development processes.", "sec": "sec1", "part": "1"}, {"text": " Substituting \\$b(t)=b^{2}t/(1+bt)\\$ into (1), and assuming the initial condition \\$m_{d}(0)=0\\$, we obtain the mean value function \\$m_{d}(t)\\$ asand Equation (4) is the Yamada delayed S-shaped model [2].", "sec": "sec3a", "part": "1"}, {"text": " Solving (1) under boundary condition \\$m_{d}(0)=0\\$, we have and Equation (6) is called the inflection S-shaped model [2].", "sec": "sec3a", "part": "1"}, {"text": " Solving (1) under boundary condition \\$m_{d}(0)=0\\$, we have and Equation (8) is called the Yamada Weibull model [2].", "sec": "sec3a", "part": "1"}, {"text": " The two most popular estimation techniques are MLE, and LSE [1], [2].", "sec": "sec4c", "part": "1"}], "order": "2", "links": {"crossRefLink": "http://dx.doi.org/10.1142/1390", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref2", "text": "M. Xie, Software Reliability Modeling, 1991, World Scientific Publishing Company.", "refType": "biblio"}, {"title": "Software Reliability, Measurement, Prediction and Application", "context": [{"text": " Since the 1970s, many SRGM [2]\u2013[3][5] have been proposed for estimation of reliability growth of products during the software development processes.", "sec": "sec1", "part": "1"}, {"text": " Musa [3] reported that the effectiveness of the fault removal action is often less than perfect, and the degree of imperfection varies randomly from repair to repair.", "sec": "sec1", "part": "1"}, {"text": " Musa reported that the fault removal process is characterized on an average basis by assuming that the fault correction rate is proportional to the hazard rate during testing [3].", "sec": "sec2", "part": "1"}, {"text": " Finally, Musa [3] used a type of queueing model to model the failure correction process, arguing that software testing, and fault correction are performed by different people during testing.", "sec": "sec2", "part": "1"}, {"text": " Note that \\$N_{d}(t)\\$, and \\$N_{r}(t)\\$ represent the number of faults detected, and removed by time \\$t\\$, respectively [3], [21].", "sec": "sec3", "part": "1"}, {"text": "The proposed ISQ-PD model is based on the following assumptions [3], [18], [21]:\n\n\n1\nThe fault detection process follows a NHPP.\n\n\n2\nThe software is subject to failures at random times, caused by the manifestation of remaining faults in the system.\n\n\n3\nThe mean number of faults detected in the time interval \\$(t,t+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system.", "sec": "sec3a", "part": "1"}, {"text": " Further, the probability that a fault is corrected during any time period of debugging activities is the same as the probability that it is fixed in any other such time period of debugging activities [3].", "sec": "sec3a1", "part": "1"}, {"text": " Musa [3] also proposed real software failure data, taken from the unit debugging phase of a project, and involving 8 developers with 178 corrected faults, to show that the exponential distribution is a reasonable model for the distribution of failure correction times.", "sec": "sec3a1", "part": "1"}, {"text": "This model assumes that [3], [18]:\n\n\n1\nThe fault detection process follows the NHPP.\n\n\n2\nThe software is subject to failures at random times caused by the manifestation of remaining faults in the system.\n\n\n3\nThe mean number of faults detected in time interval \\$(t,t+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system.", "sec": "sec3b", "part": "1"}, {"text": " Experience has shown that, during testing, the number, and utilization of debuggers appears to be limited, to prevent an excessive backlog of failures awaiting correction from building up in any area of code [3].", "sec": "sec3b", "part": "1"}, {"text": " In fact, Poisson-type models offer the promise of approximating reality more closely due to their capabilities for handling imperfect debugging [3].", "sec": "sec3c", "part": "1"}, {"text": "The first data set (DS1) we used was from System T1 of the Rome Air Development Center project in [3], and was collected weekly from each project member.", "sec": "sec5a", "part": "1"}, {"text": " Proposed by Musa, it can be represented by computing RE for a data set as [3] Assuming we have observed \\$m_{q}\\$ failures by the end of test time \\$t_{q}\\$, we employ the failure data up to time \\$t_{e}(t_{e}\\leq t_{q})\\$ to estimate the parameters of \\$m(t)\\$.", "sec": "sec4b", "part": "1"}, {"text": " As seen from Table IV, the estimated value of \\$m\\$ is very close to the actual number, 9 programmers, reported by Musa [3].", "sec": "sec4c1", "part": "1"}, {"text": " Musa argued that available debuggers would not always be fully employed during the failure-correction-personnel-limited period due to the unpredictable identification times of failures, and the inequality in load among the debuggers [3].", "sec": "sec4c1", "part": "1"}], "order": "3", "id": "ref3", "text": "J. D. Musa, A. Iannino, K. Okumoto, Software Reliability Measurement Prediction and Application, 1987, McGraw Hill.", "refType": "biblio"}, {"title": "Software reliability analysis models", "context": [{"text": " Since the 1970s, many SRGM [2]\u2013[4][5] have been proposed for estimation of reliability growth of products during the software development processes.", "sec": "sec1", "part": "1"}, {"text": "Based on assumptions 1\u20133, we have the differential equation By assigning different values to \\$b(t)\\$, we obtain different NHPP models [4], [5].", "sec": "sec3a", "part": "1"}, {"text": " For example, if \\$\\gamma=1\\$, and \\$m_{d}(t)\\$ is the Goel-Okumoto model; from (19), and Table I, we have In this case, if \\$\\mu=b\\$, we obtain We can see that the result is identical to the findings of Ohba in [4].", "sec": "sec3a1", "part": "1"}, {"text": "AE is defined as [4], [28] For practical purposes, \\$M_{a}\\$ is obtained from software fault tracking after software testing.", "sec": "sec4b", "part": "1"}], "order": "4", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper discusses improvements to conventional software reliability analysis models by making the assumptions on which they are based more realistic. In an actual project environment, sometimes no more information is available than reliability data obtained from a test report. The models described here are designed to resolve the problems caused by this constraint on the availability of reliability data. By utilizing the technical knowledge about a program, a test, and test data, we can selec...", "documentLink": "/document/5390352", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5390352", "pdfSize": "1535KB"}, "id": "ref4", "text": "M. Ohba, \"Software reliability analysis models\", <em>IBM Journal of Research and Development</em>, vol. 28, no. 4, pp. 428-443, Jul. 1984.", "refType": "biblio"}, {"title": "A unified scheme of some non-homogenous\nPoisson process models for software reliability estimation", "context": [{"text": " Since the 1970s, many SRGM [2]\u2013[5] have been proposed for estimation of reliability growth of products during the software development processes.", "sec": "sec1", "part": "1"}, {"text": "Based on assumptions 1\u20133, we have the differential equation By assigning different values to \\$b(t)\\$, we obtain different NHPP models [4], [5].", "sec": "sec3a", "part": "1"}], "order": "5", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, we describe how several existing software reliability growth models based on Nonhomogeneous Poisson processes (NHPPs) can be comprehensively derived by applying the concept of weighted arithmetic, weighted geometric, or weighted harmonic mean. Furthermore, based on these three weighted means, we thus propose a more general NHPP model from the quasi arithmetic viewpoint. In addition to the above three means, we formulate a more general transformation that includes a parametric fami...", "documentLink": "/document/1183936", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1183936", "pdfSize": "310KB"}, "id": "ref5", "text": "C. Y. Huang, M. R. Lyu, S. Y. Kuo, \"A unified scheme of some non-homogenous\nPoisson process models for software reliability estimation\", <em>IEEE Trans. Software Engineering</em>, vol. 29, no. 3, pp. 261-269, Mar. 2003.", "refType": "biblio"}, {"title": "Software Quality Approaches: Testing, Verification and Validation", "context": [{"text": " In practice, the debugging process is generally composed of three steps: fault detection, fault isolation, and fault correction [6].", "sec": "sec1", "part": "1"}], "order": "6", "links": {"crossRefLink": "http://dx.doi.org/10.1007/978-3-642-56612-7", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref6", "text": "M. Haug, E. W. Olsen, L. Consolini, Software Quality Approaches: Testing Verification and Validation, 2001, Berlin, Springer.", "refType": "biblio"}, {"title": "Testing Computer Software", "context": [{"text": " When the specific root cause is found, programmers can correct the fault accordingly [7].", "sec": "sec1", "part": "1"}], "order": "7", "id": "ref7", "text": "C. Kaner, J. Falk, H. Q. Nguyen, Testing Computer Software, 1999, John Wiley & Sons.", "refType": "biblio"}, {"title": "Detection\nand correction process modeling considering the time dependency", "context": [{"text": " The time delay incurred in the fault detection, and correction processes should not be negligible [8]\u2013[12].", "sec": "sec1", "part": "1"}], "order": "8", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Most of the models for software reliability analysis are based on reliability growth models which deal with the fault detection process only. In this paper, some useful approaches to the modeling of both software fault detection and fault correction processes are discussed. Since the estimation of model parameters in software testing is essential to give accurate prediction and help make the right decision about software release, the problem of estimating the parameters is addressed. Taking into...", "documentLink": "/document/4041884", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4041884", "pdfSize": "361KB"}, "id": "ref8", "text": "Y. P. Wu, Q. P. Hu, M. Xie, S. H. Ng, \"Detection\nand correction process modeling considering the time dependency\", <em>Proceedings of the 12th IEEE International Symposium on Pacific Rim Dependable Computing</em>, pp. 19-25, 2006-Dec.", "refType": "biblio"}, {"title": "Software reliability analysis by considering\nfault dependency and debugging time lag", "context": [{"text": " The time delay incurred in the fault detection, and correction processes should not be negligible [8]\u2013[9][12].", "sec": "sec1", "part": "1"}, {"text": " Practical experiences show that the time to remove a detected fault depends on the complexity of the fault, the skill level of personnel, the size of the debugging team, the development environment, the technique(s) being used, and other factors [9].", "sec": "sec2", "part": "1"}], "order": "9", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Over the past 30 years, many software reliability growth models (SRGM) have been proposed. Often, it is assumed that detected faults are immediately corrected when mathematical models are developed. This assumption may not be realistic in practice because the time to remove a detected fault depends on the complexity of the fault, the skill and experience of personnel, the size of debugging team, the technique(s) being used, and so on. During software testing, practical experiences show that mutu...", "documentLink": "/document/1688079", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1688079", "pdfSize": "1127KB"}, "id": "ref9", "text": "C. Y. Huang, C. T. Lin, \"Software reliability analysis by considering\nfault dependency and debugging time lag\", <em>IEEE Trans. Reliability</em>, vol. 55, no. 3, pp. 436-450, Sep. 2006.", "refType": "biblio"}, {"title": "Modeling and analysis of correlated software failures of\nmultiple types", "context": [{"text": " The time delay incurred in the fault detection, and correction processes should not be negligible [8]\u2013[10][12].", "sec": "sec1", "part": "1"}], "order": "10", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Most software reliability models assume independence of successive software runs. It is a strict assumption, and usually not valid in reality. Goseva-Popstojanova & Trivedi (2000) presented an interesting study on failure correlation among successive software runs. In this paper, by extending their results, a software reliability model is developed based on a Markov renewal process for the modeling of the dependence among successive software runs, where more than one type of failure is allowed i...", "documentLink": "/document/1402688", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1402688", "pdfSize": "197KB"}, "id": "ref10", "text": "Y. S. Dai, M. Xie, K. L. Poh, \"Modeling and analysis of correlated software failures of\nmultiple types\", <em>IEEE Trans. Reliability</em>, vol. 54, no. 1, pp. 100-106, Mar. 2005.", "refType": "biblio"}, {"title": "Failure correlation in software\nreliability models", "context": [{"text": " The time delay incurred in the fault detection, and correction processes should not be negligible [8]\u2013[11][12].", "sec": "sec1", "part": "1"}], "order": "11", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Perhaps the most stringent restriction in most software reliability models is the assumption of statistical independence among successive software failures. The authors research was motivated by the fact that although there are practical situations in which this assumption could be easily violated, much of the published literature on software reliability modeling does not seriously address this issue. The research work in this paper is devoted to developing the software reliability modeling fram...", "documentLink": "/document/855535", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=855535", "pdfSize": "171KB"}, "id": "ref11", "text": "K. Goeva-Popstojanova, K. S. Trivedi, \"Failure correlation in software\nreliability models\", <em>IEEE Trans. Reliability</em>, vol. 49, no. 1, pp. 37-48, Mar. 2000.", "refType": "biblio"}, {"title": "Robust recurrent neural network modeling for software fault\ndetection and correction prediction", "context": [{"text": " The time delay incurred in the fault detection, and correction processes should not be negligible [8]\u2013[12].", "sec": "sec1", "part": "1"}], "order": "12", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.ress.2006.04.007", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref12", "text": "Q. P. Hua, M. Xie, S. H. Nga, G. Levitin, \"Robust recurrent neural network modeling for software fault\ndetection and correction prediction\", <em>Reliability Engineering and System Safety</em>, vol. 92, no. 3, pp. 332-340, 2007.", "refType": "biblio"}, {"title": "Assessing staffing needs for a software\nmaintenance project through queuing simulation", "context": [{"text": " [13] proposed an approach based on queueing theory to help managers, and engineers to plan, and control project staffing in a distributed multiphase maintenance processes.", "sec": "sec1", "part": "1"}], "order": "13", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "We present an approach based on queuing theory and stochastic simulation to help planning, managing, and controlling the project staffing and the resulting service level in distributed multiphase maintenance processes. Data from a Y2K massive maintenance intervention on a large COBOL/JCL financial software system were used to simulate and study different service center configurations for a geographically distributed software maintenance project. In particular, a monolithic configuration correspo...", "documentLink": "/document/1265735", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1265735", "pdfSize": "1183KB"}, "id": "ref13", "text": "G. Antoniol, A. Cimitile, G. A. Lucca, M. D. Penta, \"Assessing staffing needs for a software\nmaintenance project through queuing simulation\", <em>IEEE Trans. Software Engineering</em>, vol. 30, no. 1, pp. 43-58, Jan. 2004.", "refType": "biblio"}, {"title": "Resource allocation model in software development", "context": [{"text": " Luong & Liu [14] have also applied queueing theory, and used queue models \\$M/M/1\\$, \\$M/M/{\\rm c}\\$, and Jackson networks to model software management, and maintenance during testing.", "sec": "sec1", "part": "1"}, {"text": " Luong & Liu [14] argued that the fault correction rate becomes constant after the developer has worked on the product for a period of time.", "sec": "sec3a1", "part": "1"}], "order": "14", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, we apply the queueing theory to model software management and maintenance during the system test, alpha test, and the beta test phases of a software system. The model helps us to verify the progress of the testing phase and estimate its cost. Based on the statistical results derived from the model, we then make a decision about changes in the workforce early rather than letting the product miss the scheduled deadline. Moreover, the model helps developers and managers to measure th...", "documentLink": "/document/902469", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=902469", "pdfSize": "603KB"}, "id": "ref14", "text": "B. Luong, D. B. Liu, \"Resource allocation model in software development\", <em>Proceedings of the 47th IEEE Annual Reliability and Maintainability Symposium</em>, pp. 213-218, 2001-Jan.", "refType": "biblio"}, {"title": "Software Engineering: Design, Reliability, and Management", "context": [{"text": "In the past, researchers have tried to use infinite server (a server which can service any number of jobs at a time) queueing models to describe software debugging behavior [15]\u2013[21].", "sec": "sec1", "part": "1"}, {"text": " Shooman [15] also discussed the fault generation phenomenon during debugging.", "sec": "sec2", "part": "1"}], "order": "15", "id": "ref15", "text": "M. L. Shooman, Software Engineering: Design Reliability and Management, 1983, McGraw-Hill.", "refType": "biblio"}, {"title": "A Bayesian differential debugging model\nfor software reliability", "context": [{"text": "In the past, researchers have tried to use infinite server (a server which can service any number of jobs at a time) queueing models to describe software debugging behavior [15]\u2013[16][21].", "sec": "sec1", "part": "1"}], "order": "16", "id": "ref16", "text": "B. Littlewood, \"A Bayesian differential debugging model\nfor software reliability\", <em>Proceedings of the 4th IEEE International Computer Software and Applications Conference</em>, pp. 511-517, 1980-Oct.", "refType": "biblio"}, {"title": "Software analysis handbook: Software complexity analysis and software reliability estimation and prediction,", "context": [{"text": "In the past, researchers have tried to use infinite server (a server which can service any number of jobs at a time) queueing models to describe software debugging behavior [15]\u2013[17][21].", "sec": "sec1", "part": "1"}, {"text": " In fact, Musa's approach assumes that the expected number of failures exponentially approaches an asymptote with time [17].", "sec": "sec2", "part": "1"}], "order": "17", "id": "ref17", "text": "A. T. Lee, T. Gunn, T. Pham, R. Ricaldi, <em>Software analysis handbook: Software complexity analysis and software reliability estimation and prediction</em>, 1994.", "refType": "biblio"}, {"title": "Software reliability prediction and assessment\nusing both finite and infinite server queuing approaches", "context": [{"text": "In the past, researchers have tried to use infinite server (a server which can service any number of jobs at a time) queueing models to describe software debugging behavior [15]\u2013[18][21].", "sec": "sec1", "part": "1"}, {"text": "In the past, researchers have discussed how to use queueing approaches to explain debugging behaviors in software development [18]\u2013[21].", "sec": "sec2", "part": "1"}, {"text": "The proposed ISQ-PD model is based on the following assumptions [3], [18], [21]:\n\n\n1\nThe fault detection process follows a NHPP.\n\n\n2\nThe software is subject to failures at random times, caused by the manifestation of remaining faults in the system.\n\n\n3\nThe mean number of faults detected in the time interval \\$(t,t+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system.", "sec": "sec3a", "part": "1"}, {"text": " Thus, from total probability theorem [18], [20], [21], we obtainOn the other hand, the probability that a fault is detected at time \\$x\\$ is [20], [21] In this case, we haveThe probability that a fault is detected at time \\$x\\$, and it is not completely removed at time \\$t\\$ isThus, we havewhere \\$i+j=n\\$.", "sec": "sec3a1", "part": "1"}, {"text": "This model assumes that [3], [18]:\n\n\n1\nThe fault detection process follows the NHPP.\n\n\n2\nThe software is subject to failures at random times caused by the manifestation of remaining faults in the system.\n\n\n3\nThe mean number of faults detected in time interval \\$(t,t+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system.", "sec": "sec3b", "part": "1"}], "order": "18", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Over the past 30 years, many software reliability growth models (SRGMs) have been proposed for estimation of reliability growth of software. In fact, effective debugging is not easy because the fault may not be immediately obvious. In the past, some researchers ever used an infinite server queueing (ISO) model to describe the software debugging behavior. An infinite-server queueing model is considered where access of customers to service is controlled by a gate and the gate is open only if all s...", "documentLink": "/document/4041904", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4041904", "pdfSize": "247KB"}, "id": "ref18", "text": "W. C. Huang, C. Y. Huang, C. C. Sue, \"Software reliability prediction and assessment\nusing both finite and infinite server queuing approaches\", <em>Proceedings of the 12th IEEE International Symposium on Pacific Rim Dependable Computing</em>, pp. 194-201, 2006-Dec.", "refType": "biblio"}, {"title": "Application and improvement of software\nreliability models", "context": [{"text": "In the past, researchers have tried to use infinite server (a server which can service any number of jobs at a time) queueing models to describe software debugging behavior [15]\u2013[19][21].", "sec": "sec1", "part": "1"}, {"text": "In the past, researchers have discussed how to use queueing approaches to explain debugging behaviors in software development [18]\u2013[19][21].", "sec": "sec2", "part": "1"}], "order": "19", "id": "ref19", "text": "D. Wallace, C. Coleman, \"Application and improvement of software\nreliability models\", <em>Proceedings of the 1st Annual NASA Office of Safety and Mission Assurance Software Assurance Symposium</em>, 2001-Sep.", "refType": "biblio"}, {"title": "A Software reliability growth modeling based on infinite\nserver queueing theory", "context": [{"text": "In the past, researchers have tried to use infinite server (a server which can service any number of jobs at a time) queueing models to describe software debugging behavior [15]\u2013[20][21].", "sec": "sec1", "part": "1"}, {"text": "In the past, researchers have discussed how to use queueing approaches to explain debugging behaviors in software development [18]\u2013[20][21].", "sec": "sec2", "part": "1"}, {"text": " For example, Inoue & Yamada [20] proposed an ISQ model considering the time distribution of the fault-isolation process based on a concept of a delayed S-shaped SRGM.", "sec": "sec2", "part": "1"}, {"text": "Given that the fault detection process \\$\\{N_{d}(t), t\\geq 0\\}\\$ is a NHPP, the number of corrected & removed faults with an infinite server queue by time \\$t\\$, \\$N_{r}(t)\\$, is an independent Poisson distribution with the mean value function [20], [21] where \\$G(\\bullet)\\$ is the cumulative distribution function of failure correction time.", "sec": "sec3a1", "part": "1"}, {"text": " Thus, from total probability theorem [18], [20], [21], we obtainOn the other hand, the probability that a fault is detected at time \\$x\\$ is [20], [21] In this case, we haveThe probability that a fault is detected at time \\$x\\$, and it is not completely removed at time \\$t\\$ isThus, we havewhere \\$i+j=n\\$.", "sec": "sec3a1", "part": "1"}], "order": "20", "id": "ref20", "text": "S. Inoue, S. Yamada, \"A Software reliability growth modeling based on infinite\nserver queueing theory\", <em>Proceedings of the 9th ISSAT International Conference on Reliability and Quality in Design</em>, pp. 305-309, 2003-Aug.", "refType": "biblio"}, {"title": "An Infinite Server Queueing Model for Software Readiness Assessment and Related Performance Measures", "context": [{"text": "In the past, researchers have tried to use infinite server (a server which can service any number of jobs at a time) queueing models to describe software debugging behavior [15]\u2013[21].", "sec": "sec1", "part": "1"}, {"text": "In the past, researchers have discussed how to use queueing approaches to explain debugging behaviors in software development [18]\u2013[21].", "sec": "sec2", "part": "1"}, {"text": " Yang [21] also proposed an ISQ model to predict software reliability, using a queueing theory to explain the software debugging process.", "sec": "sec2", "part": "1"}, {"text": " Note that \\$N_{d}(t)\\$, and \\$N_{r}(t)\\$ represent the number of faults detected, and removed by time \\$t\\$, respectively [3], [21].", "sec": "sec3", "part": "1"}, {"text": "The proposed ISQ-PD model is based on the following assumptions [3], [18], [21]:\n\n\n1\nThe fault detection process follows a NHPP.\n\n\n2\nThe software is subject to failures at random times, caused by the manifestation of remaining faults in the system.\n\n\n3\nThe mean number of faults detected in the time interval \\$(t,t+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system.", "sec": "sec3a", "part": "1"}, {"text": "Given that the fault detection process \\$\\{N_{d}(t), t\\geq 0\\}\\$ is a NHPP, the number of corrected & removed faults with an infinite server queue by time \\$t\\$, \\$N_{r}(t)\\$, is an independent Poisson distribution with the mean value function [20], [21] where \\$G(\\bullet)\\$ is the cumulative distribution function of failure correction time.", "sec": "sec3a1", "part": "1"}, {"text": " Thus, from total probability theorem [18], [20], [21], we obtainOn the other hand, the probability that a fault is detected at time \\$x\\$ is [20], [21] In this case, we haveThe probability that a fault is detected at time \\$x\\$, and it is not completely removed at time \\$t\\$ isThus, we havewhere \\$i+j=n\\$.", "sec": "sec3a1", "part": "1"}, {"text": " Thus, the departure process is an NHPP with the mean value function [21] Note that the above equation can also be written as.", "sec": "sec3a1", "part": "1"}, {"text": " If \\$\\mu\\neq b\\$, then we have [21] Similarly, if \\$m_{d}(t)\\$ is the Yamada delayed S-shaped model, and \\$\\gamma=1\\$, we have If we consider the special case that \\$\\mu=b\\$, If \\$\\mu\\neq b\\$, then Finally, if \\$m_{d}(t)\\$ is the inflection S-shaped model, then we have If \\$\\mu=b\\$, \\$m_{r}(t)\\$ is given by (28) at the bottom of the page.", "sec": "sec3a1", "part": "1"}, {"text": " The second data set (DS2) was from the system P1 reported by Yang in [21].", "sec": "sec5a", "part": "1"}], "order": "21", "id": "ref21", "text": "K. Z. Yang, <em>An Infinite Server Queueing Model for Software Readiness Assessment and Related Performance Measures</em>, 1996, Department of Electrical Engineering and Computer Science, Syracuse University.", "refType": "biblio"}, {"title": "Software Engineering: A Practitioner's Approach", "context": [{"text": " Fig. 1 permits estimation that the defect-removal efficiency was about 95% [22].", "sec": "sec2", "part": "1"}], "order": "22", "id": "ref22", "text": "R. S. Pressman, Software Engineering: A Practitioner's Approach, 2005, McGraw-Hill.", "refType": "biblio"}, {"title": "Software defect removal efficiency", "context": [{"text": " Note that Jones [23] reported that the US average for defect-removal efficiency is about 85%.", "sec": "sec2", "part": "1"}], "order": "23", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Defect-removal efficiency-the percentage of bugs eliminated by software reviews, inspections and tests-is a powerful software quality metric that should be understood by everyone in the software business. Many top companies have used this metric since the 1960s. In fact, one of the most common attributes of \"best in class\" companies is that their software managers, programmers and quality assurance staff know their defect-removal efficiency levels. This rather simple metric can lead to some very...", "documentLink": "/document/488361", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=488361", "pdfSize": "971KB"}, "id": "ref23", "text": "C. Jones, \"Software defect removal efficiency\", <em>IEEE Computer</em>, vol. 29, no. 4, pp. 94-95, Apr. 1996.", "refType": "biblio"}, {"title": "An\ninfinite server queueing approach for describing software reliability growth:\nUnified modeling and estimation framework", "context": [{"text": " [24], [25] proposed an approach to treat both ISQ, and FSQ models in a unified modeling framework.", "sec": "sec2", "part": "1"}], "order": "24", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In general, the software reliability models based on the nonhomogeneous Poisson processes (NHPPs) are quite popular to assess quantitatively the software reliability and its related dependability measures. Nevertheless, it is not so easy to select the best model from a huge number of candidates in the software testing phase, because the predictive performance of software reliability models strongly depends on the fault-detection data. The asymptotic trend of software fault-detection data can be ...", "documentLink": "/document/1371911", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1371911", "pdfSize": "215KB"}, "id": "ref24", "text": "T. Dohi, S. Osaki, K. S. Trivedi, \"An\ninfinite server queueing approach for describing software reliability growth:\nUnified modeling and estimation framework\", <em>Proceedings of the 11th Asia-Pacific Software Engineering Conference</em>, pp. 110-119, 2004-Dec.", "refType": "biblio"}, {"title": "An infinite server queueing model for assessment of the\nsoftware reliability", "context": [{"text": "In addition, Dohi et al. [24], [25] proposed an approach to treat both ISQ, and FSQ models in a unified modeling framework.", "sec": "sec2", "part": "1"}], "order": "25", "links": {"crossRefLink": "http://dx.doi.org/10.1002/ecjc.1078", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref25", "text": "T. Dohi, T. Matsuoka, S. Osaki, \"An infinite server queueing model for assessment of the\nsoftware reliability\", <em>Electronics and Communications in Japan (Part III: Fundamental Electronic Science)</em>, vol. 85, no. 3, pp. 43-51, 2002.", "refType": "biblio"}, {"title": "Probability and Statistics with Reliability, Queueing, and Computer Science Application", "context": [], "order": "26", "id": "ref26", "text": "K. S. Trivedi, Probability and Statistics with Reliability Queueing and Computer Science Application, 2002, John Wiley and Sons.", "refType": "biblio"}, {"title": "Introduction to Probability Models", "context": [], "order": "27", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The author examines both strategic and detailed issues of applying computer technology in projects to help ensure that the benefits afforded by the technology can be fully realised. The author discusses the technology issues, the system strategy and development, and the benefits of applying computer technology to project management. The author then discusses the project phases and their implementation.", "documentLink": "/document/284672", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=284672", "pdfSize": "319KB"}, "id": "ref27", "text": "S. M. Ross, Introduction to Probability Models, 2003, Academic Press.", "refType": "biblio"}, {"title": "Software reliability growth model with Weibull testing effort:\nA model and application", "context": [{"text": "AE is defined as [4], [28] For practical purposes, \\$M_{a}\\$ is obtained from software fault tracking after software testing.", "sec": "sec4b", "part": "1"}], "order": "28", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability measurement during the testing phase is essential for examining the degree of quality or reliability of a developed software system. A software-reliability growth model incorporating the amount of test effort expended during the software testing phase is developed. The time-dependent behavior of test-effort expenditures is described by a Weibull curve. Assuming that the error detection rate to the amount of test effort spent during the testing phase is proportional to the cu...", "documentLink": "/document/210278", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=210278", "pdfSize": "607KB"}, "id": "ref28", "text": "S. Yamada, J. Hishitani, S. Osaki, \"Software reliability growth model with Weibull testing effort:\nA model and application\", <em>IEEE Trans. Reliability</em>, vol. R-42, pp. 100-105, 1993.", "refType": "biblio"}, {"title": "A general imperfect software debugging model with s-shaped\nfault detection rate", "context": [{"text": " But in reality, developers experience cases where they fix one bug, but create another one [29]\u2013[36].", "sec": "sec3c", "part": "1"}], "order": "29", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A general software reliability model based on the nonhomogeneous Poisson process (NHPP) is used to derive a model that integrates imperfect debugging with the learning phenomenon. Learning occurs if testing appears to improve dynamically in efficiency as one progresses through a testing phase. Learning usually manifests itself as a changing fault-detection rate. Published models and empirical data suggest that efficiency growth due to learning can follow many growth-curves, from linear to that d...", "documentLink": "/document/784276", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=784276", "pdfSize": "619KB"}, "id": "ref29", "text": "H. Pham, L. Nordmann, X. Zhang, \"A general imperfect software debugging model with s-shaped\nfault detection rate\", <em>IEEE Trans. Reliability</em>, vol. 48, no. 2, pp. 169-175, Jun. 1999.", "refType": "biblio"}, {"title": "The effect of imperfect error detection\non reliability assessment via life testing", "context": [{"text": " But in reality, developers experience cases where they fix one bug, but create another one [29]\u2013[30][36].", "sec": "sec3c", "part": "1"}], "order": "30", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Measurement of software reliability by life testing involves executing the software on large numbers of test cases and recording the results. The number of failures observed is used to bound the failure probability even if the number of failures observed is zero. Typical analyses assume that all failures that occur are observed, but, in practice, failures occur without being observed. In this paper, we examine the effect of imperfect error detection, i.e. the situation in which a failure of the ...", "documentLink": "/document/265635", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=265635", "pdfSize": "793KB"}, "id": "ref30", "text": "P. E. Ammann, S. S. Brilliant, J. C. Knight, \"The effect of imperfect error detection\non reliability assessment via life testing\", <em>IEEE Trans. Software Engineering</em>, vol. 20, no. 2, pp. 142-148, Feb. 1994.", "refType": "biblio"}, {"title": "A study of the effect of imperfect debugging on software\ndevelopment cost", "context": [{"text": " But in reality, developers experience cases where they fix one bug, but create another one [29]\u2013[31][36].", "sec": "sec3c", "part": "1"}], "order": "31", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "It is widely recognized that the debugging processes are usually imperfect. Software faults are not completely removed because of the difficulty in locating them or because new faults might be introduced. Hence, it is of great importance to investigate the effect of the imperfect debugging on software development cost, which, in turn, might affect the optimal software release time or operational budget. In this paper, a commonly used cost model is extended to the case of imperfect debugging. Bas...", "documentLink": "/document/1199075", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1199075", "pdfSize": "565KB"}, "id": "ref31", "text": "M. Xie, B. Yang, \"A study of the effect of imperfect debugging on software\ndevelopment cost\", <em>IEEE Trans. Software Engineering</em>, vol. 29, no. 5, pp. 471-473, May 2003.", "refType": "biblio"}, {"title": "Incorporating imperfect debugging into software fault correction\nprocess", "context": [{"text": " But in reality, developers experience cases where they fix one bug, but create another one [29]\u2013[32][36].", "sec": "sec3c", "part": "1"}], "order": "32", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "For the traditional SRGMs, it is assumed that a detected fault is immediately removed and is perfectly repaired with no new faults being introduced. In reality, it is impossible to remove all faults from the fault correction process and have a fault-free effect on the software development environment. In order to relax this perfect debugging assumption, we introduce the possibility of imperfect debugging phenomenon. Furthermore, most of the traditional SRGMs have focused on the failure detection...", "documentLink": "/document/1414597", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1414597", "pdfSize": "1841KB"}, "id": "ref32", "text": "J. H. Lo, C. Y. Huang, \"Incorporating imperfect debugging into software fault correction\nprocess\", <em>Proceedings of 2004 IEEE Region 10 Conference</em>, pp. 326-329, 2004-Nov.", "refType": "biblio"}, {"title": "Reliability prediction and assessment of\nfielded software based on multiple change-point models", "context": [{"text": " But in reality, developers experience cases where they fix one bug, but create another one [29]\u2013[33][36].", "sec": "sec3c", "part": "1"}], "order": "33", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, we investigate some techniques for reliability prediction and assessment of fielded software. We first review how several existing software reliability growth models based on non-homogeneous Poisson processes (NHPPs) can be readily derived based on a unified theory for NHPP models. Furthermore, based on the unified theory, we can incorporate the concept of multiple change-points into software reliability modeling. Some models are proposed and discussed under both ideal and imperfe...", "documentLink": "/document/1607540", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1607540", "pdfSize": "144KB"}, "id": "ref33", "text": "C. Y. Huang, C. T. Lin, \"Reliability prediction and assessment of\nfielded software based on multiple change-point models\", <em>Proceedings of the 11th IEEE International Symposium on Pacific Rim Dependable Computing</em>, pp. 379-386, 2005-Dec.", "refType": "biblio"}, {"title": "Does imperfect debugging affect software reliability growth?", "context": [{"text": " But in reality, developers experience cases where they fix one bug, but create another one [29]\u2013[34][36].", "sec": "sec3c", "part": "1"}, {"text": " In the study of Ohba & Chou [34], about 14% of the detected & removed faults introduced new faults as a result of imperfect debugging.", "sec": "sec4c1", "part": "1"}], "order": "34", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper discusses the improvement of conventional software reliability growth models by elimination of the unreasonable assumption that errors or faults in a program can be perfectly removed when they are detected. The results show that exponential-type soft- ware reliability growth models that deal with error- counting data could be used even if the perfect debugging assumption were not held, in which case the interpretation of the model parameters should be changed. An analysis of real proj...", "documentLink": "/document/714425", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=714425", "pdfSize": "544KB"}, "id": "ref34", "text": "M. Ohba, X. Chou, \"Does imperfect debugging affect software reliability growth?\", <em>Proceedings of the 11th International Conference on Software Engineering</em>, pp. 237-244, 1989-May.", "refType": "biblio"}, {"title": "Distributed system availability in the case of imperfect\ndebugging process", "context": [{"text": " But in reality, developers experience cases where they fix one bug, but create another one [29]\u2013[35][36].", "sec": "sec3c", "part": "1"}], "order": "35", "id": "ref35", "text": "M. Xie, Y. S. Dai, K. L. Poh, C. D. Lai, \"Distributed system availability in the case of imperfect\ndebugging process\", <em>International Journal of Industrial Engineering</em>, vol. 11, no. 4, pp. 396-405, 2004.", "refType": "biblio"}, {"title": "Software reliability measurement in imperfect debugging\nenvironment and its application", "context": [{"text": " But in reality, developers experience cases where they fix one bug, but create another one [29]\u2013[36].", "sec": "sec3c", "part": "1"}], "order": "36", "links": {"crossRefLink": "http://dx.doi.org/10.1016/0951-8320(93)90104-7", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref36", "text": "S. Yamada, K. Tokuno, S. Osaki, \"Software reliability measurement in imperfect debugging\nenvironment and its application\", <em>Reliability Engineering & System Safety</em>, vol. 40, no. 2, pp. 139-147, 1993.", "refType": "biblio"}, {"title": "Software reliability growth model with error\ndependency", "context": [{"text": "MSE is defined as [37], [38] The lower MSE means less fitting error, and better performance.", "sec": "sec4b", "part": "1"}, {"text": " KD is defined as [1], [37] where \\$k\\$ is the sample size, \\$F^{\\ast}(x)\\$ is the normalized observed cumulative distribution at the \\$x\\$-th time point, and \\$F(x)\\$ is the expected cumulative distribution at the \\$x\\$-th time point, based on the model.", "sec": "sec4b", "part": "1"}], "order": "37", "links": {"crossRefLink": "http://dx.doi.org/10.1016/0026-2714(94)00054-R", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref37", "text": "P. K. Kapur, S. Younes, \"Software reliability growth model with error\ndependency\", <em>Microelectronics and Reliability</em>, vol. 35, no. 2, pp. 273-278, 1995.", "refType": "biblio"}, {"title": "Considering\nfault removal efficiency in software reliability assessment", "context": [{"text": "MSE is defined as [37], [38] The lower MSE means less fitting error, and better performance.", "sec": "sec4b", "part": "1"}], "order": "38", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability growth models (SRGMs) have been developed to estimate software reliability measures such as the number of remaining faults, software failure rate, and software reliability. Issues such as imperfect debugging and the learning phenomenon of developers have been considered in these models. However, most SRGMs assume that faults detected during tests will eventually be removed. Consideration of fault removal efficiency in the existing models is limited. In practice, fault remova...", "documentLink": "/document/1206460", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1206460", "pdfSize": "654KB"}, "id": "ref38", "text": "X. Zhang, X. Teng, H. Pham, \"Considering\nfault removal efficiency in software reliability assessment\", <em>IEEE Trans. Systems Man and CyberneticsPart A: Systems and Humans</em>, vol. 33, no. 1, pp. 114-120, Jan. 2003.", "refType": "biblio"}, {"title": "A model for software development effort\nand cost estimation", "context": [{"text": "The variance is defined as [39] where \\$bias=\\sum_{k=1}^{n}(m(t_{k})-m_{k})/n\\$.", "sec": "sec4b", "part": "1"}], "order": "39", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Several algorithmic models have been proposed to estimate software costs and other management parameters. Early prediction of completion time is absolutely essential for proper advance planning and aversion of the possible ruin of a project. L.H. Putnam's (1978) SLIM (Software LIfecycle Management) model offers a fairly reliable method that is used extensively to predict project completion times and manpower requirements as the project evolves. However, the nature of the Norden/Rayleigh curve us...", "documentLink": "/document/624305", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=624305", "pdfSize": "493KB"}, "id": "ref39", "text": "K. Pillai, V. S. S. Nair, \"A model for software development effort\nand cost estimation\", <em>IEEE Trans. Software Engineering</em>, vol. 23, no. 8, pp. 126-137, Aug. 1997.", "refType": "biblio"}, {"title": "Machine learning approaches to estimating\nsoftware development effort", "context": [{"text": "RMSPE is defined as [40] It is a measure of the closeness with which the model predicts the observation.", "sec": "sec4b", "part": "1"}], "order": "40", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Accurate estimation of software development effort is critical in software engineering. Underestimates lead to time pressures that may compromise full functional development and thorough testing of software. In contrast, overestimates can result in noncompetitive contract bids and/or over allocation of development resources and personnel. As a result, many models for estimating software development effort have been proposed. This article describes two methods of machine learning, which we use to...", "documentLink": "/document/345828", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=345828", "pdfSize": "1335KB"}, "id": "ref40", "text": "K. Srinivasan, D. Fisher, \"Machine learning approaches to estimating\nsoftware development effort\", <em>IEEE Trans. Software Engineering</em>, vol. 21, no. 2, pp. 126-136, 1995.", "refType": "biblio"}, {"title": "Software reliability modelsPast, present and future", "context": [{"text": " Sometimes LSE is preferred because it produces unbiased results [41].", "sec": "sec4c", "part": "1"}], "order": "41", "id": "ref41", "text": "M. Xie, \"Software reliability modelsPast present and future\" in Recent Advances in Reliability Theory: Methodology Practice and Inference, pp. 323-340, 2000.", "refType": "biblio"}, {"title": "Basic Queueing Theory", "context": [{"text": " In addition, here we also assume [42] Note that (43) is the probability that a detected fault will not be forced to join the queue, while \\$(\\rho^{h}e^{-\\rho})/h!\\$ is the Poisson distribution.", "sec": "sec4c", "part": "1"}], "order": "42", "id": "ref42", "text": "B. Bunday, Basic Queueing Theory, 1986, Edward Arnold.", "refType": "biblio"}, {"title": "An adaptive software reliability prediction approach", "context": [{"text": " [43] pointed out that, from a statistical point of view, the number of introduced faults is less significant when the total number of remaining faults is relatively large.", "sec": "sec4c1", "part": "1"}], "order": "43", "id": "ref43", "text": "M. L. Yin, L. E. James, S. Keene, R. R. Arellano, J. Peterson, \"An adaptive software reliability prediction approach\", <em>Proceedings of the 23rd Annual Software Engineering Workshop</em>, 1998-Dec.", "refType": "biblio"}, {"title": "Statistical Analysis of Software Reliability Models", "context": [{"text": " They postulated that imperfect debugging should be taken into account when the software product reaches the mature stage, where the number of remaining faults, and the number of introduced faults are of the same order of magnitude [44].", "sec": "sec4c1", "part": "1"}], "order": "44", "id": "ref44", "text": "M. C. J. van Pul, <em>Statistical Analysis of Software Reliability Models</em>, 1993, Department of Mathematics, Utrecht University.", "refType": "biblio"}, {"title": "An assessment of testing-effort dependent\nsoftware reliability growth models", "context": [{"text": " They also demonstrated that, in such a case, SRGM are still applicable, although imperfect debugging caused some variation in the parameter values of the models used [45].", "sec": "sec4c1", "part": "1"}], "order": "45", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Over the last several decades, many Software Reliability Growth Models (SRGM) have been developed to greatly facilitate engineers and managers in tracking and measuring the growth of reliability as software is being improved. However, some research work indicates that the delayed S-shaped model may not fit the software failure data well when the testing-effort spent on fault detection is not a constant. Thus, in this paper, we first review the logistic testing-effort function that can be used to...", "documentLink": "/document/4220785", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4220785", "pdfSize": "435KB"}, "id": "ref45", "text": "C. Y. Huang, S. Y. Kuo, M. R. Lyu, \"An assessment of testing-effort dependent\nsoftware reliability growth models\", <em>IEEE Trans. Reliability</em>, vol. 56, no. 2, pp. 198-211, Jun. 2007.", "refType": "biblio"}], "citations": {"paperCitations": {"nonIeee": [{"title": "Software Reliability Prediction Via Relevance Vector Regression", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.neucom.2015.12.077", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Jungang Lou, Yunliang Jiang, Qing Shen, Zhangguo Shen, Zhen Wang, Ruiqin Wang, \"Software Reliability Prediction Via Relevance Vector Regression\", <em>Neurocomputing</em>, pp. , 2016, ISSN 09252312.", "order": "1"}, {"title": "Software reliability analysis and assessment using queueing models with multiple change-points", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.camwa.2010.07.039", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chin-Yu Huang, Tsui-Ying Hung, \"Software reliability analysis and assessment using queueing models with multiple change-points\", <em>Computers & Mathematics with Applications</em>, vol. 60, pp. 2015, 2010, ISSN 08981221.", "order": "2"}, {"title": "Reliability growth by failure mode removal", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.ress.2014.04.012", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Donald P. Gaver, Patricia A. Jacobs, \"Reliability growth by failure mode removal\", <em>Reliability Engineering & System Safety</em>, vol. 130, pp. 27, 2014, ISSN 09518320.", "order": "3"}, {"title": "Software Reliability Growth Model with Partial Differential Equation for Various Debugging Processes", "links": {"crossRefLink": "http://dx.doi.org/10.1155/2016/2476584", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Jiajun Xu, Shuzhen Yao, \"Software Reliability Growth Model with Partial Differential Equation for Various Debugging Processes\", <em>Mathematical Problems in Engineering</em>, vol. 2016, pp. 1, 2016, ISSN 1024-123X.", "order": "4"}, {"title": "Modeling discovery and removal of security vulnerabilities in software system using priority queueing models", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s11416-014-0205-z", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Dae-Eun Lim, Tae-Sung Kim, \"Modeling discovery and removal of security vulnerabilities in software system using priority queueing models\", <em>Journal of Computer Virology and Hacking Techniques</em>, vol. 10, pp. 109, 2014, ISSN 2263-8733.", "order": "5"}, {"title": "Correlation analysis of software failure time data : Correlation analysis of software failure time data", "links": {"crossRefLink": "http://dx.doi.org/10.3724/SP.J.1087.2010.00600", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Jun-gang LOU, Jian-hui JIANG, \"Correlation analysis of software failure time data : Correlation analysis of software failure time data\", <em>Journal of Computer Applications</em>, vol. 30, pp. 600, 2010, ISSN 10019081.", "order": "6"}, {"title": "Modeling and Analysis of Software Fault Detection and Correction Process Through Weibull-Type Fault Reduction Factor, Change Point and Imperfect Debugging", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s13369-016-2189-0", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Subhashis Chatterjee, Ankur Shukla, \"Modeling and Analysis of Software Fault Detection and Correction Process Through Weibull-Type Fault Reduction Factor Change Point and Imperfect Debugging\", <em>Arabian Journal for Science and Engineering</em>, pp. , 2016, ISSN 2193-567X.", "order": "7"}, {"title": "DEBUGGING PROCESS-ORIENTED DISCRETE SOFTWARE RELIABILITY MODELING", "links": {"crossRefLink": "http://dx.doi.org/10.1142/S0218539309003447", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "SHINJI INOUE, NAOKI IWAMOTO, SHIGERU YAMADA, \"DEBUGGING PROCESS-ORIENTED DISCRETE SOFTWARE RELIABILITY MODELING\", <em>International Journal of Reliability Quality and Safety Engineering</em>, vol. 16, pp. 357, 2009, ISSN 0218-5393.", "order": "8"}, {"title": "Sensitivity analysis of release time of software reliability models incorporating testing effort with multiple change-points", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.apm.2010.03.006", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Xiang Li, Min Xie, Szu Hui Ng, \"Sensitivity analysis of release time of software reliability models incorporating testing effort with multiple change-points\", <em>Applied Mathematical Modelling</em>, vol. 34, pp. 3560, 2010, ISSN 0307904X.", "order": "9"}, {"title": "Risk-based software release policy under parameter uncertainty", "links": {"crossRefLink": "http://dx.doi.org/10.1177/1748006XJRR286", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "M Xie, X Li, S H Ng, \"Risk-based software release policy under parameter uncertainty\", <em>Proceedings of the Institution of Mechanical Engineers Part O Journal of Risk and Reliability</em>, vol. 225, pp. 42, 2011, ISSN 17480078.", "order": "10"}, {"title": "Systems and Software Engineering with Applications", "links": {"crossRefLink": "http://dx.doi.org/10.1002/9781118098929.ch12", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "pp. 263, 2011, ISBN 9781118098929.", "order": "11"}, {"title": "STOCHASTIC SOFTWARE PERFORMABILITY EVALUATION BASED ON NHPP RELIABILITY GROWTH MODEL", "links": {"crossRefLink": "http://dx.doi.org/10.1142/S0218539311004172", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "KOICHI TOKUNO, TATSUYA NAGATA, SHIGERU YAMADA, \"STOCHASTIC SOFTWARE PERFORMABILITY EVALUATION BASED ON NHPP RELIABILITY GROWTH MODEL\", <em>International Journal of Reliability Quality and Safety Engineering</em>, vol. 18, pp. 431, 2011, ISSN 0218-5393.", "order": "12"}, {"title": "An optimized method for software reliability model based on nonhomogeneous Poisson process", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.apm.2016.01.016", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Jinyong Wang, Zhibo Wu, Yanjun Shu, Zhan Zhang, \"An optimized method for software reliability model based on nonhomogeneous Poisson process\", <em>Applied Mathematical Modelling</em>, pp. , 2016, ISSN 0307904X.", "order": "13"}, {"title": "Software Reliability Growth Modelling and Analysis with Dual Fault Detection and Correction Processes", "links": {"crossRefLink": "http://dx.doi.org/10.1080/0740817X.2015.1096432", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Lujia Wang, Qingpei Hu, Jian Liu, \"Software Reliability Growth Modelling and Analysis with Dual Fault Detection and Correction Processes\", <em>IIE Transactions</em>, pp. 00, 2015, ISSN 0740-817X.", "order": "14"}, {"title": "Modeling of Software Fault Detection and Correction Processes Based on the Correction Lag", "links": {"crossRefLink": "http://dx.doi.org/10.3923/itj.2009.735.742", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Yanjun Shu, Hongwei Liu, Zhibo Wu, Xiaozong Yang, \"Modeling of Software Fault Detection and Correction Processes Based on the Correction Lag\", <em>Information Technology Journal</em>, vol. 8, pp. 735, 2009, ISSN 18125638.", "order": "15"}, {"title": "A New Software Reliability Model Considering Warps Between Different Software Failure Processes : A New Software Reliability Model Considering Warps Between Different Software Failure Processes", "links": {"crossRefLink": "http://dx.doi.org/10.3724/SP.J.1016.2010.01263", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Jun-Gang LOU, Jian-Hui JIANG, Ang JIN, \"A New Software Reliability Model Considering Warps Between Different Software Failure Processes : A New Software Reliability Model Considering Warps Between Different Software Failure Processes\", <em>Chinese Journal of Computers</em>, vol. 33, pp. 1263, 2010, ISSN 02544164.", "order": "16"}, {"title": "Software Development Queuing Model", "links": {"crossRefLink": "http://dx.doi.org/10.2514/1.40133", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Norman Schneidewind, \"Software Development Queuing Model\", <em>Journal of Aerospace Computing Information and Communication</em>, vol. 7, pp. 308, 2010, ISSN 1542-9423.", "order": "17"}], "ieee": [{"title": "Methodology on qualitative simulation modeling of software reliability based on chaos theory", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6933522", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6933522", "pdfSize": "261KB"}, "displayText": "Li Qian, \"Methodology on qualitative simulation modeling of software reliability based on chaos theory\", <em>Software Engineering and Service Science (ICSESS) 2014 5th IEEE International Conference on</em>, pp. 99-104, 2014, ISSN 2327-0594.", "order": "1"}, {"title": "A discussion of multiple learning effects and unconscious behavior in the software debugging process with variable potential errors and change-points", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6962691", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6962691", "pdfSize": "1457KB"}, "displayText": "Kuei-Chen Chiu, Shulan Hsieh, \"A discussion of multiple learning effects and unconscious behavior in the software debugging process with variable potential errors and change-points\", <em>Industrial Engineering and Engineering Management (IEEM) 2013 IEEE International Conference on</em>, pp. 1656-1660, 2013.", "order": "2"}, {"title": "Software Reliability Multi-Scale Prediction Model Based on EMD and RBF Network", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4756729", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4756729", "pdfSize": "245KB"}, "displayText": "Yunlong Teng, Yibing Shi, Yulong Zhou, \"Software Reliability Multi-Scale Prediction Model Based on EMD and RBF Network\", <em>Computational Intelligence and Industrial Application 2008. PACIIA '08. Pacific-Asia Workshop on</em>, vol. 2, pp. 31-35, 2008.", "order": "3"}, {"title": "A Study on the Applicability of Modified Genetic Algorithms for the Parameter Estimation of Software Reliability Modeling", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5676305", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5676305", "pdfSize": "518KB"}, "displayText": "Chao-Jung Hsu, Chin-Yu Huang, \"A Study on the Applicability of Modified Genetic Algorithms for the Parameter Estimation of Software Reliability Modeling\", <em>Computer Software and Applications Conference (COMPSAC) 2010 IEEE 34th Annual</em>, pp. 531-540, 2010, ISSN 0730-3157.", "order": "4"}, {"title": "Estimation and Analysis of Some Generalized Multiple Change-Point Software Reliability Models", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5753981", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5753981", "pdfSize": "608KB"}, "displayText": "Chin-Yu Huang, Michael R. Lyu, \"Estimation and Analysis of Some Generalized Multiple Change-Point Software Reliability Models\", <em>Reliability IEEE Transactions on</em>, vol. 60, pp. 498-514, 2011, ISSN 0018-9529.", "order": "5"}, {"title": "Bayesian analysis for NHPP-based software fault detection and correction processes", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/7385808", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=7385808", "pdfSize": "2715KB"}, "displayText": "L. J. Wang, Q. P. Hu, M. Xie, \"Bayesian analysis for NHPP-based software fault detection and correction processes\", <em>Industrial Engineering and Engineering Management (IEEM) 2015 IEEE International Conference on</em>, pp. 1046-1050, 2015.", "order": "6"}, {"title": "Applying express-queue-based approach to Software Reliability and cost analysis", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/7753632", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=7753632", "pdfSize": "833KB"}, "displayText": "Shu-Cheng Chang, Chin-Yu Huang, Jhih-Sin Lin, \"Applying express-queue-based approach to Software Reliability and cost analysis\", <em>Signal Processing Communications and Computing (ICSPCC) 2016 IEEE International Conference on</em>, pp. 1-6, 2016.", "order": "7"}, {"title": "Simulation-based FDP &#x00026; FCP analysis with queueing models", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4738137", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4738137", "pdfSize": "631KB"}, "displayText": "Q. P. Hu, R. Peng, S. H. Ng, H. Q. Wang, \"Simulation-based FDP &#x00026; FCP analysis with queueing models\", <em>Industrial Engineering and Engineering Management 2008. IEEM 2008. IEEE International Conference on</em>, pp. 1577-1581, 2008.", "order": "8"}, {"title": "Software reliability modeling of fault detection and correction processes", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4914730", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4914730", "pdfSize": "403KB"}, "displayText": "Yanjun Shu, Zhibo Wu, Hongwei Liu, Xiaozong Yang, \"Software reliability modeling of fault detection and correction processes\", <em>Reliability and Maintainability Symposium 2009. RAMS 2009. Annual</em>, pp. 521-526, 2009, ISSN 0149-144X.", "order": "9"}, {"title": "Software Reliability Prediction Model Based on Relevance Vector Machine", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5663537", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5663537", "pdfSize": "194KB"}, "displayText": "Qiuhong Zheng, \"Software Reliability Prediction Model Based on Relevance Vector Machine\", <em>Semantics Knowledge and Grid (SKG) 2010 Sixth International Conference on</em>, pp. 317-320, 2010.", "order": "10"}, {"title": "Testing Effort Dependent Software FDP and FCP Models with Consideration of Imperfect Debugging", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5502847", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5502847", "pdfSize": "422KB"}, "displayText": "R. Peng, Q.P. Hu, S.H. Ng, M. Xie, \"Testing Effort Dependent Software FDP and FCP Models with Consideration of Imperfect Debugging\", <em>Secure Software Integration and Reliability Improvement (SSIRI) 2010 Fourth International Conference on</em>, pp. 141-146, 2010.", "order": "11"}, {"title": "Simulation of Software Fault Detection and Correction Processes Considering Different Skill Levels of Debuggers", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6974783", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6974783", "pdfSize": "125KB"}, "displayText": "Rui Peng, F.R. Shahrzad, \"Simulation of Software Fault Detection and Correction Processes Considering Different Skill Levels of Debuggers\", <em>Dependable Computing (PRDC) 2014 IEEE 20th Pacific Rim International Symposium on</em>, pp. 157-158, 2014.", "order": "12"}, {"title": "Software reliability prediction model based on relevance vector machine", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5357866", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5357866", "pdfSize": "154KB"}, "displayText": "Lou Jun-gang, JiangJian-hui, Shuai Chun-yan, Zhang Rui, Jin Ang, \"Software reliability prediction model based on relevance vector machine\", <em>Intelligent Computing and Intelligent Systems 2009. ICIS 2009. IEEE International Conference on</em>, vol. 1, pp. 229-233, 2009.", "order": "13"}, {"title": "A finite queuing model with generalized modified Weibull testing effort for software reliability", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6181985", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6181985", "pdfSize": "617KB"}, "displayText": "Nan Zhang, Gang Cui, Hong-wei Liu, \"A finite queuing model with generalized modified Weibull testing effort for software reliability\", <em>Computer Science and Network Technology (ICCSNT) 2011 International Conference on</em>, vol. 1, pp. 401-406, 2011.", "order": "14"}, {"title": "A New Framework and Application of Software Reliability Estimation Based on Fault Detection and Correction Processes", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/7272916", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=7272916", "pdfSize": "300KB"}, "displayText": "Yu Liu, Min Xie, Jianfeng Yang, Ming Zhao, \"A New Framework and Application of Software Reliability Estimation Based on Fault Detection and Correction Processes\", <em>Software Quality Reliability and Security (QRS) 2015 IEEE International Conference on</em>, pp. 65-74, 2015.", "order": "15"}, {"title": "A Study on Software Reliability Prediction Based on Transduction Inference", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5692226", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5692226", "pdfSize": "148KB"}, "displayText": "Jungang Lou, Jianhui Jiang, Chunyan Shuai, Ying Wu, \"A Study on Software Reliability Prediction Based on Transduction Inference\", <em>Test Symposium (ATS) 2010 19th IEEE Asian</em>, pp. 77-80, 2010, ISSN 1081-7735.", "order": "16"}]}, "patentCitationCount": "0", "contentType": "periodicals", "isEarlyAccess": false, "lastupdate": "2016-11-15T09:49:30", "publisher": "IEEE", "title": "Software Reliability Analysis and Measurement Using Finite and Infinite Server Queueing Models", "nonIeeeCitationCount": "17", "publicationNumber": "24", "formulaStrippedArticleTitle": "Software Reliability Analysis and Measurement Using Finite and Infinite Server Queueing Models", "mediaPath": "/mediastore/IEEE/content/media/24/4459841/4385745", "mlTime": "PT0.208989S", "ieeeCitationCount": "16"}}