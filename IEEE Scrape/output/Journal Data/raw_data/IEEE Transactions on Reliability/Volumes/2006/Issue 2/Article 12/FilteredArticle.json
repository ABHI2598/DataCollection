{"arnumber": "1638411", "details": {"title": "Incorporating fault debugging activities into software reliability models: a simulation approach", "volume": "55", "keywords": [{"type": "IEEE Keywords", "kwd": ["Software debugging", "Software testing", "Fault detection", "Costs", "Software reliability", "Application software", "Computational modeling", "Failure analysis", "Object detection", "Phase detection"]}, {"type": "INSPEC: Controlled Indexing", "kwd": ["software cost estimation", "program debugging", "digital simulation", "software fault tolerance", "program testing"]}, {"type": "INSPEC: Non-Controlled Indexing", "kwd": ["optimal software release time", "software fault debugging", "software reliability growth models", "rate-based simulation framework", "explicit debugging activities", "imperfect debugging", "failure rate", "economic cost model"]}, {"type": "Author Keywords ", "kwd": ["software reliability growth models", "Debugging", "imperfect debugging"]}], "issue": "2", "link": "http://ieeexplore.ieee.org/servlet/opac?punumber=24", "authors": [{"affiliation": "Dept. of Comput. Sci. & Eng., Connecticut Univ., Storrs, CT, USA", "bio": {"p": ["Swapna S. Gokhale received the B.E. (Hons.) in electrical and electronics engineering and computer science from the Birla Institute of Technology and Science, Pilani, India, in 1994, and the M.S. and Ph.D. degrees in electrical and computer engineering from Duke University in 1996 and 1998, respectively. Currently, she is an Assistant Professor in the Department of Computer Science and Engineering at the University of Connecticut (UConn), Storrs. Prior to joining UConn, she was a Research Scientist at Telcordia Technologies in Morristown, NJ. Her research interests are software reliability and performance, software testing, software maintenance, program comprehension and understanding, and wireless and multimedia networking."]}, "name": "S.S. Gokhale"}, {"affiliation": "Dept. of Comput. Sci. & Eng., Connecticut Univ., Storrs, CT, USA", "bio": {"p": ["Michael R. Lyu received the B.S. degree in electrical engineering from National Taiwan University, Hsinchu, Taiwan, and the M.S. degree in computer engineering and Ph.D. degree in computer science from University of California, Los Angeles, in 1981, 1985, and 1988, respectively. He is a Professor in the Computer Science and Engineering Department of the Chinese University of Hong Kong, Shatin, NT, Hong Kong. He worked at the Jet Propulsion Laboratory, Bellcore, and Bell Labs, and taught at the University of Iowa. He is the Editor-in-Chief for two book volumes: Software Fault Tolerance (Wiley, 1995) and the Handbook of Software Reliability Engineering (IEEE and McGraw-Hill, 1996). He has participated in more than 30 industrial projects and helped to develop many commercial systems and software tools. He was frequently invited as a keynote or tutorial speaker to conferences and workshops in U.S., Europe, and Asia. His research interests are software reliability engineering, software fault tolerance, distributed systems, image and video processing, multimedia technologies, and mobile networks. He has published over 200 papers in these areas. Dr. Lyu initiated the International Symposium on Software Reliability Engineering (ISSRE) and was the Program Chair for ISSRE'1996, Program Co-Chair for WWW10 and SRDS'2005, and General Chair for ISSRE'2001 and PRDC'2005. He was also the recipient of the Best Paper Awards in ISSRE'98 and in ISSRE'2003. He was an Associate Editor of the IEEE Transactions on Reliability, the IEEE Transactions on Knowledge and Data Engineering, and the Journal of Information Science and Engineering."]}, "name": "M.R. Lyu"}, {"affiliation": "Dept. of Comput. Sci. & Eng., Connecticut Univ., Storrs, CT, USA", "bio": {"p": ["Kishor S. Trivedi holds the Hudson Chair in the Department of Electrical and Computer Engineering at Duke University, Durham, NC. He has been on the Duke faculty since 1975. He is the author of a well-known text entitled Probability and Statistics with Reliability, Queuing and Computer Science Applications whose revised second edition is under publication. He has also published two other books entitled Performance and Reliability Analysis of Computer Systems (Kluwer Academic Publishers) and Queueing Networks and Markov Chains (John Wiley). He has published over 300 articles, lectured extensively on the area of reliability and performance assessment, and has supervised 39 Ph.D. dissertations. He has made seminal contributions in software rejuvenation, solution techniques for Markov chains, fault trees, stochastic Petri nets, and performability models. He has actively contributed to the quantification of security and survivability. He is a co-designer of the HARP, SAVE, SHARPE, and SPNP software packages that have been well circulated. His research interest is reliability and performance assessment of computer and communication systems. Mr. Trivedi is a Golden Core Member of the IEEE Computer Society."]}, "name": "K.S. Trivedi"}], "publisher": "IEEE", "doi": "10.1109/TR.2006.874911", "abstract": "A large number of software reliability growth models have been proposed to analyse the reliability of a software application based on the failure data collected during the testing phase of the application. To ensure analytical tractability, most of these models are based on simplifying assumptions of instantaneous & perfect debugging. As a result, the estimates of the residual number of faults, failure rate, reliability, and optimal software release time obtained from these models tend to be optimistic. To obtain realistic estimates, it is desirable that the assumptions of instantaneous & perfect debugging be amended. In this paper we discuss the various policies according to which debugging may be conducted. We then describe a rate-based simulation framework to incorporate explicit debugging activities, which may be conducted according to the different debugging policies, into software reliability growth models. The simulation framework can also consider the possibility of imperfect debugging in conjunction with any of the debugging policies. Further, we also present a technique to compute the failure rate, and the reliability of the software, taking into consideration explicit debugging. An economic cost model to determine the optimal software release time in the presence of debugging activities is also described. We illustrate the potential of the simulation framework using two case studies."}, "references": [{"title": "Understanding and controlling software costs", "context": [{"text": " This cost is based on the observations of Boehm [1], and Dalal et al. [3], that the cost of fixing a software fault after system release is an order of magnitude greater than the cost of fixing while testing. \\$C_{1}\\$, \\$C_{2}\\$, and \\$C_{3}\\$ were multiplied by a value of 75 to arrive at the value of the staff, assuming a loaded salary of 75 monetary units per staff-unit.", "sec": "sec6a", "part": "1"}], "order": "1", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A discussion is presented of the two primary ways of understanding software costs. The black-box or influence-function approach provides useful experimental and observational insights on the relative software productivity and quality leverage of various management, technical, environmental, and personnel options. The glass-box or cost distribution approach helps identify strategies for integrated software productivity and quality improvement programs using such structures as the value chain and ...", "documentLink": "/document/6191", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6191", "pdfSize": "1696KB"}, "id": "ref1", "text": "B. W. Boehm, P. N. Papaccio, \"Understanding and controlling software costs\", <em>IEEE Trans. on Software Engineering</em>, vol. 14, no. 10, pp. 1462-1477, October 1988.", "refType": "biblio"}, {"title": "Cost implications of imperfect repair in software reliability", "context": [{"text": " In addition, as suggested by [2], [16], most of the faults encountered by customers are ones reintroduced during debugging of the faults detected during testing.", "sec": "sec1", "part": "1"}], "order": "2", "id": "ref2", "text": "P. J. Boland, N. Chuiv, \"Cost implications of imperfect repair in software reliability\", <em>International Journal of Reliability and Applications.</em>, vol. 2, no. 3, pp. 147-160, 2001.", "refType": "biblio"}, {"title": "Some graphical aids for deciding when to\nstop testing software", "context": [{"text": " Dalal [3] assumes that the software debugging follows a constant debugging rate, and incorporates debugging into an exponential order statistics software reliability model.", "sec": "sec1", "part": "1"}, {"text": " The debugging process discussed by Kremer [15], Levendel [16], and Dalal [3] is of this type.", "sec": "sec3a", "part": "1"}, {"text": "Software testing is an expensive process, and typically consumes about one-third to one-half of the cost of a typical software development project [3].", "sec": "sec5", "part": "1"}, {"text": "The stopping rule problem has been addressed by several researchers in the literature [3], [6], [22], [28], [35].", "sec": "sec5", "part": "1"}, {"text": " [3], that the cost of fixing a software fault after system release is an order of magnitude greater than the cost of fixing while testing. \\$C_{1}\\$, \\$C_{2}\\$, and \\$C_{3}\\$ were multiplied by a value of 75 to arrive at the value of the staff, assuming a loaded salary of 75 monetary units per staff-unit.", "sec": "sec6a", "part": "1"}], "order": "3", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "It is noted that the developers of large software systems must decide how much software should be tested before releasing it. An explicit tradeoff between the costs of testing and releasing is considered. The former may include the opportunity cost of continued testing, and the latter may include the cost of customer dissatisfaction and of fixing faults found in the field. Exact stopping rules were obtained by Dalal and Mallows (J. Amer., Statist. Assoc., vol.83, p.872, 1988), under the assumpti...", "documentLink": "/document/46868", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=46868", "pdfSize": "652KB"}, "id": "ref3", "text": "S. R. Dalal, C. L. Mallows, \"Some graphical aids for deciding when to\nstop testing software\", <em>IEEE Trans. on Software Engineering</em>, vol. 8, no. 2, pp. 169-175, February 1990.", "refType": "biblio"}, {"title": "Software reliability: assumptions, realities and data", "context": [{"text": " In practice, however, the time taken to debug a fault is finite, and this debugging time has a direct impact on the residual number of faults, and hence the reliability of the software application [4], [23], [33].", "sec": "sec1", "part": "1"}], "order": "4", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability models are an important issue to identify the actual state of the system during the quality assurance process and to predict the customer release reliability. Major assumptions of state of the art models are compared with some realities of a very large system from industry. Data (failure statistics) observed during the quality assurance process and after 7 years of customer release (1990-96) are supplied to validate existing or upcoming research models.", "documentLink": "/document/792631", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=792631", "pdfSize": "103KB"}, "id": "ref4", "text": "M. Defamie, P. Jacobs, J. Thollembeck, \"Software reliability: assumptions realities and data\", <em>Proc. of International Conference on Software Maintenance</em>, 1999-September.", "refType": "biblio"}, {"title": "Learning curve approach to reliability monitoring", "context": [{"text": " For example, Goel-Okumoto model [8], Yamada S-shaped [35], Musa-Okumoto model [19], Duane model [5], and Littlewood-Verrall model [17] can be cast as pure birth NHCTMC processes, whereas the Jelinski-Moranda model [13] can be cast as a pure death NHCTMC model.", "sec": "sec2a", "part": "1"}], "order": "5", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Several different and complex electromechanical and mechanical systems are shown to have remarkably similar rates of reliability improvement during system development. These similarities provide the basis for a learning curve which can be used to monitor development progress, predict growth patterns, and plan programs for reliability improvement.", "documentLink": "/document/4319640", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4319640", "pdfSize": "775KB"}, "id": "ref5", "text": "J. T. Duane, \"Learning curve approach to reliability monitoring\", <em>IEEE Trans. on Aerospace</em>, vol. AS-2, pp. 563-566, 1964.", "refType": "biblio"}, {"title": "Determining the cost of a stop-test decision", "context": [{"text": "The stopping rule problem has been addressed by several researchers in the literature [3], [6], [22], [28], [35].", "sec": "sec5", "part": "1"}, {"text": " [6], the economic consequences \\$E\\$, involved in stopping testing at time \\$t_{s}\\$ units, or releasing the software at \\$t_{s}\\$ units after test execution, should take into consideration the following costs:\n\n\u2022The cost of testing activities, like running test cases & analysing data, the amount of man-power, and the CPU time spent by the time \\$t_{s}\\$, or equivalent \u201ctesting-effort\u201d [34], [36] is denoted by \\$C_{1}\\$.", "sec": "sec5", "part": "1"}, {"text": " [6].", "sec": "sec6a", "part": "1"}], "order": "6", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "An approach to determining the consequences of a stop-test decision that combines software reliability engineering and economic analysis is described. The approach develops a model to quantify the economic consequences associated with terminating testing at a reliability achieved with a specified number of units of test-program execution, collects data on failures and program-execution time during system test, analyzes reliability data by selecting a reliability-growth model and fitting the mode...", "documentLink": "/document/199726", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=199726", "pdfSize": "1379KB"}, "id": "ref6", "text": "W. Ehrlich, B. Prasanna, J. Stampfel, J. Wu, \"Determining the cost of a stop-test decision\", <em>IEEE Software</em>, vol. 10, no. 2, pp. 33-42, March 1993.", "refType": "biblio"}, {"title": "Software Reliability Modeling Survey", "context": [{"text": " A detailed overview of these models can be obtained from elsewhere [7].", "sec": "sec1", "part": "1"}], "order": "7", "id": "ref7", "text": "\"Software Reliability Modeling Survey\" in Handbook of Software Reliability Engineering., pp. 71-117, 1996, McGraw-Hill.", "refType": "biblio"}, {"title": "Time-dependent error-detection rate models\nfor software reliability and other performance measures", "context": [{"text": " Imperfect debugging has also been considered by other researchers [8], [12], [15], [16].", "sec": "sec1", "part": "1"}, {"text": " For example, Goel-Okumoto model [8], Yamada S-shaped [35], Musa-Okumoto model [19], Duane model [5], and Littlewood-Verrall model [17] can be cast as pure birth NHCTMC processes, whereas the Jelinski-Moranda model [13] can be cast as a pure death NHCTMC model.", "sec": "sec2a", "part": "1"}, {"text": " The failure rate for this particular example is assumed to be that of the Goel-Okumoto model [8], and is given by \\$\\lambda(n,t)=34.05\\ast0.0057\\ast{e}^{-0.0057t}\\$. \\$t_{R}\\$, computed using these values, is given by 128.1.", "sec": "sec4", "part": "1"}, {"text": "In this case study, for the purpose of illustration, we use the failure rate of the Goel-Okumoto model [8].", "sec": "sec6b", "part": "1"}, {"text": " The parameters of the rate function of the Goel-Okumoto model for NTDS data [8] were estimated using CASRE [18].", "sec": "sec6b", "part": "1"}], "order": "8", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper presents a stochastic model for the software failure phenomenon based on a nonhomogeneous Poisson process (NHPP). The failure process is analyzed to develop a suitable meanvalue function for the NHPP; expressions are given for several performance measures. Actual software failure data are analyzed and compared with a previous analysis.", "documentLink": "/document/5220566", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5220566", "pdfSize": "918KB"}, "id": "ref8", "text": "A. L. Goel, K. Okumoto, \"Time-dependent error-detection rate models\nfor software reliability and other performance measures\", <em>IEEE Trans. on Reliability</em>, vol. R-28, no. 3, pp. 206-211, August 1979.", "refType": "biblio"}, {"title": "Software failure rate and reliability incorporating repair\npolicies", "context": [{"text": " Expressions to compute \\$t_{R}\\$ for finite failure NHPP models have been derived elsewhere [9].", "sec": "sec4", "part": "1"}], "order": "9", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Reliability of a software application, its failure rate and the residual number of faults in an application are the three most important metrics that provide a quantitative assessment of the failure characteristics of an application. Typically, one of many stochastic models known as software reliability growth models (SRGMs) is used to describe the failure behavior of an application in its testing phase, and obtain an estimate of the above metrics. In order to ensure analytical tractability, SRG...", "documentLink": "/document/1357924", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1357924", "pdfSize": "355KB"}, "id": "ref9", "text": "S. Gokhale, \"Software failure rate and reliability incorporating repair\npolicies\", <em>Proc. of METRICS 04</em>, 2004-September.", "refType": "biblio"}, {"title": "Reliability simulation of component-based software systems", "context": [{"text": " In recent years, rate-based simulation has also been used for architecture-based software reliability analysis [10].", "sec": "sec2b", "part": "1"}], "order": "10", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Prevalent Markovian and semi Markovian methods to predict the reliability and performance of component based heterogeneous systems suffer from several limitations: they are subject to an intractably large state space for more complex scenarios, and they cannot take into account the influence of various parameters such as reliability growth of individual components, dependencies among components, etc., in a single model. Discrete event simulation offers an alternative to analytical models as it c...", "documentLink": "/document/730882", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=730882", "pdfSize": "309KB"}, "id": "ref10", "text": "S. Gokhale, M. R. Lyu, K. S. Trivedi, \"Reliability simulation of component-based software systems\", <em>Proc. of Ninth Intl. Symposium on Software Reliability Engineering (ISSRE 98)</em>, pp. 192-201, 1998-November.", "refType": "biblio"}, {"title": "Analysis of software fault\nremoval policies using a non homogeneous continuous time Markov chain", "context": [{"text": " [11] incorporates explicit repair into SRGM using a numerical solution.", "sec": "sec1", "part": "1"}], "order": "11", "links": {"crossRefLink": "http://dx.doi.org/10.1023/B:SQJO.0000034709.63615.8b", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref11", "text": "S. Gokhale, M. R. Lyu, K. S. Trivedi, \"Analysis of software fault\nremoval policies using a non homogeneous continuous time Markov chain\", <em>Software Quality Journal</em>, pp. 211-230, September 2004.", "refType": "biblio"}, {"title": "Effect of repair policies on software reliability", "context": [{"text": " Imperfect debugging has also been considered by other researchers [8], [12], [15], [16].", "sec": "sec1", "part": "1"}], "order": "12", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability is an important metric that quantifies the quality of the software product and is inversely related to the number of unrepaired faults in the system. Fault removal is a critical process in achieving the desired level of quality before software deployment in the field. Conventional software reliability models assume that the time to remove a fault is negligible and that the repair process is perfect. We examine various kinds of repair scenarios, and analyze the effect of thes...", "documentLink": "/document/613262", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=613262", "pdfSize": "685KB"}, "id": "ref12", "text": "S. Gokhale, P. N. Marinos, K. S. Trivedi, M. R. Lyu, \"Effect of repair policies on software reliability\", <em>Proc. of Computer Assurance (COMPASS 97)</em>, pp. 105-116, 1997-June.", "refType": "biblio"}, {"title": "Statistical Computer Performance Evaluation", "context": [{"text": " For example, Goel-Okumoto model [8], Yamada S-shaped [35], Musa-Okumoto model [19], Duane model [5], and Littlewood-Verrall model [17] can be cast as pure birth NHCTMC processes, whereas the Jelinski-Moranda model [13] can be cast as a pure death NHCTMC model.", "sec": "sec2a", "part": "1"}], "order": "13", "id": "ref13", "text": "Z. Jelinski, P. B. Moranda, \"Statistical Computer Performance Evaluation\" in Software Reliability Research, pp. 465-484, 1972, Academic Press.", "refType": "biblio"}, {"title": "Infinite-failures models for a finite world: a simulation\nstudy of fault discovery", "context": [{"text": " [14] consider imperfect debugging in the context of infinite failures models using simulation.", "sec": "sec1", "part": "1"}], "order": "14", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Many software reliability growth models have been published since the 1970s. Each one has been justified on theoretical or empirical evidence. A particularly interesting way of classifying these models is based on whether the asymptotic (time approaches infinity) mean number of total failures is infinite or finite. Theoretical and, especially, empirical justification for the appropriateness of infinite-failure models came after justification of finite-failure models. Infinite-failure models were...", "documentLink": "/document/370231", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=370231", "pdfSize": "651KB"}, "id": "ref14", "text": "W. Jones, D. Gregory, \"Infinite-failures models for a finite world: a simulation\nstudy of fault discovery\", <em>IEEE Trans. on Reliability</em>, vol. 43, no. 2, pp. 520-526, 1994.", "refType": "biblio"}, {"title": "Birth and death bug counting", "context": [{"text": " Levendel [16], and Kremer [15] develop a birth-death model which takes into consideration debugging time.", "sec": "sec1", "part": "1"}, {"text": " Imperfect debugging has also been considered by other researchers [8], [12], [15], [16].", "sec": "sec1", "part": "1"}, {"text": " The debugging process discussed by Kremer [15], Levendel [16], and Dalal [3] is of this type.", "sec": "sec3a", "part": "1"}, {"text": " Thus \\$p+q+r=1\\$ [15].", "sec": "sec3b", "part": "1"}, {"text": " The expected number of faults remaining in the system for different values of \\$p\\$, \\$q\\$, and \\$r\\$ [15] simulated using the simulation procedure in Fig. 8 is shown in Fig. 15.", "sec": "sec6b2", "part": "1"}], "order": "15", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Many software reliability time-domain bug-counting models are, as fault counters, special cases of the stochastic process known as the death process. Generalization to a nonhomogeneous birth-death process achieves three ends: stochastic fault introduction, the synthesis of a time-dependent failure rate with imperfect debugging and fault introduction, and the mathematical unification of much bug-counting theory. Often, the price for generalization is mathematical intractability. Yet useful and tr...", "documentLink": "/document/5221472", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5221472", "pdfSize": "1829KB"}, "id": "ref15", "text": "W. Kremer, \"Birth and death bug counting\", <em>IEEE Trans. on Reliability</em>, vol. R-32, no. 1, pp. 37-47, April 1983.", "refType": "biblio"}, {"title": "Reliability analysis of large software systems:\nDefect data modeling", "context": [{"text": " In addition, as suggested by [2], [16], most of the faults encountered by customers are ones reintroduced during debugging of the faults detected during testing.", "sec": "sec1", "part": "1"}, {"text": " Levendel [16], and Kremer [15] develop a birth-death model which takes into consideration debugging time.", "sec": "sec1", "part": "1"}, {"text": " Imperfect debugging has also been considered by other researchers [8], [12], [15], [16].", "sec": "sec1", "part": "1"}, {"text": " The debugging process discussed by Kremer [15], Levendel [16], and Dalal [3] is of this type.", "sec": "sec3a", "part": "1"}], "order": "16", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The author analyzes and models the software development process, and presents field experience for large distributed systems. Defect removal is shown to be the bottleneck in achieving the appropriate quality level before system deployment in the field. The time to defect detection, the defect repair time and a factor reflecting the introduction of new defects due to imperfect defect repair are some of the constants in the laws governing defect removal. Test coverage is a measure of defect remova...", "documentLink": "/document/44378", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=44378", "pdfSize": "1080KB"}, "id": "ref16", "text": "L. Levendel, \"Reliability analysis of large software systems:\nDefect data modeling\", <em>IEEE Trans. on Software Engineering</em>, vol. 16, no. 2, pp. 141-152, February 1990.", "refType": "biblio"}, {"title": "A Bayesian reliability growth model for computer software", "context": [{"text": " For example, Goel-Okumoto model [8], Yamada S-shaped [35], Musa-Okumoto model [19], Duane model [5], and Littlewood-Verrall model [17] can be cast as pure birth NHCTMC processes, whereas the Jelinski-Moranda model [13] can be cast as a pure death NHCTMC model.", "sec": "sec2a", "part": "1"}], "order": "17", "links": {"crossRefLink": "http://dx.doi.org/10.2307/2346781", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref17", "text": "B. Littlewood, \"A Bayesian reliability growth model for computer software\", <em>Journal of Royal Statistical Society</em>, vol. 22, no. 3, pp. 332-346, 1973.", "refType": "biblio"}, {"title": "CASRE-A computer-aided software reliability estimation tool", "context": [{"text": " The parameters of the rate function of the Goel-Okumoto model for NTDS data [8] were estimated using CASRE [18].", "sec": "sec6b", "part": "1"}], "order": "18", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The construction of a computer-aided software engineering (CASE) tool for a systematic and automatic application of software reliability modeling for real-world projects is described. Emphasis is placed on the practical project applications of existing software reliability models for better software reliability estimations. This CASE tool is built on top of existing software reliability models, called component models, as the baseline for software reliability measurement. The main advantage of t...", "documentLink": "/document/200165", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=200165", "pdfSize": "880KB"}, "id": "ref18", "text": "M. R. Lyu, A. P. Nikora, \"CASRE-A computer-aided software reliability estimation tool\", <em>CASE '92 Proceedings</em>, pp. 264-275, 1992-July.", "refType": "biblio"}, {"title": "A theory of software reliability and its\napplication", "context": [{"text": " For example, Goel-Okumoto model [8], Yamada S-shaped [35], Musa-Okumoto model [19], Duane model [5], and Littlewood-Verrall model [17] can be cast as pure birth NHCTMC processes, whereas the Jelinski-Moranda model [13] can be cast as a pure death NHCTMC model.", "sec": "sec2a", "part": "1"}], "order": "19", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper investigates the validity of the execution-time theory of software reliability. The theory is outlined, along with appropriate background, definitions, assumptions, and mathematical relationships. Both the execution time and calendar time components are described. The important assumptions are discussed. Actual data are used to test the validity of most of the assumptions. Model and actual behavior are compared. The development projects and operational computation center software from...", "documentLink": "/document/5220561", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5220561", "pdfSize": "2168KB"}, "id": "ref19", "text": "J. D. Musa, \"A theory of software reliability and its\napplication\", <em>IEEE Trans. on Software Engineering</em>, vol. SE-1, no. 1, pp. 312-327, September 1975.", "refType": "biblio"}, {"title": "Operational profiles in software-reliability\nengineering", "context": [{"text": " The estimates of failure rate & the reliability obtained using this approach are valid only if testing is conducted according to the operational profile of the application [20].", "sec": "sec4", "part": "1"}], "order": "20", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A systematic approach to organizing the process of determining the operational profile for guiding software development is presented. The operational profile is a quantitative characterization of how a system will be used that shows how to increase productivity and reliability and speed development by allocating development resources to function on the basis of use. Using an operational profile to guide testing ensures that if testing is terminated and the software is shipped because of schedule...", "documentLink": "/document/199724", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=199724", "pdfSize": "2140KB"}, "id": "ref20", "text": "J. D. Musa, \"Operational profiles in software-reliability\nengineering\", <em>IEEE Software</em>, vol. 10, no. 2, pp. 14-32, March 1993.", "refType": "biblio"}, {"title": "Software ReliabilityMeasurement, Prediction, Application", "context": [{"text": "Software reliability is defined as the probability of failure-free software22The terms software, software application, application, system, and software system are used interchangeably in this paper. operation for a specified period of time in a specified environment [21].", "sec": "sec1", "part": "1"}], "order": "21", "id": "ref21", "text": "J. D. Musa, A. Iannino, K. Okumoto, Software ReliabilityMeasurement Prediction Application, 1987, McGraw Hill.", "refType": "biblio"}, {"title": "A software cost model with warranty and risk costs", "context": [{"text": "The stopping rule problem has been addressed by several researchers in the literature [3], [6], [22], [28], [35].", "sec": "sec5", "part": "1"}], "order": "22", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, a cost model with warranty cost, time to remove each error detected in the software system, and risk cost due to software failure is developed. A software reliability model based on non-homogeneous Poisson process is used. The optimal release policies to minimize the expected total software cost are discussed. A software tool is also developed using Excel and Visual Basic to facilitate the task of determining the optimal software release time. Numerical examples are provided to il...", "documentLink": "/document/743412", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=743412", "pdfSize": "64KB"}, "id": "ref22", "text": "H. Pham, X. Zhang, \"A software cost model with warranty and risk costs\", <em>IEEE Trans. on Computers</em>, vol. 48, no. 1, pp. 71-75, January 1999.", "refType": "biblio"}, {"title": "Fault correction profiles", "context": [{"text": " In practice, however, the time taken to debug a fault is finite, and this debugging time has a direct impact on the residual number of faults, and hence the reliability of the software application [4], [23], [33].", "sec": "sec1", "part": "1"}], "order": "23", "id": "ref23", "text": "N. F. Scheidewind, \"Fault correction profiles\", <em>Proc. of Intl. Symposium on Software Reliability Engineering</em>, pp. 257-267, 2003-November.", "refType": "biblio"}, {"title": "Assessing reliability risk using fault correction profiles", "context": [{"text": " Schneidewind [24], [26], [27] incorporates a constant debugging rate into the Schneidewind software reliability model [25].", "sec": "sec1", "part": "1"}], "order": "24", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Building on the concept of the fault correction profile - a set of functions that predict fault correction events as a function of failure detection events - introduced in previous research, we define and apply reliability risk metrics that are derived from the fault correction profile. These metrics assess the threat to reliability of an unstable fault correction process. The fault correction profile identifies the need for process improvements and provides information for developing fault corr...", "documentLink": "/document/1281738", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1281738", "pdfSize": "263KB"}, "id": "ref24", "text": "N. Schneidewind, \"Assessing reliability risk using fault correction profiles\", <em>Proc. of Eighth Intl. Symposium on High Assurance Systems Engineering (HASE 04)</em>, pp. 139-148, 2004.", "refType": "biblio"}, {"title": "Software reliability model with optimal\nselection of failure data", "context": [{"text": " Schneidewind [24], [26], [27] incorporates a constant debugging rate into the Schneidewind software reliability model [25].", "sec": "sec1", "part": "1"}], "order": "25", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The possibility of obtaining more accurate predictions of future failures by excluding or giving lower weight to the earlier failure counts is suggested. Although data aging techniques such as moving average and exponential smoothing are frequently used in other fields, such as inventory control, the author did not find use of data aging in the various models surveyed. A model that includes the concept of selecting a subset of the failure data is the Schneidewind nonhomogeneous Poisson process (...", "documentLink": "/document/256856", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=256856", "pdfSize": "761KB"}, "id": "ref25", "text": "N. F. Schneidewind, \"Software reliability model with optimal\nselection of failure data\", <em>IEEE Trans. on Software Engineering</em>, vol. 19, no. 11, pp. 1095-1014, November 1993.", "refType": "biblio"}, {"title": "Modeling the fault correction process", "context": [{"text": " Schneidewind [24], [26], [27] incorporates a constant debugging rate into the Schneidewind software reliability model [25].", "sec": "sec1", "part": "1"}], "order": "26", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In general, software reliability models have focused on modeling and predicting failure occurrence and have not given equal priority to modeling the fault correction process. However, there is a need for fault correction prediction, because there are important applications that fault correction modeling and prediction support. These are the following: predicting whether reliability goals have been achieved, developing stopping rules for testing, formulating test strategies, and rationally alloca...", "documentLink": "/document/989472", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=989472", "pdfSize": "548KB"}, "id": "ref26", "text": "N. F. Schneidewind, \"Modeling the fault correction process\", <em>Proc. of Intl. Symposium on Software Reliability Engineering</em>, pp. 185-191, 2001-November.", "refType": "biblio"}, {"title": "An integrated failure detection and fault\ncorrection model", "context": [{"text": " Schneidewind [24], [26], [27] incorporates a constant debugging rate into the Schneidewind software reliability model [25].", "sec": "sec1", "part": "1"}], "order": "27", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In general, software reliability models have focused an modeling and predicting failure occurrence and have not given equal priority to modeling the fault correction process. However, there is a need for fault correction prediction, because there are important applications that fault correction modeling and prediction support. These are the following: predicting whether reliability goals have been achieved, developing stopping rules for testing, formulating test strategies, and rationally alloca...", "documentLink": "/document/1167772", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1167772", "pdfSize": "225KB"}, "id": "ref27", "text": "N. F. Schneidewind, \"An integrated failure detection and fault\ncorrection model\", <em>Proc. of Intl. Conference on Software Maintenance</em>, pp. 238-241, 2002-December.", "refType": "biblio"}, {"title": "Determining an optimal time interval for\ntesting and debugging software", "context": [{"text": "The stopping rule problem has been addressed by several researchers in the literature [3], [6], [22], [28], [35].", "sec": "sec5", "part": "1"}], "order": "28", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A decision-theoretic procedure for determining an optimal time interval for testing software prior to its release is proposed. The approach is based on the principles of decision-making under uncertainty and involves a maximization of expected utility. Two plausible forms for the utility function, one based on costs and the other involving the realized reliability of the software, are described. Using previous results on probabilistic models for software failure, the ensuing optimization problem...", "documentLink": "/document/90431", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=90431", "pdfSize": "488KB"}, "id": "ref28", "text": "N. D. Singpurwalla, \"Determining an optimal time interval for\ntesting and debugging software\", <em>IEEE Trans. on Software Engineering</em>, vol. 17, no. 4, pp. 313-319, April 1991.", "refType": "biblio"}, {"title": "A stochastic model of human errors in software development:\nimpact of repair times", "context": [{"text": " Smidts [29], [30] incorporate debugging time into a software reliability model that considers human errors.", "sec": "sec1", "part": "1"}], "order": "29", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Most existing software reliability models estimate the failure intensity function during dynamic testing. While these models are useful engineering tools, they can not be applied to earlier life-cycle phases where pay-off is maximum in terms of avoiding later failures. Few models have been developed to capture phenomena occurring early in the life cycle and their impact on reliability and much research effort is still needed in this area. Our previous research efforts have led to the development...", "documentLink": "/document/809314", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=809314", "pdfSize": "373KB"}, "id": "ref29", "text": "C. Smidts, \"A stochastic model of human errors in software development:\nimpact of repair times\", <em>Proc. of 10th Intl. Symposium on Software Reliability Engineering</em>, pp. 94-103, 1999-November.", "refType": "biblio"}, {"title": "A stochastic model of fault introduction\nand removal during software development", "context": [{"text": " Smidts [29], [30] incorporate debugging time into a software reliability model that considers human errors.", "sec": "sec1", "part": "1"}], "order": "30", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Two broad categories of human error occur during software development: (1) development errors made during requirements analysis, design, and coding activities; (2) debugging errors made during attempts to remove faults identified during software inspections and dynamic testing. This paper describes a stochastic model that relates the software failure intensity function to development and debugging error occurrence throughout all software life-cycle phases. Software failure intensity is related t...", "documentLink": "/document/963126", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=963126", "pdfSize": "198KB"}, "id": "ref30", "text": "M. A. Stutzke, C. S. Smidts, \"A stochastic model of fault introduction\nand removal during software development\", <em>IEEE Trans. on Reliability</em>, vol. 50, no. 2, pp. 184-193, June 2001.", "refType": "biblio"}, {"title": "Software Reliability Simulation", "context": [{"text": " These processes are also known as conditional event-rate processes [31].", "sec": "sec2b", "part": "1"}, {"text": " [31].", "sec": "sec2b", "part": "1"}], "order": "31", "id": "ref31", "text": "\"Software Reliability Simulation\" in Handbook of Software Reliability Engineering., pp. 661-698, 1996, McGraw-Hill.", "refType": "biblio"}, {"title": "Probability and Statistics with Reliability, Queuing and Computer Science Applications", "context": [{"text": " The cumulative distribution function \\$F_{1}(t)\\$, and the probability density function \\$f_{1}(t)\\$ of the time to occurrence of the first event are then given by [32]\nand\n.", "sec": "sec2b", "part": "1"}, {"text": "Expressions for occurrence times of further events are rarely analytically tractable [32].", "sec": "sec2b", "part": "1"}], "order": "32", "id": "ref32", "text": "K. S. Trivedi, Probability and Statistics with Reliability Queuing and Computer Science Applications, 1982, Prentice-Hall.", "refType": "biblio"}, {"title": "Software reliability growth models: assumptions vs. reality", "context": [{"text": " In practice, however, the time taken to debug a fault is finite, and this debugging time has a direct impact on the residual number of faults, and hence the reliability of the software application [4], [23], [33].", "sec": "sec1", "part": "1"}], "order": "33", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability growth models are often differentiated by assumptions regarding testing and defect repair. In this paper, these model assumptions are compared to Tandem's software development and test environment. The key differences between our environment and the standard model assumptions are that (1) the total number of defects can increase due to new code being introduced during system test, but the models normally assume a constant total number of defects, and (2) the defect-finding e...", "documentLink": "/document/630858", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=630858", "pdfSize": "653KB"}, "id": "ref33", "text": "A. Wood, \"Software reliability growth models: assumptions vs. reality\", <em>Proc. of Eighth Intl. Symposium on Software Reliability Engineering</em>, pp. 136-141, 1997-November.", "refType": "biblio"}, {"title": "Software-reliability growth with a Weibull test effort:\na model &amp; application", "context": [{"text": "The cost of testing activities, like running test cases & analysing data, the amount of man-power, and the CPU time spent by the time \\$t_{s}\\$, or equivalent \u201ctesting-effort\u201d [34], [36] is denoted by \\$C_{1}\\$.", "sec": "sec5", "part": "1"}], "order": "34", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability measurement during the testing phase is essential for examining the degree of quality or reliability of a developed software system. A software-reliability growth model incorporating the amount of test effort expended during the software testing phase is developed. The time-dependent behavior of test-effort expenditures is described by a Weibull curve. Assuming that the error detection rate to the amount of test effort spent during the testing phase is proportional to the cu...", "documentLink": "/document/210278", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=210278", "pdfSize": "607KB"}, "id": "ref34", "text": "S. Yamada, J. Hishitani, S. Osaki, \"Software-reliability growth with a Weibull test effort:\na model &amp; application\", <em>IEEE Trans. on Reliability</em>, vol. 42, no. 1, pp. 100-105, March 1993.", "refType": "biblio"}, {"title": "S-shaped reliability growth modeling for software error\ndetection", "context": [{"text": " For example, Goel-Okumoto model [8], Yamada S-shaped [35], Musa-Okumoto model [19], Duane model [5], and Littlewood-Verrall model [17] can be cast as pure birth NHCTMC processes, whereas the Jelinski-Moranda model [13] can be cast as a pure death NHCTMC model.", "sec": "sec2a", "part": "1"}, {"text": "The stopping rule problem has been addressed by several researchers in the literature [3], [6], [22], [28], [35].", "sec": "sec5", "part": "1"}, {"text": " The open MR profile is simulated using the rate function of the S-shaped model [35], while the closed MR profile is simulated using a time-dependent debugging rate.", "sec": "sec6a", "part": "1"}], "order": "35", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper investigates a stochastic model for a software error detection process in which the growth curve of the number of detected software errors for the observed data is S-shaped. The software error detection model is a nonhomogeneous Poisson process where the mean-value function has an S-shaped growth curve. The model is applied to actual software error data. Statistical inference on the unknown parameters is discussed. The model fits the observed data better than other models.", "documentLink": "/document/5221735", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5221735", "pdfSize": "807KB"}, "id": "ref35", "text": "S. Yamada, M. Ohba, S. Osaki, \"S-shaped reliability growth modeling for software error\ndetection\", <em>IEEE Trans. on Reliability</em>, vol. R-32, no. 5, pp. 475-485, December 1983.", "refType": "biblio"}, {"title": "Software reliability growth models with\ntesting-effort", "context": [{"text": "The cost of testing activities, like running test cases & analysing data, the amount of man-power, and the CPU time spent by the time \\$t_{s}\\$, or equivalent \u201ctesting-effort\u201d [34], [36] is denoted by \\$C_{1}\\$.", "sec": "sec5", "part": "1"}], "order": "36", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Many software reliability growth models have been proposed in the past decade. Those models tacitly assume that testing-effort expenditures are constant throughout software testing. This paper develops realistic software reliability growth models incorporating the effect of testing-effort. The software error detection phenomenon in software testing is modeled by a nonhomogeneous Poisson process. The software reliability assessment measures and the estimation methods of parameters are investigate...", "documentLink": "/document/4335332", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4335332", "pdfSize": "761KB"}, "id": "ref36", "text": "S. Yamada, H. Ohtera, H. Narihisa, \"Software reliability growth models with\ntesting-effort\", <em>IEEE Trans. on Reliability</em>, vol. R-35, no. 1, pp. 19-23, April 1986.", "refType": "biblio"}], "citations": {"paperCitations": {"nonIeee": [{"title": "Statistical Certification of Software Systems", "links": {"crossRefLink": "http://dx.doi.org/10.1080/03610910701790517", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Alessandro Di Bucchianico, Jan Friso Groote, Kees Van Hee, Ronald Kruidhof, \"Statistical Certification of Software Systems\", <em>Communications in Statistics - Simulation and Computation</em>, vol. 37, pp. 346, 2008, ISSN 0361-0918.", "order": "1"}, {"title": "Application of fuzzy time series in prediction of time between failures & faults in software reliability assessment", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s12543-011-0084-7", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "S. Chatterjee, S. Nigam, J. B. Singh, L. N. Upadhyaya, \"Application of fuzzy time series in prediction of time between failures & faults in software reliability assessment\", <em>Fuzzy Information and Engineering</em>, vol. 3, pp. 293, 2011, ISSN 1616-8658.", "order": "2"}, {"title": "Optimal software maintenance policy considering unavailable time", "links": {"crossRefLink": "http://dx.doi.org/10.1002/smr.467", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Cheng-Jie Xiong, Min Xie, Szu-Hui Ng, \"Optimal software maintenance policy considering unavailable time\", <em>Journal of Software Maintenance and Evolution Research and Practice</em>, pp. n/a, 2010, ISSN 15320618.", "order": "3"}, {"title": "A multiplicative model of software defect repair times", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s10664-009-9115-y", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Robert E. Mullen, Swapna S. Gokhale, \"A multiplicative model of software defect repair times\", <em>Empirical Software Engineering</em>, vol. 15, pp. 296, 2010, ISSN 15737616.", "order": "4"}, {"title": "Testing effort dependent software reliability model for imperfect debugging process considering both detection and correction", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.ress.2014.01.004", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "R. Peng, Y.F. Li, W.J. Zhang, Q.P. Hu, \"Testing effort dependent software reliability model for imperfect debugging process considering both detection and correction\", <em>Reliability Engineering & System Safety</em>, vol. 126, pp. 37, 2014, ISSN 09518320.", "order": "5"}, {"title": "Analyzing the effect of imperfect debugging on software fault detection and correction processes via a simulation framework", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.mcm.2011.07.033", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chu-Ti Lin, \"Analyzing the effect of imperfect debugging on software fault detection and correction processes via a simulation framework\", <em>Mathematical and Computer Modelling</em>, vol. 54, pp. 3046, 2011, ISSN 08957177.", "order": "6"}, {"title": "Software Reliability", "links": {"crossRefLink": "http://dx.doi.org/10.1002/9780470050118.ecse395", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Swapna S. Gokhale, \"Software Reliability\", pp. , 2009, ISBN 047005011X.", "order": "7"}, {"title": "A Detailed Study of NHPP Software Reliability Models (Invited Paper)", "links": {"crossRefLink": "http://dx.doi.org/10.4304/jsw.7.6.1296-1306", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Richard Lai, Mohit Garg, \"A Detailed Study of NHPP Software Reliability Models (Invited Paper)\", <em>Journal of Software</em>, vol. 7, pp. , 2012, ISSN 1796-217X.", "order": "8"}, {"title": "Sequential Bayesian technique: An alternative approach for software reliability estimation", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s12046-009-0010-4", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "S. Chatterjee, S. S. Alam, R. B. Misra, \"Sequential Bayesian technique: An alternative approach for software reliability estimation\", <em>Sadhana</em>, vol. 34, pp. 235, 2009, ISSN 09737677.", "order": "9"}, {"title": "A study of the modeling and analysis of software fault-detection and fault-correction processes", "links": {"crossRefLink": "http://dx.doi.org/10.1002/qre.827", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "M. Xie, Q. P. Hu, Y. P. Wu, S. H. Ng, \"A study of the modeling and analysis of software fault-detection and fault-correction processes\", <em>Quality and Reliability Engineering International</em>, vol. 23, pp. 459, 2007, ISSN 07488017.", "order": "10"}, {"title": "Modeling of Software Fault Detection and Correction Processes Based on the Correction Lag", "links": {"crossRefLink": "http://dx.doi.org/10.3923/itj.2009.735.742", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Yanjun Shu, Hongwei Liu, Zhibo Wu, Xiaozong Yang, \"Modeling of Software Fault Detection and Correction Processes Based on the Correction Lag\", <em>Information Technology Journal</em>, vol. 8, pp. 735, 2009, ISSN 18125638.", "order": "11"}, {"title": "Checkpointing for the RESTART problem in Markov networks", "links": {"crossRefLink": "http://dx.doi.org/10.1017/S0021900200099228", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Lester Lipsky, Derek Doran, Swapna Gokhale, \"Checkpointing for the RESTART problem in Markov networks\", <em>Journal of Applied Probability</em>, vol. 48, pp. 195, 2011, ISSN 0021-9002.", "order": "12"}, {"title": "A Study of When to Release a Software Product from the Perspective of Software Reliability Models", "links": {"crossRefLink": "http://dx.doi.org/10.4304/jsw.6.4.651-661", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Richard Lai, Mohit Garg, Parmod Kumar Kapur, Shaoying Liu, \"A Study of When to Release a Software Product from the Perspective of Software Reliability Models\", <em>Journal of Software</em>, vol. 6, pp. , 2011, ISSN 1796-217X.", "order": "13"}, {"title": "Transfer function modelling in software reliability", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s00607-010-0128-6", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "S. Chatterjee, S. Nigam, J. B. Singh, L. N. Upadhyaya, \"Transfer function modelling in software reliability\", <em>Computing</em>, vol. 92, pp. 33, 2011, ISSN 14365057.", "order": "14"}], "ieee": [{"title": "Parameter estimation for software reliability models considering failure correlation", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4925830", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4925830", "pdfSize": "340KB"}, "displayText": "Bo Yang, Suchang Guo, Ning Ning, Hong-Zhong Huang, \"Parameter estimation for software reliability models considering failure correlation\", <em>Reliability and Maintainability Symposium 2008. RAMS 2008. Annual</em>, pp. 405-410, 2008, ISSN 0149-144X.", "order": "1"}, {"title": "Modeling and Analysis of Software Fault Detection and Correction Process by Considering Time Dependency", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4378411", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4378411", "pdfSize": "697KB"}, "displayText": "Y. P. Wu, Q. P. Hu, M. Xie, S. H. Ng, \"Modeling and Analysis of Software Fault Detection and Correction Process by Considering Time Dependency\", <em>Reliability IEEE Transactions on</em>, vol. 56, pp. 629-642, 2007, ISSN 0018-9529.", "order": "2"}, {"title": "Pavlov's Bugs: Matching Repair Policies with Rewards", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5173038", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5173038", "pdfSize": "1378KB"}, "displayText": "Phillip A. Laplante, Norita Ahmad, \"Pavlov's Bugs: Matching Repair Policies with Rewards\", <em>IT Professional</em>, vol. 11, 2009, ISSN 1520-9202.", "order": "3"}, {"title": "Staffing Level and Cost Analyses for Software Debugging Activities Through Rate-Based Simulation Approaches", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4967914", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4967914", "pdfSize": "1758KB"}, "displayText": "Chu-Ti Lin, Chin-Yu Huang, \"Staffing Level and Cost Analyses for Software Debugging Activities Through Rate-Based Simulation Approaches\", <em>Reliability IEEE Transactions on</em>, vol. 58, pp. 711-724, 2009, ISSN 0018-9529.", "order": "4"}, {"title": "Software Reliability and Testing Time Allocation: An Architecture-Based Approach", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5383374", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5383374", "pdfSize": "2325KB"}, "displayText": "Roberto Pietrantuono, Stefano Russo, Kishor S. Trivedi, \"Software Reliability and Testing Time Allocation: An Architecture-Based Approach\", <em>Software Engineering IEEE Transactions on</em>, vol. 36, pp. 323-337, 2010, ISSN 0098-5589.", "order": "5"}, {"title": "Rate-Based Queueing Simulation Model of Open Source Software Debugging Activities", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6891380", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6891380", "pdfSize": "2547KB"}, "displayText": "Chu-Ti Lin, Yan-Fu Li, \"Rate-Based Queueing Simulation Model of Open Source Software Debugging Activities\", <em>Software Engineering IEEE Transactions on</em>, vol. 40, pp. 1075-1099, 2014, ISSN 0098-5589.", "order": "6"}, {"title": "An optimal software maintenance policy based on reliability and risk", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6889974", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6889974", "pdfSize": "2861KB"}, "displayText": "Wang Xiaoping, Zhou Fang, Shen Yi, \"An optimal software maintenance policy based on reliability and risk\", <em>Neural Networks (IJCNN) 2014 International Joint Conference on</em>, pp. 3043-3048, 2014, ISSN 2161-4407.", "order": "7"}, {"title": "Statistical Testing Based Software Reliability Estimation While Considering Other Knowledge about a Program", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5676849", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5676849", "pdfSize": "267KB"}, "displayText": "Jiong Yan, Chang-Hong Deng, Meng-Luo Ji, \"Statistical Testing Based Software Reliability Estimation While Considering Other Knowledge about a Program\", <em>Computational Intelligence and Software Engineering (CiSE) 2010 International Conference on</em>, pp. 1-4, 2010.", "order": "8"}, {"title": "Optimal Reliability Allocation for Modular Software Systems Basis on Support Vector Clustering and Fuzzy Decision", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5376258", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5376258", "pdfSize": "322KB"}, "displayText": "Yi Wan, Chengwen Wu, \"Optimal Reliability Allocation for Modular Software Systems Basis on Support Vector Clustering and Fuzzy Decision\", <em>Artificial Intelligence and Computational Intelligence 2009. AICI '09. International Conference on</em>, vol. 4, pp. 515-519, 2009.", "order": "9"}, {"title": "Testing Effort Dependent Software FDP and FCP Models with Consideration of Imperfect Debugging", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5502847", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5502847", "pdfSize": "422KB"}, "displayText": "R. Peng, Q.P. Hu, S.H. Ng, M. Xie, \"Testing Effort Dependent Software FDP and FCP Models with Consideration of Imperfect Debugging\", <em>Secure Software Integration and Reliability Improvement (SSIRI) 2010 Fourth International Conference on</em>, pp. 141-146, 2010.", "order": "10"}, {"title": "Quasi-Renewal Time-Delay Fault-Removal Consideration in Software Reliability Modeling", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4694128", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4694128", "pdfSize": "251KB"}, "displayText": "Seheon Hwang, Hoang Pham, \"Quasi-Renewal Time-Delay Fault-Removal Consideration in Software Reliability Modeling\", <em>Systems Man and Cybernetics Part A: Systems and Humans IEEE Transactions on</em>, vol. 39, pp. 200-209, 2009, ISSN 1083-4427.", "order": "11"}, {"title": "Fuzzy Synthesis-Decision Model of Software Optimum Design", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5303887", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5303887", "pdfSize": "224KB"}, "displayText": "Yi Wan, Lei Xiao, Chengwen Wu, \"Fuzzy Synthesis-Decision Model of Software Optimum Design\", <em>Image and Signal Processing 2009. CISP '09. 2nd International Congress on</em>, pp. 1-4, 2009.", "order": "12"}, {"title": "A study of unavailability of software systems", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4654549", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4654549", "pdfSize": "614KB"}, "displayText": "C. J. Xiong, S.H . Ng, \"A study of unavailability of software systems\", <em>Management of Innovation and Technology 2008. ICMIT 2008. 4th IEEE International Conference on</em>, pp. 1250-1254, 2008.", "order": "13"}]}, "patentCitationCount": "0", "contentType": "periodicals", "isEarlyAccess": false, "lastupdate": "2016-11-15T10:42:48", "publisher": "IEEE", "title": "Incorporating fault debugging activities into software reliability models: a simulation approach", "nonIeeeCitationCount": "14", "publicationNumber": "24", "formulaStrippedArticleTitle": "Incorporating fault debugging activities into software reliability models: a simulation approach", "mediaPath": "/mediastore/IEEE/content/media/24/34350/1638411", "mlTime": "PT0.195127S", "ieeeCitationCount": "13"}}