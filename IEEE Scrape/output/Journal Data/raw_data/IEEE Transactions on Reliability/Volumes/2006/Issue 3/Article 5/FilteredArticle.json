{"arnumber": "1688079", "details": {"title": "Software Reliability Analysis by Considering Fault Dependency and Debugging Time Lag", "volume": "55", "keywords": [{"type": "IEEE Keywords", "kwd": ["Software reliability", "Debugging", "Fault detection", "Software testing", "Life testing", "Delay effects", "Cost function", "Maximum likelihood estimation", "Least squares approximation", "Mathematical model"]}, {"type": "INSPEC: Controlled Indexing", "kwd": ["system recovery", "program debugging", "program testing", "software fault tolerance"]}, {"type": "INSPEC: Non-Controlled Indexing", "kwd": ["fault correction process", "software reliability analysis", "fault dependency", "time lag debugging", "fault detection process", "mathematical model", "software testing"]}, {"type": "Author Keywords ", "kwd": ["software testing", "Fault correction", "fault detection", "non-homogeneous Poisson processes", "software reliability growth models"]}], "issue": "3", "link": "http://ieeexplore.ieee.org/servlet/opac?punumber=24", "authors": [{"affiliation": "Dept. of Comput. Sci., Nat. Tsing Hua Univ., Hsinchu", "bio": {"p": ["Chin-Yu Huang is currently an Assistant Professor in the Department of Computer Science at National Tsing Hua University, Hsinchu, Taiwan. He received the MS (1994), and the Ph.D. (2000) in Electrical Engineering from National Taiwan University, Taipei. He was with the Bank of Taiwan from 1994 to 1999, and was a senior software engineer at Taiwan Semiconductor Manufacturing Company from 1999 to 2000. Before joining NTHU in 2003, he was a division chief of the Central Bank of China, Taipei. His research interests are software reliability engineering, software testing, software metrics, software testability, fault tree analysis, and system safety assessment. He is a member of IEEE."]}, "name": "C.-Y. Huang"}, {"bio": {"p": ["Chu-Ti Lin received the B.S. (2003) in Computer Science from National Tsing Hua University (NTHU), Hsinchu, Taiwan. Currently he is a Ph.D. student at NTHU. He has several papers published in international conference proceedings. His research interests include software reliability, software process improvement, and Internet applications."]}, "name": "C.-T. Lin"}], "publisher": "IEEE", "doi": "10.1109/TR.2006.879607", "abstract": "Over the past 30 years, many software reliability growth models (SRGM) have been proposed. Often, it is assumed that detected faults are immediately corrected when mathematical models are developed. This assumption may not be realistic in practice because the time to remove a detected fault depends on the complexity of the fault, the skill and experience of personnel, the size of debugging team, the technique(s) being used, and so on. During software testing, practical experiences show that mutually independent faults can be directly detected and removed, but mutually dependent faults can be removed iff the leading faults have been removed. That is, dependent faults may not be immediately removed, and the fault removal process lags behind the fault detection process. In this paper, we will first give a review of fault detection &amp; correction processes in software reliability modeling. We will then illustrate the fact that detected faults cannot be immediately corrected with several examples. We also discuss the software fault dependency in detail, and study how to incorporate both fault dependency and debugging time lag into software reliability modeling. The proposed models are fairly general models that cover a variety of known SRGM under different conditions. Numerical examples are presented, and the results show that the proposed framework to incorporate both fault dependency and debugging time lag for SRGM has a better prediction capability. In addition, an optimal software release policy for the proposed models, based on cost-reliability criterion, is proposed. The main purpose is to minimize the cost of software development when a desired reliability objective is given"}, "references": [{"title": "Recommended Practice for Software Reliability", "context": [{"text": " Software reliability is often defined as the probability of failure-free software operation for a specified period of time in a specified environment [1].", "sec": "sec1", "part": "1"}], "order": "1", "id": "ref1", "text": "<em>Recommended Practice for Software Reliability</em>, February 1993.", "refType": "biblio"}, {"title": "Handbook of Software Reliability Engineering", "context": [{"text": " Over the past 30 years, many software reliability growth models (SRGM) have been proposed for estimation of reliability growth of products during software development processes [2]\u2013[5].", "sec": "sec1", "part": "1"}, {"text": " There are many software failure data sets published in the literature [2], [19], [22].", "sec": "sec2b", "part": "1"}, {"text": " In general, failure data are usually collected in two ways: Failure Count (FC) data, and Time-Between-Failures (TBF) data [2], [19], [23].", "sec": "sec2b", "part": "1"}, {"text": "From our studies [2], [5], [11], [12], [23], most software reliability models have some assumptions concerning the fault detection process:\n\n1)\nThe fault removal process follows the non-homogeneous Poisson process (NHPP).\n\n2)\nThe software system is subject to failures at random times caused by the manifestation of remaining faults in the system.\n\n3)\nThe mean number of faults detected in the time interval \\$(t, T+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system, and the proportionality is a constant.\n\n4)\nThe failure rate of each detectable fault is identical.\n\n5)\nEach time a failure occurs, the fault that caused it is immediately & perfectly removed.", "sec": "sec3a", "part": "1"}, {"text": " This model, first proposed by Goel & Okumoto [2], [23], is one of the most popular NHPP models in the field of software reliability engineering.", "sec": "sec3a", "part": "1"}, {"text": " This model is a modification of the NHPP to obtain an S-shaped curve for the cumulative number of faults detected such that the failure rate initially increases, and later decays [2], [23].", "sec": "sec3a", "part": "1"}, {"text": " This model was proposed by Ohba, and its underlying concept is that the observed software reliability growth becomes S-shaped if faults in a program are mutually dependent [2], [22], [23].", "sec": "sec3a", "part": "1"}, {"text": " The Kolmogorov-Distance (KD) is defined as [2], [31]\u2013[33]:where \\$k\\$ is sample size, \\$F^{\\ast}(x)\\$ is the normalized observed cumulative distribution at the \\$x\\$-th time point, and \\$F(x)\\$ is the expected cumulative distribution at the \\$x\\$-th time point, based on the model.", "sec": "sec4b", "part": "1"}, {"text": "We also use the Akaike Information Criterion (AIC) [2], [10] to compare the performance of SRGM.", "sec": "sec4b", "part": "1"}, {"text": "Firstly, we estimate the parameters of (21), (27), and other selected SRGM by using the methods of Maximum Likelihood Estimation (MLE), and Least Squares Estimation (LSE) [2], [23], [32], [33].", "sec": "sec4c1", "part": "1"}, {"text": " On the other hand, the fault detection rate is used to measure the effectiveness of fault detection by test techniques, and test cases [2], [23], [30].", "sec": "sec4c3", "part": "1"}, {"text": " In recent years, the problem of optimal software release time has been analysed & discussed in many papers [2], [5], [23], [34], [38]\u2013[40].", "sec": "sec5", "part": "1"}, {"text": "In addition, software reliability can be defined as [2], [5], [23] Equation (38) represents the probability that a software failure doesn't occur in time interval \\$(T, T+{\\mit\\Delta} T]\\$.", "sec": "sec5a", "part": "1"}], "order": "2", "id": "ref2", "text": "M. R. Lyu, Handbook of Software Reliability Engineering, 1996, McGraw Hill.", "refType": "biblio"}, {"title": "A unified scheme of some non-homogenous\nPoisson process models for software reliability estimation", "context": [{"text": " Over the past 30 years, many software reliability growth models (SRGM) have been proposed for estimation of reliability growth of products during software development processes [2]\u2013[3][5].", "sec": "sec1", "part": "1"}, {"text": "The proofs are omitted because they are quite straightforward [3], [11], [15], [18].", "sec": "sec3a", "part": "1"}, {"text": " [3], [23] proposed a software reliability growth model incorporating the amount of testing-effort expended during the software testing phase.", "sec": "sec3a", "part": "1"}], "order": "3", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, we describe how several existing software reliability growth models based on Nonhomogeneous Poisson processes (NHPPs) can be comprehensively derived by applying the concept of weighted arithmetic, weighted geometric, or weighted harmonic mean. Furthermore, based on these three weighted means, we thus propose a more general NHPP model from the quasi arithmetic viewpoint. In addition to the above three means, we formulate a more general transformation that includes a parametric fami...", "documentLink": "/document/1183936", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1183936", "pdfSize": "310KB"}, "id": "ref3", "text": "C. Y. Huang, M. R. Lyu, S. Y. Kuo, \"A unified scheme of some non-homogenous\nPoisson process models for software reliability estimation\", <em>IEEE Trans. on Software Engineering</em>, vol. 29, no. 3, pp. 261-269, March 2003.", "refType": "biblio"}, {"title": "Optimal Testing Resource Allocation and\nSensitivity Analysis in Software Development", "context": [{"text": " Over the past 30 years, many software reliability growth models (SRGM) have been proposed for estimation of reliability growth of products during software development processes [2]\u2013[4][5].", "sec": "sec1", "part": "1"}], "order": "4", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "We consider two kinds of software testing-resource allocation problems. The first problem is to minimize the number of remaining faults given a fixed amount of testing-effort, and a reliability objective. The second problem is to minimize the amount of testing-effort given the number of remaining faults, and a reliability objective. We have proposed several strategies for module testing to help software project managers solve these problems, and make the best decisions. We provide several system...", "documentLink": "/document/1546566", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1546566", "pdfSize": "602KB"}, "id": "ref4", "text": "C. Y. Huang, M. R. Lyu, \"Optimal Testing Resource Allocation and\nSensitivity Analysis in Software Development\", <em>IEEE Transactions on Reliability</em>, vol. 54, no. 4, pp. 592-603, Dec. 2005.", "refType": "biblio"}, {"title": "Software Reliability", "context": [{"text": " Over the past 30 years, many software reliability growth models (SRGM) have been proposed for estimation of reliability growth of products during software development processes [2]\u2013[5].", "sec": "sec1", "part": "1"}, {"text": "From our studies [2], [5], [11], [12], [23], most software reliability models have some assumptions concerning the fault detection process:\n\n1)\nThe fault removal process follows the non-homogeneous Poisson process (NHPP).\n\n2)\nThe software system is subject to failures at random times caused by the manifestation of remaining faults in the system.\n\n3)\nThe mean number of faults detected in the time interval \\$(t, T+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system, and the proportionality is a constant.\n\n4)\nThe failure rate of each detectable fault is identical.\n\n5)\nEach time a failure occurs, the fault that caused it is immediately & perfectly removed.", "sec": "sec3a", "part": "1"}, {"text": " The MSE is defined as [5], [30]-[31]:where \\$m_{i}\\$ is the observed number of faults by time \\$t_{i}\\$.", "sec": "sec4b", "part": "1"}, {"text": " In recent years, the problem of optimal software release time has been analysed & discussed in many papers [2], [5], [23], [34], [38]\u2013[40].", "sec": "sec5", "part": "1"}, {"text": "In addition, software reliability can be defined as [2], [5], [23] Equation (38) represents the probability that a software failure doesn't occur in time interval \\$(T, T+{\\mit\\Delta} T]\\$.", "sec": "sec5a", "part": "1"}, {"text": " Thus, the cost function can be described by [5], [23], [34], [38], [39] From the work by Boehm [43], we know that \\$C_{2}>C_{1}\\$ as \\$C_{2}\\$ is usually an order of magnitude greater than \\$C_{1}\\$.", "sec": "sec5b", "part": "1"}], "order": "5", "id": "ref5", "text": "H. Pham, Software Reliability, 2000, Springer-Verlag.", "refType": "biblio"}, {"title": "Modeling and analysis of correlated software failures of\nmultiple types", "context": [{"text": " In some cases, fault correction is not performed immediately once a failure is detected [6].", "sec": "sec2a", "part": "1"}, {"text": " [6], and Go\u0161eva-Popstojanova et al. [13] thought that the dependencies exist between the occurrences of failures.", "sec": "sec2b", "part": "1"}], "order": "6", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Most software reliability models assume independence of successive software runs. It is a strict assumption, and usually not valid in reality. Goseva-Popstojanova & Trivedi (2000) presented an interesting study on failure correlation among successive software runs. In this paper, by extending their results, a software reliability model is developed based on a Markov renewal process for the modeling of the dependence among successive software runs, where more than one type of failure is allowed i...", "documentLink": "/document/1402688", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1402688", "pdfSize": "197KB"}, "id": "ref6", "text": "Y. S. Dai, M. Xie, K. L. Poh, \"Modeling and analysis of correlated software failures of\nmultiple types\", <em>IEEE Trans. on Reliability</em>, vol. 54, no. 1, pp. 100-106, March 2005.", "refType": "biblio"}, {"title": "An integrated failure detection and fault correction model", "context": [{"text": " Schneidewind [7] reported that the software developers of the space shuttle might postpone fault correction in cases where the failures were classified as non-critical on the current release, and were not considered critical for one to three releases in the future.", "sec": "sec2a", "part": "1"}, {"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[18].", "sec": "sec2a", "part": "1"}, {"text": " For instance, Schneidewind [7] proposed an approach for modeling the fault correction process by using a constant delayed fault-detection process.", "sec": "sec2a", "part": "1"}], "order": "7", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In general, software reliability models have focused an modeling and predicting failure occurrence and have not given equal priority to modeling the fault correction process. However, there is a need for fault correction prediction, because there are important applications that fault correction modeling and prediction support. These are the following: predicting whether reliability goals have been achieved, developing stopping rules for testing, formulating test strategies, and rationally alloca...", "documentLink": "/document/1167772", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1167772", "pdfSize": "225KB"}, "id": "ref7", "text": "N. F. Schneidewind, \"An integrated failure detection and fault correction model\", <em>Proceedings of 18th International Conference on Software Maintenance (ICSM 2002)</em>, pp. 238-241, 2002-Oct.", "refType": "biblio"}, {"title": "The\nSchneidewind software reliability model revisited", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[8][18].", "sec": "sec2a", "part": "1"}, {"text": " Later, Xie & Zhao [8], [12] pointed out that this assumption was too restrictive.", "sec": "sec2a", "part": "1"}], "order": "8", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A software reliability model based on a nonhomogeneous Poisson process (NHPP) was proposed by N.F. Schneidewind (Sigplan Notices, vol.10, p.337, 1975). Since then, many other NHPP models have been suggested and studied by various authors. The authors show that several NHPP models can be derived based on the general assumptions made by Schneidewind. Also, they note that in the original paper, there are several interesting approaches worth further consideration. To mention a few, Schneidewind mode...", "documentLink": "/document/285846", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=285846", "pdfSize": "634KB"}, "id": "ref8", "text": "M. Xie, M. Zhao, \"The\nSchneidewind software reliability model revisited\", <em>Proceedings of the 3rd IEEE International Symposium on Software Reliability Engineering (ISSRE'92)</em>, pp. 184-192, 1992-Oct.", "refType": "biblio"}, {"title": "Optimal software release policies\nwith debugging time lag", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[9][18].", "sec": "sec2a", "part": "1"}], "order": "9", "links": {"crossRefLink": "http://dx.doi.org/10.1142/S0218539397000175", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref9", "text": "T. Dohi, N. Kaio, S. Osaki, \"Optimal software release policies\nwith debugging time lag\", <em>International Journal of Reliability Quality and Safety Engineering</em>, vol. 4, no. 3, pp. 241-255, 1997.", "refType": "biblio"}, {"title": "Considering\nfault removal efficiency in software reliability assessment", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[10][18].", "sec": "sec2a", "part": "1"}, {"text": "We also use the Akaike Information Criterion (AIC) [2], [10] to compare the performance of SRGM.", "sec": "sec4b", "part": "1"}], "order": "10", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability growth models (SRGMs) have been developed to estimate software reliability measures such as the number of remaining faults, software failure rate, and software reliability. Issues such as imperfect debugging and the learning phenomenon of developers have been considered in these models. However, most SRGMs assume that faults detected during tests will eventually be removed. Consideration of fault removal efficiency in the existing models is limited. In practice, fault remova...", "documentLink": "/document/1206460", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1206460", "pdfSize": "654KB"}, "id": "ref10", "text": "X. Zhang, X. Teng, H. Pham, \"Considering\nfault removal efficiency in software reliability assessment\", <em>IEEE Trans. on Systems Man and CyberneticsPart A: Systems and Humans</em>, vol. 33, no. 1, pp. 114-120, Jan. 2003.", "refType": "biblio"}, {"title": "Software reliability growth models incorporating fault dependency\nwith various debugging time lags", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[11][18].", "sec": "sec2a", "part": "1"}, {"text": "From our studies [2], [5], [11], [12], [23], most software reliability models have some assumptions concerning the fault detection process:\n\n1)\nThe fault removal process follows the non-homogeneous Poisson process (NHPP).\n\n2)\nThe software system is subject to failures at random times caused by the manifestation of remaining faults in the system.\n\n3)\nThe mean number of faults detected in the time interval \\$(t, T+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system, and the proportionality is a constant.\n\n4)\nThe failure rate of each detectable fault is identical.\n\n5)\nEach time a failure occurs, the fault that caused it is immediately & perfectly removed.", "sec": "sec3a", "part": "1"}, {"text": " From our past studies [11], [15], [18], some existing SRGM can be reinterpreted as the delayed fault detection models.", "sec": "sec3a", "part": "1"}, {"text": "The proofs are omitted because they are quite straightforward [3], [11], [15], [18].", "sec": "sec3a", "part": "1"}, {"text": "An SRGM is based on the following assumptions [11], [15], [24]:\n\n6)\nThe fault detection process follows the NHPP.\n\n7)\nThe software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n\n8)\nAll detected faults can be categorized as either leading faults, or dependent faults.", "sec": "sec3b", "part": "1"}], "order": "11", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability is defined as the probability of failure-free software operation for a specified period of time in a specified environment. Over the past 30 years, many software reliability growth models (SRGMs) have been proposed and most SRGMs assume that detected faults are immediately corrected. Actually, this assumption may not be realistic in practice. In this paper we first give a review of fault detection and correction processes in software reliability modeling. Furthermore, we sho...", "documentLink": "/document/1342826", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1342826", "pdfSize": "288KB"}, "id": "ref11", "text": "C. Y. Huang, C. T. Lin, S. Y. Kuo, M. R. Lyu, C. C. Sue, \"Software reliability growth models incorporating fault dependency\nwith various debugging time lags\", <em>Proceedings of the 28th Annual International Computer Software and Applications Conference (COMPSAC 2004)</em>, pp. 186-191, 2004-Sept.", "refType": "biblio"}, {"title": "Application and Improvement of Software Reliability Models", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[12][18].", "sec": "sec2a", "part": "1"}, {"text": " However, if this assumption is not met in practice, the model will underestimate the remaining faults in the code [12].", "sec": "sec2a", "part": "1"}, {"text": " Later, Xie & Zhao [8], [12] pointed out that this assumption was too restrictive.", "sec": "sec2a", "part": "1"}, {"text": " That is, they suggested modeling the delay as an increasing function of test time [12].", "sec": "sec2a", "part": "1"}, {"text": "Musa [12], [19] reported a failure data set of System T1 that was collected during in-house testing.", "sec": "sec2a", "part": "1"}, {"text": "From our studies [2], [5], [11], [12], [23], most software reliability models have some assumptions concerning the fault detection process:\n\n1)\nThe fault removal process follows the non-homogeneous Poisson process (NHPP).\n\n2)\nThe software system is subject to failures at random times caused by the manifestation of remaining faults in the system.\n\n3)\nThe mean number of faults detected in the time interval \\$(t, T+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system, and the proportionality is a constant.\n\n4)\nThe failure rate of each detectable fault is identical.\n\n5)\nEach time a failure occurs, the fault that caused it is immediately & perfectly removed.", "sec": "sec3a", "part": "1"}], "order": "12", "id": "ref12", "text": "D. Wallace, C. Coleman, <em>Application and Improvement of Software Reliability Models</em>, Oct. 2001.", "refType": "biblio"}, {"title": "Failure correlation in software\nreliability models", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[13][18].", "sec": "sec2a", "part": "1"}, {"text": " [13] thought that the dependencies exist between the occurrences of failures.", "sec": "sec2b", "part": "1"}], "order": "13", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Perhaps the most stringent restriction in most software reliability models is the assumption of statistical independence among successive software failures. The authors research was motivated by the fact that although there are practical situations in which this assumption could be easily violated, much of the published literature on software reliability modeling does not seriously address this issue. The research work in this paper is devoted to developing the software reliability modeling fram...", "documentLink": "/document/855535", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=855535", "pdfSize": "171KB"}, "id": "ref13", "text": "K. Goeva-Popstojanova, K. S. Trivedi, \"Failure correlation in software\nreliability models\", <em>IEEE Trans. Reliability</em>, vol. 49, no. 1, pp. 37-48, March 2000.", "refType": "biblio"}, {"title": "Modeling Correlation in Software Recovery\nBlocks", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[14][18].", "sec": "sec2a", "part": "1"}], "order": "14", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The authors examine the problem of accurately modeling the software fault-tolerance technique based on recovery blocks. Analysis of some systems have investigated the correlation between software modules, which may be due to a portion of the functional specification that is common to all software modules, or to the inherent hardness of some problems. Three types of dependence which can be captured using measurements are considered. These are correlation between software modules for a single inpu...", "documentLink": "/document/256854", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=256854", "pdfSize": "1512KB"}, "id": "ref14", "text": "L. A. Tomek, J. K. Muppala, K. S. Trivedi, \"Modeling Correlation in Software Recovery\nBlocks\", <em>IEEE Trans. Software Engineering</em>, vol. 19, pp. 1071-1086, Nov. 1993.", "refType": "biblio"}, {"title": "Effect of fault dependency and debugging time lag on software\nerror models", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[15][18].", "sec": "sec2a", "part": "1"}, {"text": " From our past studies [11], [15], [18], some existing SRGM can be reinterpreted as the delayed fault detection models.", "sec": "sec3a", "part": "1"}, {"text": "The proofs are omitted because they are quite straightforward [3], [11], [15], [18].", "sec": "sec3a", "part": "1"}, {"text": "An SRGM is based on the following assumptions [11], [15], [24]:\n\n6)\nThe fault detection process follows the NHPP.\n\n7)\nThe software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n\n8)\nAll detected faults can be categorized as either leading faults, or dependent faults.", "sec": "sec3b", "part": "1"}], "order": "15", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, we first show how several existing SRGMs based on NHPP models can be comprehensively derived by applying the time-dependent delay function. Moreover, for most conventional SRGMs, they assume that detected errors are immediately corrected. But this assumption may not be realistic in practice. Therefore, we incorporate the ideas of failure dependency and time-dependent delay function into software reliability growth modeling. New SRGMs are proposed and numerical illustrations based ...", "documentLink": "/document/1414576", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1414576", "pdfSize": "1855KB"}, "id": "ref15", "text": "C. Y. Huang, C. T. Lin, J. H. Lo, C. C. Sue, \"Effect of fault dependency and debugging time lag on software\nerror models\", <em>Proceedings of the 2004 IEEE Region 10 Conference (TENCON 2004)</em>, pp. 243-246, 2004-Nov.", "refType": "biblio"}, {"title": "Analysis of Software Fault Removal Policies Using a Non-Homogeneous\nContinuous Time Markov Chain", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[16][18].", "sec": "sec2a", "part": "1"}], "order": "16", "links": {"crossRefLink": "http://dx.doi.org/10.1023/B:SQJO.0000034709.63615.8b", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref16", "text": "S. S. Gokhale, M. R. Lyu, K. S. Trivedi, \"Analysis of Software Fault Removal Policies Using a Non-Homogeneous\nContinuous Time Markov Chain\", <em>Software Quality Journal</em>, vol. 12, no. 3, pp. 211-230, Sept. 2004.", "refType": "biblio"}, {"title": "Prediction Models for Software Fault Correction Effort", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[17][18].", "sec": "sec2a", "part": "1"}], "order": "17", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "We have developed a model to explain and predict the effort associated with changes made to software to correct faults while it is undergoing development. Since the effort data available for this study is ordinal in nature, ordinal response models are used to explain the effort in terms of measures of fault locality and the characteristics of the software components being changed. The calibrated ordinal response model is then applied to two projects not used in the calibration to examine predict...", "documentLink": "/document/914975", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=914975", "pdfSize": "469KB"}, "id": "ref17", "text": "W. M. Evanco, \"Prediction Models for Software Fault Correction Effort\", <em>Proceedings of the 5th European Conference on Software Maintenance and Reengineering (CSMR 2001)</em>, pp. 114-120, 2001-March.", "refType": "biblio"}, {"title": "An\nintegration of software failure detection and fault correction processes in\nsoftware reliability analysis", "context": [{"text": " There are many papers that have addressed the problem of delayed fault correction time [7]\u2013[18].", "sec": "sec2a", "part": "1"}, {"text": " From our past studies [11], [15], [18], some existing SRGM can be reinterpreted as the delayed fault detection models.", "sec": "sec3a", "part": "1"}, {"text": "The proofs are omitted because they are quite straightforward [3], [11], [15], [18].", "sec": "sec3a", "part": "1"}], "order": "18", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.jss.2005.12.006", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref18", "text": "J. H. Lo, C. Y. Huang, \"An\nintegration of software failure detection and fault correction processes in\nsoftware reliability analysis\", <em>Journal of Systems and Software</em>, 2006.", "refType": "biblio"}, {"title": "Software Reliability, Measurement, Prediction and Application", "context": [{"text": "Musa [12], [19] reported a failure data set of System T1 that was collected during in-house testing.", "sec": "sec2a", "part": "1"}, {"text": " There are many software failure data sets published in the literature [2], [19], [22].", "sec": "sec2b", "part": "1"}, {"text": " In general, failure data are usually collected in two ways: Failure Count (FC) data, and Time-Between-Failures (TBF) data [2], [19], [23].", "sec": "sec2b", "part": "1"}, {"text": "The lower the AIC value, the better the model performs.\n\n16)\nThe capability of the model to predict failure behavior from present & past failure behavior is called predictive validity, which was proposed by Musa [19], and can be represented by computing the Relative Error (RE) for a data set:\n\nAssuming we have observed \\$m_{q}\\$ failures by the end of test time \\$t_{q}\\$, we employ the failure data up to time \\$t_{e}(t_{e}\\leq t_{q})\\$ to estimate the parameters of \\$m(t)\\$.", "sec": "sec4b", "part": "1"}, {"text": " Musa reported that, if a model is found to have the best predictive validity based on failure data, it may yield the best predictions of other reliability quantities [19].", "sec": "sec4b", "part": "1"}, {"text": "The capability of the model to predict failure behavior from present & past failure behavior is called predictive validity, which was proposed by Musa [19], and can be represented by computing the Relative Error (RE) for a data set:.", "sec": "sec4b", "part": "1"}, {"text": " Sometimes LSE is preferred because it produces unbiased results [19], [32].", "sec": "sec4c1", "part": "1"}], "order": "19", "id": "ref19", "text": "J. D. Musa, A. Iannino, K. Okumoto, Software Reliability Measurement Prediction and Application, 1987, McGraw Hill.", "refType": "biblio"}, {"title": "Software Reliability and Readiness Assessment Based on the\nNon-Homogeneous Poisson Process", "context": [{"text": " In addition, Goel & Yang [20], [21] also discussed the problem whether detected faults can be corrected immediately or not.", "sec": "sec2a", "part": "1"}], "order": "20", "links": {"crossRefLink": "http://dx.doi.org/10.1016/S0065-2458(08)60709-3", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref20", "text": "A. L. Goel, K. Z. Yang, \"Software Reliability and Readiness Assessment Based on the\nNon-Homogeneous Poisson Process\", <em>Advances in Computers</em>, vol. 45, pp. 197-267, 1997.", "refType": "biblio"}, {"title": "An Infinite Server Queueing Model for Software Readiness and Related Performance Measures", "context": [{"text": " In addition, Goel & Yang [20], [21] also discussed the problem whether detected faults can be corrected immediately or not.", "sec": "sec2a", "part": "1"}, {"text": " Yang [21] illustrated the problem by giving a real example, and reported that detected faults take months to remove for large software systems.", "sec": "sec2a", "part": "1"}], "order": "21", "id": "ref21", "text": "K. Z. Yang, <em>An Infinite Server Queueing Model for Software Readiness and Related Performance Measures</em>, 1996, Syracuse University.", "refType": "biblio"}, {"title": "Software Reliability Analysis Models", "context": [{"text": " There are many software failure data sets published in the literature [2], [19], [22].", "sec": "sec2b", "part": "1"}, {"text": " Ohba [22] conceived that there were two types of faults: mutually independent faults, and mutually dependent faults.", "sec": "sec2b", "part": "1"}, {"text": " This model was proposed by Ohba, and its underlying concept is that the observed software reliability growth becomes S-shaped if faults in a program are mutually dependent [2], [22], [23].", "sec": "sec3a", "part": "1"}, {"text": "The first data set (DS1) was from the paper by Ohba [22] for a PL/I database application software system consisting of approximately 1, 317, 000 lines of code.", "sec": "sec4a", "part": "1"}], "order": "22", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper discusses improvements to conventional software reliability analysis models by making the assumptions on which they are based more realistic. In an actual project environment, sometimes no more information is available than reliability data obtained from a test report. The models described here are designed to resolve the problems caused by this constraint on the availability of reliability data. By utilizing the technical knowledge about a program, a test, and test data, we can selec...", "documentLink": "/document/5390352", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5390352", "pdfSize": "1535KB"}, "id": "ref22", "text": "M. Ohba, \"Software Reliability Analysis Models\", <em>IBM Journal of Research and Development</em>, vol. 28, no. 4, pp. 428-443, 1984.", "refType": "biblio"}, {"title": "Software Reliability Modeling", "context": [{"text": " In general, failure data are usually collected in two ways: Failure Count (FC) data, and Time-Between-Failures (TBF) data [2], [19], [23].", "sec": "sec2b", "part": "1"}, {"text": "From our studies [2], [5], [11], [12], [23], most software reliability models have some assumptions concerning the fault detection process:\n\n1)\nThe fault removal process follows the non-homogeneous Poisson process (NHPP).\n\n2)\nThe software system is subject to failures at random times caused by the manifestation of remaining faults in the system.\n\n3)\nThe mean number of faults detected in the time interval \\$(t, T+\\Delta t]\\$ is proportional to the mean number of remaining faults in the system, and the proportionality is a constant.\n\n4)\nThe failure rate of each detectable fault is identical.\n\n5)\nEach time a failure occurs, the fault that caused it is immediately & perfectly removed.", "sec": "sec3a", "part": "1"}, {"text": " This model, first proposed by Goel & Okumoto [2], [23], is one of the most popular NHPP models in the field of software reliability engineering.", "sec": "sec3a", "part": "1"}, {"text": " This model is a modification of the NHPP to obtain an S-shaped curve for the cumulative number of faults detected such that the failure rate initially increases, and later decays [2], [23].", "sec": "sec3a", "part": "1"}, {"text": " This model was proposed by Ohba, and its underlying concept is that the observed software reliability growth becomes S-shaped if faults in a program are mutually dependent [2], [22], [23].", "sec": "sec3a", "part": "1"}, {"text": " Yamada et al. [3], [23] proposed a software reliability growth model incorporating the amount of testing-effort expended during the software testing phase.", "sec": "sec3a", "part": "1"}, {"text": "Firstly, we estimate the parameters of (21), (27), and other selected SRGM by using the methods of Maximum Likelihood Estimation (MLE), and Least Squares Estimation (LSE) [2], [23], [32], [33].", "sec": "sec4c1", "part": "1"}, {"text": " On the other hand, the fault detection rate is used to measure the effectiveness of fault detection by test techniques, and test cases [2], [23], [30].", "sec": "sec4c3", "part": "1"}, {"text": " In recent years, the problem of optimal software release time has been analysed & discussed in many papers [2], [5], [23], [34], [38]\u2013[40].", "sec": "sec5", "part": "1"}, {"text": "In addition, software reliability can be defined as [2], [5], [23] Equation (38) represents the probability that a software failure doesn't occur in time interval \\$(T, T+{\\mit\\Delta} T]\\$.", "sec": "sec5a", "part": "1"}, {"text": " Thus, the cost function can be described by [5], [23], [34], [38], [39] From the work by Boehm [43], we know that \\$C_{2}>C_{1}\\$ as \\$C_{2}\\$ is usually an order of magnitude greater than \\$C_{1}\\$.", "sec": "sec5b", "part": "1"}], "order": "23", "links": {"crossRefLink": "http://dx.doi.org/10.1142/1390", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref23", "text": "M. Xie, Software Reliability Modeling, 1991, World Scientific Publishing Company.", "refType": "biblio"}, {"title": "Software Reliability Growth Model with Error Dependency", "context": [{"text": " [24] also discussed this problem, and proposed an SRGM that considers the underlying fault dependency.", "sec": "sec2b", "part": "1"}, {"text": "An SRGM is based on the following assumptions [11], [15], [24]:\n\n6)\nThe fault detection process follows the NHPP.\n\n7)\nThe software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n\n8)\nAll detected faults can be categorized as either leading faults, or dependent faults.", "sec": "sec3b", "part": "1"}, {"text": " From (16), we obtain the MVF \\$m(t)\\$ as follows [24]:\n\n\nIf \\$\\varphi(t)=(1/r)\\ln(1+rt)\\$, (18) becomesSolving (22) under the boundary condition \\$m_{2}(0)=0\\$, we have and \n\n\nIf \\$\\varphi(t)=(1/r)\\ln((\\psi+1)/(1+\\psi\\exp[-rt]))\\$, (18) becomesSolving (25) under the boundary condition \\$m_{2}(0)=0\\$, we haveand\n\n\nIf \\$\\varphi(t)=t+\\alpha\\exp(-\\beta t^{\\gamma})-\\alpha\\$, (18) becomes\n\n When \\$\\gamma=1\\$, and \\$\\gamma=2\\$, for Weibull-type testing-effort function, we obtain the exponential, and the Rayleigh curves respectively.", "sec": "sec3b", "part": "1"}, {"text": " From (16), we obtain the MVF \\$m(t)\\$ as follows [24]:.", "sec": "sec3b", "part": "1"}, {"text": " That is, the software may contain two categories of faults [24].", "sec": "sec4c1", "part": "1"}], "order": "24", "links": {"crossRefLink": "http://dx.doi.org/10.1016/0026-2714(94)00054-R", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref24", "text": "P. K. Kapur, S. Younes, \"Software Reliability Growth Model with Error Dependency\", <em>Microelectronics and Reliability</em>, vol. 35, no. 2, pp. 273-278, 1995.", "refType": "biblio"}, {"title": "Conversion of control dependence to data dependence", "context": [{"text": " In other words, given two paths leaving \\$X\\$, if one path from \\$X\\$ will cause \\$Y\\$ to be executed while the other will not, then we can say \\$Y\\$ is control dependent on \\$X\\$ [25].", "sec": "sec2b", "part": "1"}, {"text": " [25] proposed a method for systematically converting control dependencies in programs to data dependencies.", "sec": "sec2b", "part": "1"}], "order": "25", "links": {"acmLink": "http://dx.doi.org/10.1145/567067.567085", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref25", "text": "J. R. Allen, K. Kennedy, C. Porterfield, J. Warren, \"Conversion of control dependence to data dependence\", <em>Proceeding of the 10th ACM Symposium on Principles of Programming Languages</em>, pp. 177-189, 1983-January.", "refType": "biblio"}, {"title": "Reliability of the Path Analysis Testing\nStrategy", "context": [{"text": " [26] made great effort to study the classification of faults, including the incorrect expression fault, missing path fault, path selection fault, and omission of statement faults, etc.", "sec": "sec2b", "part": "1"}], "order": "26", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A set of test data T for a program P is reliable if it reveals that P contains an error whenever P is incorrect. If a set of tests T is reliable and P produces the correct output for each element of T then P is a correct program. Test data generation strategies are procedures for generating sets of test data. A testing strategy is reliable for a program P if it produces a reliable set of test data for P. It is proved that an effective testing strategy which is reliable for all programs cannot be...", "documentLink": "/document/1702367", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1702367", "pdfSize": "3060KB"}, "id": "ref26", "text": "W. E. Howden, \"Reliability of the Path Analysis Testing\nStrategy\", <em>IEEE Trans. on Software Engineering</em>, vol. 2, no. 3, pp. 208-215, 1976.", "refType": "biblio"}, {"title": "An Applicable Family of Data Flow Testing\nCriteria", "context": [{"text": " Moreover, the classification of variable occurrences in the language's statements generally consists of sequential, repetitive, and conditional statements [27].", "sec": "sec2b", "part": "1"}], "order": "27", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The authors extend the definitions of the previously introduced family of data flow testing criteria to apply to programs written in a large subset of Pascal. They then define a family of adequacy criteria called feasible data flow testing criteria, which are derived from the data-flow testing criteria. The feasible data flow testing criteria circumvent the problem of nonapplicability of the data flow testing criteria by requiring the test data to exercise only those definition-use associations ...", "documentLink": "/document/6194", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6194", "pdfSize": "1340KB"}, "id": "ref27", "text": "P. G. Frankland, E. J. Weyuker, \"An Applicable Family of Data Flow Testing\nCriteria\", <em>IEEE Trans. on Software Engineering</em>, vol. 14, no. 10, pp. 1483-1498, October 1988.", "refType": "biblio"}, {"title": "Advanced Compiler Design and Implementation", "context": [{"text": " From Definitions 2, 4, 5 [28], we know \\${\\rm UD}(S_{3}, a)=\\{S_{1}\\}, {\\rm UD}(S_{4}, a)=\\{S_{1}\\}, {\\rm UD}(S_{4}, b)=\\{S_{2}\\}, \\bigcup_{{\\rm all}\\ v \\in {\\rm Use}(S_{4})}{\\rm UD}(S_{4},v)=\\{S_{1}, S_{2}\\}, {\\rm DU}(S_{1}, a)=\\{S_{3}, S_{4}\\}, {\\rm DU}(S_{2}, b)=\\{S_{4}\\}, {\\rm DU}(S_{3}, C)=\\Phi\\$, and \\${\\rm DU}(S_{4},d)=\\Phi\\$.", "sec": "sec2b1", "part": "1"}, {"text": " From Definitions 2, 3, & 4 [28], we know \\${\\rm DU}(S_{1},key)=\\{S_{2}\\}, {\\rm C}(S_{2})=\\{S_{3}\\}\\$, and \\${\\rm DU}(S_{3}, Count)=\\{S_{4}\\}\\$.", "sec": "sec2b2", "part": "1"}, {"text": " From Definitions 3 & 4 [28], we know \\${\\rm DU}(S_{1},key)=\\{S_{2}, S_{3}\\}\\$, and \\${\\rm C}(S_{2})=\\{S_{3}, S_{4}\\}\\$.", "sec": "sec2b3", "part": "1"}], "order": "28", "id": "ref28", "text": "S. S. Muchnick, Advanced Compiler Design and Implementation, 1997, Morgan Kaufmann.", "refType": "biblio"}, {"title": "Predicting Software Reliability", "context": [{"text": " The second data set (DS2) was presented by Wood [29] from a subset of products for four separate software releases at the Tandem Computers Company.", "sec": "sec4a", "part": "1"}], "order": "29", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Critical business applications require reliable software, but developing reliable software is one of the most difficult problems facing the software industry. After the software is shipped, software vendors receive customer feedback about software reliability. However, by then it is too late; software vendors need to know whether their products are reliable before they are delivered to customers. Software reliability growth models help provide that information. Unfortunately, very little real da...", "documentLink": "/document/544240", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=544240", "pdfSize": "907KB"}, "id": "ref29", "text": "A. P. Wood, \"Predicting Software Reliability\", <em>IEEE Computer</em>, pp. 69-77, Nov. 1996.", "refType": "biblio"}, {"title": "Framework for Modeling Software Reliability,\nUsing Various Testing-Efforts and Fault-Detection Rates", "context": [{"text": " The MSE is defined as [5], [30]-[31]:where \\$m_{i}\\$ is the observed number of faults by time \\$t_{i}\\$.", "sec": "sec4b", "part": "1"}, {"text": " On the other hand, the fault detection rate is used to measure the effectiveness of fault detection by test techniques, and test cases [2], [23], [30].", "sec": "sec4c3", "part": "1"}], "order": "30", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper proposes a new scheme for constructing software reliability growth models (SRGM) based on a nonhomogeneous Poisson process (NHPP). The main focus is to provide an efficient parametric decomposition method for software reliability modeling, which considers both testing efforts and fault detection rates (FDR). In general, the software fault detection/removal mechanisms depend on previously detected/removed faults and on how testing efforts are used. From practical field studies, it is l...", "documentLink": "/document/974129", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=974129", "pdfSize": "247KB"}, "id": "ref30", "text": "S. Y. Kuo, C. Y. Huang, M. R. Lyu, \"Framework for Modeling Software Reliability\nUsing Various Testing-Efforts and Fault-Detection Rates\", <em>IEEE Trans. on Reliability</em>, vol. 50, no. 3, pp. 310-320, Sept. 2001.", "refType": "biblio"}, {"title": "Applying Software Reliability Models More\nEffectively", "context": [{"text": " The MSE is defined as [5], [30]-[31]:where \\$m_{i}\\$ is the observed number of faults by time \\$t_{i}\\$.", "sec": "sec4b", "part": "1"}, {"text": " The Kolmogorov-Distance (KD) is defined as [2], [31]\u2013[33]:where \\$k\\$ is sample size, \\$F^{\\ast}(x)\\$ is the normalized observed cumulative distribution at the \\$x\\$-th time point, and \\$F(x)\\$ is the expected cumulative distribution at the \\$x\\$-th time point, based on the model.", "sec": "sec4b", "part": "1"}], "order": "31", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A set of linear combination software reliability models that combine the results of single, or component, models is presented. It is shown that, as measured by statistical methods for determining a model's applicability to a set of failure data, a combination model tends to have more accurate short-term and long-term predictions than a component model. These models were evaluated using both historical data sets and data from recent Jet Propulsion Laboratory projects. The computer-aided software ...", "documentLink": "/document/143104", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=143104", "pdfSize": "1271KB"}, "id": "ref31", "text": "M. R. Lyu, A. Nikora, \"Applying Software Reliability Models More\nEffectively\", <em>IEEE Software</em>, pp. 43-52, July 1992.", "refType": "biblio"}, {"title": "Software reliability modelspast, present and future", "context": [{"text": " The Kolmogorov-Distance (KD) is defined as [2], [31]\u2013[32][33]:where \\$k\\$ is sample size, \\$F^{\\ast}(x)\\$ is the normalized observed cumulative distribution at the \\$x\\$-th time point, and \\$F(x)\\$ is the expected cumulative distribution at the \\$x\\$-th time point, based on the model.", "sec": "sec4b", "part": "1"}, {"text": "Firstly, we estimate the parameters of (21), (27), and other selected SRGM by using the methods of Maximum Likelihood Estimation (MLE), and Least Squares Estimation (LSE) [2], [23], [32], [33].", "sec": "sec4c1", "part": "1"}, {"text": " Sometimes LSE is preferred because it produces unbiased results [19], [32].", "sec": "sec4c1", "part": "1"}], "order": "32", "id": "ref32", "text": "M. Xie, \"Software reliability modelspast present and future\" in Recent Advances in Reliability Theory: Methodology Practice and Inference, pp. 323-340, 2000, Birkhauser,.", "refType": "biblio"}, {"title": "Software reliability models for computer implementations&mdash;an\nempirical study", "context": [{"text": " The Kolmogorov-Distance (KD) is defined as [2], [31]\u2013[33]:where \\$k\\$ is sample size, \\$F^{\\ast}(x)\\$ is the normalized observed cumulative distribution at the \\$x\\$-th time point, and \\$F(x)\\$ is the expected cumulative distribution at the \\$x\\$-th time point, based on the model.", "sec": "sec4b", "part": "1"}, {"text": "Firstly, we estimate the parameters of (21), (27), and other selected SRGM by using the methods of Maximum Likelihood Estimation (MLE), and Least Squares Estimation (LSE) [2], [23], [32], [33].", "sec": "sec4c1", "part": "1"}], "order": "33", "links": {"crossRefLink": "http://dx.doi.org/10.1002/(SICI)1097-024X(199602)26:2&lt;135::AID-SPE1&gt;3.0.CO;2-Z", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref33", "text": "G. Triantafyllos, S. Vassiliadis, \"Software reliability models for computer implementations&mdash;an\nempirical study\", <em>Software: Practice and Experience</em>, vol. 26, no. 2, pp. 135-164, Feb. 1996.", "refType": "biblio"}, {"title": "Analysis of incorporating logistic testing-effort\nfunction into software reliability modeling", "context": [{"text": " In recent years, the problem of optimal software release time has been analysed & discussed in many papers [2], [5], [23], [34], [38]\u2013[40].", "sec": "sec5", "part": "1"}, {"text": " Thus, the cost function can be described by [5], [23], [34], [38], [39] From the work by Boehm [43], we know that \\$C_{2}>C_{1}\\$ as \\$C_{2}\\$ is usually an order of magnitude greater than \\$C_{1}\\$.", "sec": "sec5b", "part": "1"}], "order": "34", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper investigates a SRGM (software reliability growth model) based on the NHPP (nonhomogeneous Poisson process) which incorporates a logistic testing-effort function. SRGM proposed in the literature consider the amount of testing-effort spent on software testing which can be depicted as an exponential curve, a Rayleigh curve, or a Weibull curve. However, it might not be appropriate to represent the consumption curve for testing-effort by one of those curves in some software development env...", "documentLink": "/document/1028398", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1028398", "pdfSize": "389KB"}, "id": "ref34", "text": "C. Y. Huang, S. Y. Kuo, \"Analysis of incorporating logistic testing-effort\nfunction into software reliability modeling\", <em>IEEE Trans. on Reliability</em>, vol. 51, no. 3, pp. 261-270, September 2002.", "refType": "biblio"}, {"title": "Does\nimperfect debugging affect software reliability growth?", "context": [], "order": "35", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper discusses the improvement of conventional software reliability growth models by elimination of the unreasonable assumption that errors or faults in a program can be perfectly removed when they are detected. The results show that exponential-type soft- ware reliability growth models that deal with error- counting data could be used even if the perfect debugging assumption were not held, in which case the interpretation of the model parameters should be changed. An analysis of real proj...", "documentLink": "/document/714425", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=714425", "pdfSize": "544KB"}, "id": "ref35", "text": "M. Ohba, X. Chou, \"Does\nimperfect debugging affect software reliability growth?\", <em>Proceedings of the 11th International Conference on Software Engineering (ICSE'89)</em>, pp. 237-244, 1989-May.", "refType": "biblio"}, {"title": "Imperfect debugging models with fault introduction rate\nfor software reliability assessment", "context": [], "order": "36", "links": {"crossRefLink": "http://dx.doi.org/10.1080/00207729208949452", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref36", "text": "S. Yamada, K. Tokunou, S. Osaki, \"Imperfect debugging models with fault introduction rate\nfor software reliability assessment\", <em>International Journal of Systems Science</em>, vol. 23, no. 12, pp. 2241-2252, Dec. 1992.", "refType": "biblio"}, {"title": "Galileo Computing Software Testing and Internationalization", "context": [{"text": " Thus, the engineers have to forward the errors to programmers, and programmers may need some time to undertake related software source code validation [37].", "sec": "sec4c3", "part": "1"}], "order": "37", "id": "ref37", "text": "M. Raetzmann, C. D. Young, Galileo Computing Software Testing and Internationalization, 2003, LISA/Lemoine International.", "refType": "biblio"}, {"title": "Optimum Release Time for Software Systems Based on Reliability\nand Cost Criteria", "context": [{"text": " In recent years, the problem of optimal software release time has been analysed & discussed in many papers [2], [5], [23], [34], [38]\u2013[40].", "sec": "sec5", "part": "1"}, {"text": "Okumoto & Goel [38] first discussed the optimal software release policy from the cost-benefit viewpoint.", "sec": "sec5b", "part": "1"}, {"text": " Thus, the cost function can be described by [5], [23], [34], [38], [39] From the work by Boehm [43], we know that \\$C_{2}>C_{1}\\$ as \\$C_{2}\\$ is usually an order of magnitude greater than \\$C_{1}\\$.", "sec": "sec5b", "part": "1"}], "order": "38", "links": {"crossRefLink": "http://dx.doi.org/10.1016/0164-1212(79)90033-5", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref38", "text": "K. Okumoto, A. L. Goel, \"Optimum Release Time for Software Systems Based on Reliability\nand Cost Criteria\", <em>Journal of Systems and Software</em>, vol. 1, pp. 315-318, 1980.", "refType": "biblio"}, {"title": "A study of the effect of imperfect debugging on software\ndevelopment cost", "context": [{"text": " In recent years, the problem of optimal software release time has been analysed & discussed in many papers [2], [5], [23], [34], [38]\u2013[39][40].", "sec": "sec5", "part": "1"}, {"text": " Thus, the cost function can be described by [5], [23], [34], [38], [39] From the work by Boehm [43], we know that \\$C_{2}>C_{1}\\$ as \\$C_{2}\\$ is usually an order of magnitude greater than \\$C_{1}\\$.", "sec": "sec5b", "part": "1"}], "order": "39", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "It is widely recognized that the debugging processes are usually imperfect. Software faults are not completely removed because of the difficulty in locating them or because new faults might be introduced. Hence, it is of great importance to investigate the effect of the imperfect debugging on software development cost, which, in turn, might affect the optimal software release time or operational budget. In this paper, a commonly used cost model is extended to the case of imperfect debugging. Bas...", "documentLink": "/document/1199075", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1199075", "pdfSize": "565KB"}, "id": "ref39", "text": "M. Xie, B. Yang, \"A study of the effect of imperfect debugging on software\ndevelopment cost\", <em>IEEE Trans. Software Engineering</em>, vol. 29, no. 5, pp. 471-473, May 2003.", "refType": "biblio"}, {"title": "Optimal Release Time for Software Systems\nConsidering Cost, Testing-Effort, and Test Efficiency", "context": [{"text": " In recent years, the problem of optimal software release time has been analysed & discussed in many papers [2], [5], [23], [34], [38]\u2013[40].", "sec": "sec5", "part": "1"}, {"text": " If we let \\$T\\$ be the length of testing, and also assume the decision to stop testing is controlled by the ratio of the number of cumulative faults detected at time \\$T\\$ to the mean number of initial faults in the software system [40], a simplified criterion is given bySolving (37), we can determine the testing time \\$T_{1}\\$ needed to reach a desired target \\$R_{01}\\$.", "sec": "sec5a", "part": "1"}], "order": "40", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, we study the impact of software testing effort & efficiency on the modeling of software reliability, including the cost for optimal release time. This paper presents two important issues in software reliability modeling & software reliability economics: testing effort, and efficiency. First, we propose a generalized logistic testing-effort function that enjoys the advantage of relating work profile more directly to the natural flow of software development, and can be used to descr...", "documentLink": "/document/1546565", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1546565", "pdfSize": "392KB"}, "id": "ref40", "text": "C. Y. Huang, M. R. Lyu, \"Optimal Release Time for Software Systems\nConsidering Cost Testing-Effort and Test Efficiency\", <em>IEEE Trans. on Reliability</em>, vol. 54, no. 4, pp. 583-591, Dec. 2005.", "refType": "biblio"}, {"title": "Software Reliability Engineering: More Reliable Software, Faster Development and Testing", "context": [{"text": " For example, Musa [41] reported that we can use the demonstrable failure intensity to failure intensity objective (FI/FIO) ratio as a guide to assess the progress of during testing.", "sec": "sec5a", "part": "1"}], "order": "41", "id": "ref41", "text": "J. D. Musa, Software Reliability Engineering: More Reliable Software Faster Development and Testing, 1999, McGraw-Hill.", "refType": "biblio"}, {"title": "On the determination of optimum software release time", "context": [{"text": " In fact, it is also reasonable to stop testing when the number of remaining faults is less than a prescribed portion of total faults [42].", "sec": "sec5a", "part": "1"}], "order": "42", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "One of the important applications of software reliability models is the determination of software release time. The author presents some software release policies and discusses the problem of determination of optimum test time. Both reliability requirements and cost models are considered in obtaining specific release policies. It is noted that acceptable failure intensity should be used as a reliability goal and optimum release policy should be based on sequential approach. Some other interestin...", "documentLink": "/document/145384", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=145384", "pdfSize": "438KB"}, "id": "ref42", "text": "M. Xie, \"On the determination of optimum software release time\", <em>Proceedings of the 2nd IEEE International Symposium on Software Reliability Engineering (ISSRE'91)</em>, pp. 218-224, 1991-May.", "refType": "biblio"}, {"title": "Software Engineering Economics", "context": [{"text": " Thus, the cost function can be described by [5], [23], [34], [38], [39] From the work by Boehm [43], we know that \\$C_{2}>C_{1}\\$ as \\$C_{2}\\$ is usually an order of magnitude greater than \\$C_{1}\\$.", "sec": "sec5b", "part": "1"}], "order": "43", "id": "ref43", "text": "B. Boehm, Software Engineering Economics, 1981, Prentice-Hall.", "refType": "biblio"}], "citations": {"paperCitations": {"nonIeee": [{"title": "Optimal allocation of testing effort during testing and debugging phases: a control theoretic approach", "links": {"crossRefLink": "http://dx.doi.org/10.1080/00207721.2012.669861", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "P.K. Kapur, Hoang Pham, Udayan Chanda, Vijay Kumar, \"Optimal allocation of testing effort during testing and debugging phases: a control theoretic approach\", <em>International Journal of Systems Science</em>, vol. 44, pp. 1639, 2013, ISSN 0020-7721.", "order": "1"}, {"title": "Experimental analysis of various estimators for target range estimation in high resolution radars", "links": {"crossRefLink": "http://dx.doi.org/10.1049/iet-spr.2010.0098", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "A. Y\u0131ld\u0131r\u0131m, \"Experimental analysis of various estimators for target range estimation in high resolution radars\", <em>IET Signal Processing</em>, vol. 5, pp. 680, 2011, ISSN 17519675.", "order": "2"}, {"title": "Software dependability and imperfect debugging", "links": {"crossRefLink": "http://dx.doi.org/10.1080/09720510.2008.10701324", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "K. P. Singh, S. C. Sharma, S. J. Bae, \"Software dependability and imperfect debugging\", <em>Journal of Statistics and Management Systems</em>, vol. 11, pp. 469, 2008, ISSN 0972-0510.", "order": "3"}, {"title": "Modeling and Analysis of Software Fault Detection and Correction Process Through Weibull-Type Fault Reduction Factor, Change Point and Imperfect Debugging", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s13369-016-2189-0", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Subhashis Chatterjee, Ankur Shukla, \"Modeling and Analysis of Software Fault Detection and Correction Process Through Weibull-Type Fault Reduction Factor Change Point and Imperfect Debugging\", <em>Arabian Journal for Science and Engineering</em>, pp. , 2016, ISSN 2193-567X.", "order": "4"}, {"title": "NHPP Software Reliability Growth Model Considering Imperfect Debugging : NHPP Software Reliability Growth Model Considering Imperfect Debugging", "links": {"crossRefLink": "http://dx.doi.org/10.3724/SP.J.1001.2010.03539", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Jing-Yan XIE, Jin-Xia AN, Ji-Hong ZHU, \"NHPP Software Reliability Growth Model Considering Imperfect Debugging : NHPP Software Reliability Growth Model Considering Imperfect Debugging\", <em>Journal of Software</em>, vol. 21, pp. 942, 2010, ISSN 10009825.", "order": "5"}, {"title": "Analyzing the effect of imperfect debugging on software fault detection and correction processes via a simulation framework", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.mcm.2011.07.033", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chu-Ti Lin, \"Analyzing the effect of imperfect debugging on software fault detection and correction processes via a simulation framework\", <em>Mathematical and Computer Modelling</em>, vol. 54, pp. 3046, 2011, ISSN 08957177.", "order": "6"}, {"title": "Actuator fault recovery study based on post-fault time analysis", "links": {"crossRefLink": "http://dx.doi.org/10.3182/20110828-6-IT-1002.03551", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "R. HAMDAOUI, J.C. PONSART, D. THEILLIOL, \"Actuator fault recovery study based on post-fault time analysis\", <em>IFAC Proceedings Volumes</em>, vol. 44, pp. 14820, 2011, ISSN 14746670.", "order": "7"}, {"title": "The network of faults: a complex network approach to prioritize test cases for regression testing", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s11334-015-0255-5", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Imrul Kayes, Shafinaz Islam, Jacob Chakareski, \"The network of faults: a complex network approach to prioritize test cases for regression testing\", <em>Innovations in Systems and Software Engineering</em>, vol. 11, pp. 261, 2015, ISSN 1614-5046.", "order": "8"}, {"title": "All complaints are not created equal: text analysis of open source software defect reports", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s10664-012-9197-9", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Uzma Raja, \"All complaints are not created equal: text analysis of open source software defect reports\", <em>Empirical Software Engineering</em>, vol. 18, pp. 117, 2013, ISSN 1382-3256.", "order": "9"}, {"title": "Flexible software reliability growth model with testing effort dependent learning process", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.apm.2007.04.002", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "P.K. Kapur, D.N. Goswami, Amit Bardhan, Ompal Singh, \"Flexible software reliability growth model with testing effort dependent learning process\", <em>Applied Mathematical Modelling</em>, vol. 32, pp. 1298, 2008, ISSN 0307904X.", "order": "10"}, {"title": "AN NHPP SOFTWARE RELIABILITY GROWTH MODEL WITH IMPERFECT DEBUGGING AND ERROR GENERATION", "links": {"crossRefLink": "http://dx.doi.org/10.1142/S0218539314500089", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "P. ROY, G. S. MAHAPATRA, K. N. DEY, \"AN NHPP SOFTWARE RELIABILITY GROWTH MODEL WITH IMPERFECT DEBUGGING AND ERROR GENERATION\", <em>International Journal of Reliability Quality and Safety Engineering</em>, vol. 21, pp. 1450008, 2014, ISSN 0218-5393.", "order": "11"}, {"title": "RELIABILITY ESTIMATION FOR A DIGITAL INSTRUMENT AND CONTROL SYSTEM", "links": {"crossRefLink": "http://dx.doi.org/10.5516/NET.04.2012.513", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Yang Yaguang, Sydnor Russell, \"RELIABILITY ESTIMATION FOR A DIGITAL INSTRUMENT AND CONTROL SYSTEM\", <em>Nuclear Engineering and Technology</em>, vol. 44, pp. 405, 2012, ISSN 1738-5733.", "order": "12"}, {"title": "Software Reliability Growth Modelling and Analysis with Dual Fault Detection and Correction Processes", "links": {"crossRefLink": "http://dx.doi.org/10.1080/0740817X.2015.1096432", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Lujia Wang, Qingpei Hu, Jian Liu, \"Software Reliability Growth Modelling and Analysis with Dual Fault Detection and Correction Processes\", <em>IIE Transactions</em>, pp. 00, 2015, ISSN 0740-817X.", "order": "13"}, {"title": "Enhancing and measuring the predictive capabilities of testing-effort dependent software reliability models", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.jss.2007.10.002", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chu-Ti Lin, Chin-Yu Huang, \"Enhancing and measuring the predictive capabilities of testing-effort dependent software reliability models\", <em>Journal of Systems and Software</em>, vol. 81, pp. 1025, 2008, ISSN 01641212.", "order": "14"}, {"title": "Modeling of Software Fault Detection and Correction Processes Based on the Correction Lag", "links": {"crossRefLink": "http://dx.doi.org/10.3923/itj.2009.735.742", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Yanjun Shu, Hongwei Liu, Zhibo Wu, Xiaozong Yang, \"Modeling of Software Fault Detection and Correction Processes Based on the Correction Lag\", <em>Information Technology Journal</em>, vol. 8, pp. 735, 2009, ISSN 18125638.", "order": "15"}, {"title": "Enhancing software reliability modeling and prediction through the introduction of time-variable fault reduction factor", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.apm.2010.07.017", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chao-Jung Hsu, Chin-Yu Huang, Jun-Ru Chang, \"Enhancing software reliability modeling and prediction through the introduction of time-variable fault reduction factor\", <em>Applied Mathematical Modelling</em>, vol. 35, pp. 506, 2011, ISSN 0307904X.", "order": "16"}, {"title": "Considering the fault dependency concept with debugging time lag in software reliability growth modeling using a power function of testing time", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s11633-007-0359-y", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "V. B. Singh, Kalpana Yadav, Reecha Kapur, V. S. S. Yadavalli, \"Considering the fault dependency concept with debugging time lag in software reliability growth modeling using a power function of testing time\", <em>International Journal of Automation and Computing</em>, vol. 4, pp. 359, 2007, ISSN 17518520.", "order": "17"}, {"title": "Product backlog rating: a case study on measuring test quality in scrum", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s11334-016-0271-0", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Imrul Kayes, Mithun Sarker, Jacob Chakareski, \"Product backlog rating: a case study on measuring test quality in scrum\", <em>Innovations in Systems and Software Engineering</em>, pp. , 2016, ISSN 1614-5046.", "order": "18"}, {"title": "Software reliability analysis and assessment using queueing models with multiple change-points", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.camwa.2010.07.039", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chin-Yu Huang, Tsui-Ying Hung, \"Software reliability analysis and assessment using queueing models with multiple change-points\", <em>Computers & Mathematics with Applications</em>, vol. 60, pp. 2015, 2010, ISSN 08981221.", "order": "19"}, {"title": "A New Software Reliability Growth Model: Multigeneration Faults and a Power-Law Testing-Effort Function", "links": {"crossRefLink": "http://dx.doi.org/10.1155/2016/9276093", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Fan Li, Ze-Long Yi, \"A New Software Reliability Growth Model: Multigeneration Faults and a Power-Law Testing-Effort Function\", <em>Mathematical Problems in Engineering</em>, vol. 2016, pp. 1, 2016, ISSN 1024-123X.", "order": "20"}, {"title": "Software Reliability Growth Model with Partial Differential Equation for Various Debugging Processes", "links": {"crossRefLink": "http://dx.doi.org/10.1155/2016/2476584", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Jiajun Xu, Shuzhen Yao, \"Software Reliability Growth Model with Partial Differential Equation for Various Debugging Processes\", <em>Mathematical Problems in Engineering</em>, vol. 2016, pp. 1, 2016, ISSN 1024-123X.", "order": "21"}, {"title": "Adaboosting-based dynamic weighted combination of software reliability growth models", "links": {"crossRefLink": "http://dx.doi.org/10.1002/qre.1216", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Haifeng Li, Min Zeng, Minyan Lu, Xuan Hu, Zhen Li, \"Adaboosting-based dynamic weighted combination of software reliability growth models\", <em>Quality and Reliability Engineering International</em>, pp. n/a, 2011, ISSN 10991638.", "order": "22"}, {"title": "Study of the nonlinear imperfect software debugging model", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.ress.2016.05.003", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Jinyong Wang, Zhibo Wu, \"Study of the nonlinear imperfect software debugging model\", <em>Reliability Engineering & System Safety</em>, vol. 153, pp. 180, 2016, ISSN 09518320.", "order": "23"}, {"title": "Enhancing the accuracy of software reliability prediction through quantifying the effect of test phase transitions", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.amc.2012.08.083", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chu-Ti Lin, \"Enhancing the accuracy of software reliability prediction through quantifying the effect of test phase transitions\", <em>Applied Mathematics and Computation</em>, vol. 219, pp. 2478, 2012, ISSN 00963003.", "order": "24"}, {"title": "Contributions to Software Reliability with <i>OR</i>\n Applications", "links": {"crossRefLink": "http://dx.doi.org/10.1002/9780470400531.eorms0194", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "P.K. Kapur, Ravi Kumar, Anshu Gupta, \"Contributions to Software Reliability with <i>OR</i>\n Applications\", pp. , 2011, ISBN 9780470400531.", "order": "25"}, {"title": "SRM: a staged reliability model for Web service", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s11334-013-0194-y", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chunli Xie, Bixin Li, Hareton Leung, \"SRM: a staged reliability model for Web service\", <em>Innovations in Systems and Software Engineering</em>, vol. 10, pp. 137, 2014, ISSN 1614-5046.", "order": "26"}, {"title": "Statistical Inference on Software Reliability Assuming Exponential Fault Correction Time", "links": {"crossRefLink": "http://dx.doi.org/10.1515/EQC.2010.019", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Kodialbail Harishchandra, Kammasandra M. Manjunatha, \"Statistical Inference on Software Reliability Assuming Exponential Fault Correction Time\", <em>Economic Quality Control</em>, vol. 25, pp. 269, 2010, ISSN 18696147.", "order": "27"}, {"title": "AN ASSESSMENT OF TESTING COST WITH EFFORT-DEPENDENT FDP AND FCP UNDER LEARNING EFFECT: A GENETIC ALGORITHM APPROACH", "links": {"crossRefLink": "http://dx.doi.org/10.1142/S0218539314500272", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "VIJAY KUMAR, SUNIL KUMAR KHATRI, HITESH DUA, MANISHA SHARMA, PARIDHI MATHUR, \"AN ASSESSMENT OF TESTING COST WITH EFFORT-DEPENDENT FDP AND FCP UNDER LEARNING EFFECT: A GENETIC ALGORITHM APPROACH\", <em>International Journal of Reliability Quality and Safety Engineering</em>, vol. 21, pp. 1450027, 2014, ISSN 0218-5393.", "order": "28"}, {"title": "Change point\u2013based software reliability model under imperfect debugging with revised concept of fault dependency", "links": {"crossRefLink": "http://dx.doi.org/10.1177/1748006X16673767", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Subhashis Chatterjee, Ankur Shukla, \"Change point\u2013based software reliability model under imperfect debugging with revised concept of fault dependency\", <em>Proceedings of the Institution of Mechanical Engineers Part O: Journal of Risk and Reliability</em>, vol. 230, pp. 579, 2016, ISSN 1748-006X.", "order": "29"}, {"title": "Statistical Inference on Software Reliability Assuming Exponential Fault Correction Time", "links": {"crossRefLink": "http://dx.doi.org/10.1515/eqc.2010.019", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Kodialbail Harishchandra, Kammasandra M. Manjunatha, \"Statistical Inference on Software Reliability Assuming Exponential Fault Correction Time\", <em>Economic Quality Control</em>, vol. 25, pp. , 2010, ISSN 0940-5151.", "order": "30"}], "ieee": [{"title": "Considering Fault Correction Lag in Software Reliability Modeling", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4725319", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4725319", "pdfSize": "207KB"}, "displayText": "Yanjun Shu, Zhibo Wu, Hongwei Liu, Xiaozong Yang, \"Considering Fault Correction Lag in Software Reliability Modeling\", <em>Dependable Computing 2008. PRDC '08. 14th IEEE Pacific Rim International Symposium on</em>, pp. 355-356, 2008.", "order": "1"}, {"title": "Selection of Optimal Software Reliability Growth Models Using a Distance Based Approach", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5460915", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5460915", "pdfSize": "630KB"}, "displayText": "Kapil Sharma, Rakesh Garg, C. K. Nagpal, R. K. Garg, \"Selection of Optimal Software Reliability Growth Models Using a Distance Based Approach\", <em>Reliability IEEE Transactions on</em>, vol. 59, pp. 266-276, 2010, ISSN 0018-9529.", "order": "2"}, {"title": "Software Reliability Analysis and Measurement Using Finite and Infinite Server Queueing Models", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4385745", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4385745", "pdfSize": "443KB"}, "displayText": "Chin-Yu Huang, Wei-Chih Huang, \"Software Reliability Analysis and Measurement Using Finite and Infinite Server Queueing Models\", <em>Reliability IEEE Transactions on</em>, vol. 57, pp. 192-203, 2008, ISSN 0018-9529.", "order": "3"}, {"title": "Software Reliability Prediction and Analysis Using Queueing Models with Multiple Change-Points", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5325373", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5325373", "pdfSize": "845KB"}, "displayText": "Chin-Yu Huang, Tsui-Ying Hung, Chao-Jung Hsu, \"Software Reliability Prediction and Analysis Using Queueing Models with Multiple Change-Points\", <em>Secure Software Integration and Reliability Improvement 2009. SSIRI 2009. Third IEEE International Conference on</em>, pp. 212-221, 2009.", "order": "4"}, {"title": "Applying express-queue-based approach to Software Reliability and cost analysis", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/7753632", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=7753632", "pdfSize": "833KB"}, "displayText": "Shu-Cheng Chang, Chin-Yu Huang, Jhih-Sin Lin, \"Applying express-queue-based approach to Software Reliability and cost analysis\", <em>Signal Processing Communications and Computing (ICSPCC) 2016 IEEE International Conference on</em>, pp. 1-6, 2016.", "order": "5"}, {"title": "A General Imperfect Software Debugging Model Considering the Nonlinear Process of Fault Introduction", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6958408", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6958408", "pdfSize": "181KB"}, "displayText": "Jinyong Wang, Zhibo Wu, Yanjun Shu, Zhan Zhang, \"A General Imperfect Software Debugging Model Considering the Nonlinear Process of Fault Introduction\", <em>Quality Software (QSIC) 2014 14th International Conference on</em>, pp. 222-227, 2014, ISSN 1550-6002.", "order": "6"}, {"title": "Incorporating fault dependent correction delay in SRGM with testing effort and release policy analysis", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6349508", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6349508", "pdfSize": "659KB"}, "displayText": "Shaik Mohammad Rafi, Shaheda Akthar, \"Incorporating fault dependent correction delay in SRGM with testing effort and release policy analysis\", <em>Software Engineering (CONSEG) 2012 CSI Sixth International Conference on</em>, pp. 1-6, 2012.", "order": "7"}, {"title": "Quasi-Renewal Time-Delay Fault-Removal Consideration in Software Reliability Modeling", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4694128", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4694128", "pdfSize": "251KB"}, "displayText": "Seheon Hwang, Hoang Pham, \"Quasi-Renewal Time-Delay Fault-Removal Consideration in Software Reliability Modeling\", <em>Systems Man and Cybernetics Part A: Systems and Humans IEEE Transactions on</em>, vol. 39, pp. 200-209, 2009, ISSN 1083-4427.", "order": "8"}, {"title": "NHPP software reliability growth model incorporating fault detection and debugging", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6615293", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6615293", "pdfSize": "404KB"}, "displayText": "He Yan, \"NHPP software reliability growth model incorporating fault detection and debugging\", <em>Software Engineering and Service Science (ICSESS) 2013 4th IEEE International Conference on</em>, pp. 225-228, 2013, ISSN 2327-0594.", "order": "9"}, {"title": "Software Reliability Growth Model with testing effort using learning function", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6349470", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6349470", "pdfSize": "106KB"}, "displayText": "S. K. Khatri, D. Kumar, A. Dwivedi, N. Mrinal, \"Software Reliability Growth Model with testing effort using learning function\", <em>Software Engineering (CONSEG) 2012 CSI Sixth International Conference on</em>, pp. 1-5, 2012.", "order": "10"}, {"title": "A study of applying the bounded Generalized Pareto distribution to the analysis of software fault distribution", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5674517", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5674517", "pdfSize": "1102KB"}, "displayText": "Chih-Song Kuo, Chin-Yu Huang, \"A study of applying the bounded Generalized Pareto distribution to the analysis of software fault distribution\", <em>Industrial Engineering and Engineering Management (IEEM) 2010 IEEE International Conference on</em>, pp. 611-615, 2010, ISSN 2157-362X.", "order": "11"}, {"title": "Role of parameter estimation &amp; prediction during development of Software using SRGM", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/7359222", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=7359222", "pdfSize": "318KB"}, "displayText": "Arushi Varshney, Rana Majumdar, Chetna Choudhary, Abhishek Srivastava, \"Role of parameter estimation &amp; prediction during development of Software using SRGM\", <em>Reliability Infocom Technologies and Optimization (ICRITO) (Trends and Future Directions) 2015 4th International Conference on</em>, pp. 1-6, 2015.", "order": "12"}, {"title": "Modeling and Analysis of Software Fault Detection and Correction Process by Considering Time Dependency", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4378411", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4378411", "pdfSize": "697KB"}, "displayText": "Y. P. Wu, Q. P. Hu, M. Xie, S. H. Ng, \"Modeling and Analysis of Software Fault Detection and Correction Process by Considering Time Dependency\", <em>Reliability IEEE Transactions on</em>, vol. 56, pp. 629-642, 2007, ISSN 0018-9529.", "order": "13"}, {"title": "Incorporating fault dependency and debugging delay in software reliability analysis", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4654440", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4654440", "pdfSize": "659KB"}, "displayText": "R. Peng, Q.P. Hu, S.H. Ng, \"Incorporating fault dependency and debugging delay in software reliability analysis\", <em>Management of Innovation and Technology 2008. ICMIT 2008. 4th IEEE International Conference on</em>, pp. 641-645, 2008.", "order": "14"}, {"title": "Test case prioritization for regression testing based on fault dependency", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5941954", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5941954", "pdfSize": "274KB"}, "displayText": "Md. Imrul Kayes, \"Test case prioritization for regression testing based on fault dependency\", <em>Electronics Computer Technology (ICECT) 2011 3rd International Conference on</em>, vol. 5, pp. 48-52, 2011.", "order": "15"}, {"title": "Staffing Level and Cost Analyses for Software Debugging Activities Through Rate-Based Simulation Approaches", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4967914", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4967914", "pdfSize": "1758KB"}, "displayText": "Chu-Ti Lin, Chin-Yu Huang, \"Staffing Level and Cost Analyses for Software Debugging Activities Through Rate-Based Simulation Approaches\", <em>Reliability IEEE Transactions on</em>, vol. 58, pp. 711-724, 2009, ISSN 0018-9529.", "order": "16"}, {"title": "Forecasting time-between-failures of software using fuzzy time series approach", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6291059", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6291059", "pdfSize": "2000KB"}, "displayText": "Dilip Kumar Yadav, S. K. Chaturvedi, R. B. Misra, \"Forecasting time-between-failures of software using fuzzy time series approach\", <em>Fuzzy Information Processing Society (NAFIPS) 2012 Annual Meeting of the North American</em>, pp. 1-8, 2012, ISSN pending.", "order": "17"}, {"title": "Detection and Correction Process Modeling Considering the Time Dependency", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4041884", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4041884", "pdfSize": "361KB"}, "displayText": "Y.p. Wu, Q.p. Hu, M. Xie, S.h. Ng, \"Detection and Correction Process Modeling Considering the Time Dependency\", <em>Dependable Computing 2006. PRDC '06. 12th Pacific Rim International Symposium on</em>, pp. 19-25, 2006.", "order": "18"}, {"title": "Rate-Based Queueing Simulation Model of Open Source Software Debugging Activities", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6891380", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6891380", "pdfSize": "2547KB"}, "displayText": "Chu-Ti Lin, Yan-Fu Li, \"Rate-Based Queueing Simulation Model of Open Source Software Debugging Activities\", <em>Software Engineering IEEE Transactions on</em>, vol. 40, pp. 1075-1099, 2014, ISSN 0098-5589.", "order": "19"}, {"title": "Considering the Dependency of Fault Detection and Correction in Software Reliability Modeling", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4722140", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4722140", "pdfSize": "227KB"}, "displayText": "Yanjun Shu, Zhibo Wu, Hongwei Liu, Xiaozong Yang, \"Considering the Dependency of Fault Detection and Correction in Software Reliability Modeling\", <em>Computer Science and Software Engineering 2008 International Conference on</em>, vol. 2, pp. 672-675, 2008.", "order": "20"}, {"title": "A Modified Genetic Algorithm for Parameter Estimation of Software Reliability Growth Models", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4700336", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4700336", "pdfSize": "196KB"}, "displayText": "Chao-Jung Hsu, Chin-Yu Huang, Tsan-Yuan Chen, \"A Modified Genetic Algorithm for Parameter Estimation of Software Reliability Growth Models\", <em>Software Reliability Engineering 2008. ISSRE 2008. 19th International Symposium on</em>, pp. 281-282, 2008, ISSN 1071-9458.", "order": "21"}, {"title": "An Adaptive Reliability Analysis Using Path Testing for Complex Component-Based Software Systems", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5701674", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5701674", "pdfSize": "1227KB"}, "displayText": "Chao-Jung Hsu, Chin-Yu Huang, \"An Adaptive Reliability Analysis Using Path Testing for Complex Component-Based Software Systems\", <em>Reliability IEEE Transactions on</em>, vol. 60, pp. 158-170, 2011, ISSN 0018-9529.", "order": "22"}, {"title": "A Study of Software Fault Detection and Correction Process Models", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4037131", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4037131", "pdfSize": "118KB"}, "displayText": "Y.p. Wu, Q.p. Hu, S.h. Ng, \"A Study of Software Fault Detection and Correction Process Models\", <em>Management of Innovation and Technology 2006 IEEE International Conference on</em>, vol. 2, pp. 812-816, 2006.", "order": "23"}, {"title": "Software reliability modeling with the generalized logistic test coverage function", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/7339015", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=7339015", "pdfSize": "87KB"}, "displayText": "Bo Zhou, Hang Lei, Wensheng Guo, \"Software reliability modeling with the generalized logistic test coverage function\", <em>Software Engineering and Service Science (ICSESS) 2015 6th IEEE International Conference on</em>, pp. 106-109, 2015, ISSN 2327-0594.", "order": "24"}, {"title": "Simulation-based FDP &#x00026; FCP analysis with queueing models", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4738137", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4738137", "pdfSize": "631KB"}, "displayText": "Q. P. Hu, R. Peng, S. H. Ng, H. Q. Wang, \"Simulation-based FDP &#x00026; FCP analysis with queueing models\", <em>Industrial Engineering and Engineering Management 2008. IEEM 2008. IEEE International Conference on</em>, pp. 1577-1581, 2008.", "order": "25"}, {"title": "Software Reliability Prediction and Assessment Using both Finite and Infinite Server Queueing Approaches", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4041904", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4041904", "pdfSize": "247KB"}, "displayText": "Wei-chih Huang, Chin-yu Huang, Chuan-ching Sue, \"Software Reliability Prediction and Assessment Using both Finite and Infinite Server Queueing Approaches\", <em>Dependable Computing 2006. PRDC '06. 12th Pacific Rim International Symposium on</em>, pp. 194-201, 2006.", "order": "26"}, {"title": "Software reliability modeling of fault detection and correction processes", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4914730", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4914730", "pdfSize": "403KB"}, "displayText": "Yanjun Shu, Zhibo Wu, Hongwei Liu, Xiaozong Yang, \"Software reliability modeling of fault detection and correction processes\", <em>Reliability and Maintainability Symposium 2009. RAMS 2009. Annual</em>, pp. 521-526, 2009, ISSN 0149-144X.", "order": "27"}, {"title": "Exploring Genetic Programming and Boosting Techniques to Model Software Reliability", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4298229", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4298229", "pdfSize": "683KB"}, "displayText": "Eduardo Oliveira Costa, Gustavo Alexandre de Souza, Aurora Trinidad Ramirez Pozo, Silvia Regina Vergilio, \"Exploring Genetic Programming and Boosting Techniques to Model Software Reliability\", <em>Reliability IEEE Transactions on</em>, vol. 56, pp. 422-434, 2007, ISSN 0018-9529.", "order": "28"}, {"title": "Optimal Weighted Combinational Models for Software Reliability Estimation and Analysis", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6786506", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6786506", "pdfSize": "3512KB"}, "displayText": "Chao-Jung Hsu, Chin-Yu Huang, \"Optimal Weighted Combinational Models for Software Reliability Estimation and Analysis\", <em>Reliability IEEE Transactions on</em>, vol. 63, pp. 731-749, 2014, ISSN 0018-9529.", "order": "29"}, {"title": "Conditions on diagnosis and accommodation delays for actuator fault recoverability", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5767472", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5767472", "pdfSize": "251KB"}, "displayText": "R. Hamdaoui, M. N. Abdelkrim, \"Conditions on diagnosis and accommodation delays for actuator fault recoverability\", <em>Systems Signals and Devices (SSD) 2011 8th International Multi-Conference on</em>, pp. 1-6, 2011.", "order": "30"}]}, "patentCitationCount": "1", "contentType": "periodicals", "patentCitations": [{"ipcClassList": "G06F0094400000", "pdfLink": "http://patentimages.storage.googleapis.com/pdfs/US8650547.pdf", "appNum": "12678142", "id": "08650547", "patentAbstract": "A method for debugging the program of operational software of an onboard system, including flagging the program by positioning flags along an execution path for dividing the aforementioned execution path into adjacent functional intervals; normal execution of the program; acquiring an execution condition of the program by flag condition vectors; when an error is detected, searching a faulty functional interval based on the flag condition vectors, reverse execution of the program in the aforementioned faulty functional interval, and determination and correction of the error.", "title": "Method for debugging operational software of a system onboard an aircraft and device for implementing the same", "patentNumber": "8650547", "filingDate": "12 September 2008", "assignees": ["AIRBUS OPERATIONS SAS"], "ipcClasses": ["G06F0094400000"], "grantDate": "11 February 2014", "inventors": "Randimbivololona, Famantanantsoa; Le Meur, Philippe; Fournier, Florent; Bregeon, Vincent", "patentLink": "http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=8650547.PN.&OS=PN/8650547", "pocClasses": ["717127000", "717124000", "717131000"], "pocClassList": "717127000, 717124000, 717131000", "order": "1"}], "lastupdate": "2016-11-15T06:57:08", "isEarlyAccess": false, "publisher": "IEEE", "title": "Software Reliability Analysis by Considering Fault Dependency and Debugging Time Lag", "nonIeeeCitationCount": "30", "publicationNumber": "24", "formulaStrippedArticleTitle": "Software Reliability Analysis by Considering Fault Dependency and Debugging Time Lag", "mediaPath": "/mediastore/IEEE/content/media/24/35614/1688079", "mlTime": "PT0.29995S", "ieeeCitationCount": "30"}}