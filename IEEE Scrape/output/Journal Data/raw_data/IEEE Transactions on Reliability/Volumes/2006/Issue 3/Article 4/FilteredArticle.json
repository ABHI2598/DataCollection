{"arnumber": "1688078", "details": {"title": "Generic Fault Tolerant Software Architecture Reasoning and Customization", "volume": "55", "keywords": [{"type": "IEEE Keywords", "kwd": ["Fault tolerance", "Software architecture", "Concurrent computing", "Fault tolerant systems", "Computer errors", "Sun", "Linear discriminant analysis", "Software safety", "Formal languages", "Software prototyping"]}, {"type": "INSPEC: Controlled Indexing", "kwd": ["XML", "formal verification", "safety-critical software", "software architecture", "software fault tolerance", "system recovery"]}, {"type": "INSPEC: Non-Controlled Indexing", "kwd": ["line direction agreement system", "generic fault tolerant software architecture", "GFTSA", "fault tolerant component concept", "error recovery mechanism", "safety critical distributed system", "reliability requirement", "Object-Z reasoning rules", "customization process", "XVCL", "XML-based variant configuration language", "LDAS"]}, {"type": "Author Keywords ", "kwd": ["software architecture", "Customization", "fault tolerance", "formal reasoning", "Object-Z"]}], "issue": "3", "link": "http://ieeexplore.ieee.org/servlet/opac?punumber=24", "authors": [{"affiliation": "Sch. of Comput., Nat. Univ. of Singapore", "bio": {"p": ["Ling Yuan is pursuing her Ph.D. at the Computer Science Department, School of Computing in the National University of Singapore. Her research interests mainly are reliability, formal method application in software architecture design, and fault tolerant mechanisms in distributed system."]}, "name": "L. Yuan"}, {"bio": {"p": ["Jin Song Dong is an Associate Professor & Assistant Dean (Graduate) at the Computer Science Department, School of Computing in the National University of Singapore. His research area involves real-time concurrent system specification, web environment for software design, formal methods and safety critical systems, object orientation, and language semantics."]}, "name": "J.S. Dong"}, {"bio": {"p": ["Jing Sun is a lecturer at the Department of Computer Science in the University of Auckland. His research interests are in the areas of software engineering, integrated formal methods, formal specification languages, real-time modeling, requirement analysis, specification animation, formal verification, model checking, and theorem proving."]}, "name": "J. Sun"}, {"bio": {"p": ["Hamid Abdul Basit is pursuing his Ph.D. at the Computer Science Department, School of Computing in the National University of Singapore. His research interests include reuse of software artifacts, analysis of software similarities, and tools to aid software maintenance."]}, "name": "H.A. Basit"}], "publisher": "IEEE", "doi": "10.1109/TR.2006.879605", "abstract": "This paper proposes a novel heterogeneous software architecture GFTSA (Generic Fault Tolerant Software Architecture) which can guide the development of safety critical distributed systems. GFTSA incorporates an idealized fault tolerant component concept, and coordinated error recovery mechanism in the early system design phase. It can be reused in the high level model design of specific safety critical distributed systems with reliability requirements. To provide precise common idioms &amp; patterns for the system designers, formal language Object-Z is used to specify GFTSA. Formal proofs based on Object-Z reasoning rules are constructed to demonstrate that the proposed GFTSA model can preserve significant fault tolerant properties. The inheritance &amp; instantiation mechanisms of Object-Z can contribute to the customization of the GFTSA formal model. By analyzing the customization process, we also present a template of GFTSA, expressed in x-frames using the XVCL (XML-based Variant Configuration Language) methodology to make the customization process more direct &amp; automatic. We use an LDAS (Line Direction Agreement System) case study to illustrate that GFTSA can guide the development of specific safety critical distributed systems"}, "references": [{"title": "Formalizing\nstyle to understand descriptions of software architecture", "context": [{"text": " Many researchers [1], [25] have used Z to formalize the state & computations of software architectures.", "sec": "sec2b", "part": "1"}], "order": "1", "links": {"acmLink": "http://dx.doi.org/10.1145/226241.226244", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref1", "text": "G. D. Abowd, R. Allen, D. Garlan, \"Formalizing\nstyle to understand descriptions of software architecture\", <em>Transactions on Software Engineering and Methodology</em>, vol. 4, no. 4, pp. 319-364, 1995.", "refType": "biblio"}, {"title": "A\nformal approach to software architectures", "context": [{"text": " Software architecture styles, such as pipe-and-filter [2], can only guide the development of distributed systems with cooperative concurrency.", "sec": "sec1", "part": "1"}, {"text": "GFTSA involves object-oriented organization [11], pipe-and-filter architecture [2], and the repository style [3].", "sec": "sec2a1", "part": "1"}, {"text": "In the pipe-and-filter architecture [2], filters represent computation entities, and pipes represent the communication channels. filters do not need to know the identity of their upstream & downstream neighbors in virtue of the pipe style communication.", "sec": "sec2a1", "part": "1"}], "order": "2", "id": "ref2", "text": "R. Allen, D. Garlan, \"A\nformal approach to software architectures\", <em>Proceedings of IFIP'92</em>, 1992.", "refType": "biblio"}, {"title": "Software process enactment in oikos", "context": [{"text": " Some other basic software architecture styles, such as repository style [3], can only guide the development of distributed systems with competitive concurrency.", "sec": "sec1", "part": "1"}, {"text": "GFTSA involves object-oriented organization [11], pipe-and-filter architecture [2], and the repository style [3].", "sec": "sec2a1", "part": "1"}, {"text": "The style that Objects compete for SharedResources derives from the repository style [3].", "sec": "sec2a1", "part": "1"}], "order": "3", "links": {"acmLink": "http://dx.doi.org/10.1145/99277.99294", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref3", "text": "V. Ambriola, P. Ciancarini, C. Montangero, \"Software process enactment in oikos\", <em>Proceedings of the Fourth ACM SIGSOFT</em>, pp. 183-192, 1990.", "refType": "biblio"}, {"title": "Error recovery in asynchronous system", "context": [{"text": " We need to use a coordinated error recovery mechanism [4], [9], [31], [22], and transaction semantics [18] to facilitate recovery from faults that affect both the computer system, and its environment.", "sec": "sec1", "part": "1"}, {"text": " The CoordinatingComponent uses exception graph [4] mechanism to resolve these concurrently raised exceptions into an unique global exception called universal exception which covers all the raised exceptions.", "sec": "sec2a2", "part": "1"}], "order": "4", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A framework for the provision of fault tolerance in asynchronous systems is introduced. The proposal generalizes the form of simple recovery facilities supported by nested atomic actions in which the exception mechanisms only permit backward error recovery. It allows the construction of systems using both forward and backward error recovery and thus allows the exploitation of the complementary benefits of the two schemes. Backward recovery, forward recovery, and normal processing activities can ...", "documentLink": "/document/6312984", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6312984", "pdfSize": "3551KB"}, "id": "ref4", "text": "R. Campbell, B. Randell, \"Error recovery in asynchronous system\", <em>IEEE Transactions on Software Engineering</em>, vol. SE-12, no. 8, pp. 826-881, 1986.", "refType": "biblio"}, {"title": "Exception handling and tolerance of software faults", "context": [{"text": " The exception context has a set of exception handlers [5], one of which is called when its corresponding exception is raised.", "sec": "sec2a2", "part": "1"}], "order": "5", "id": "ref5", "text": "F. Cristian, \"Exception handling and tolerance of software faults\", <em>Software Fault Tolerance</em>, pp. 81-107, 1994.", "refType": "biblio"}, {"title": "A Railway System, Coordination'97, Case Study Workshop Example", "context": [{"text": " A case study LDAS (Line Direction Agreement System) [6] is presented to illustrate the customization process.", "sec": "sec1", "part": "1"}, {"text": "The safety critical distributed system LDAS (Line Direction Agreement System) [6] is designed to control the line direction to prevent the head-on train crashes on the line.", "sec": "sec4a", "part": "1"}], "order": "6", "id": "ref6", "text": "D. Bjoner, C. W. George, B. Stig.Hansen, H. Laustrup, S. Prehn, <em>A Railway System Coordination'97 Case Study Workshop Example</em>, 1997.", "refType": "biblio"}, {"title": "Describing evolving dependable systems using\nco-operative software architecture", "context": [{"text": " Existing work in this area mostly emphasizes the creation of fault tolerance mechanisms [13], [21]; descriptions of software architectures with respect to their reliability properties [24], [30]; and the evolution of component-based software architectures by adding or changing components to guarantee reliability properties [7], [10].", "sec": "sec1", "part": "1"}], "order": "7", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The paper describes an architectural approach that facilitates the modelling and analysis of dependable systems that are built from untrustworthy components whose designs, we assume, cannot be changed. The approach is based on the definition of an architectural style in which connectors are considered as first class entities, which embody the description of collaborative behaviour between components. This style is shown to be particularly suitable for describing system components that have to ev...", "documentLink": "/document/972745", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=972745", "pdfSize": "112KB"}, "id": "ref7", "text": "R. de Lemos, \"Describing evolving dependable systems using\nco-operative software architecture\", <em>Proceedings of the IEEE International Conference on Software Maintenance</em>, pp. 320-329, 2001.", "refType": "biblio"}, {"title": "Formal Object Oriented Specification Using Object-Z", "context": [{"text": " Object-Z [8], [27] is an object oriented structure that can describe internal state transitions, and interface communications, of software components.", "sec": "sec1", "part": "1"}, {"text": " Object-Z [8], [27] is an extension of Z to accommodate the object-oriented style.", "sec": "sec2b", "part": "1"}], "order": "8", "id": "ref8", "text": "R. Duke, G. Rose, Formal Object Oriented Specification Using Object-Z, 2000, Macmillan.", "refType": "biblio"}, {"title": "Transaction Processing: Concepts and Techniques", "context": [{"text": " We need to use a coordinated error recovery mechanism [4], [9], [31], [22], and transaction semantics [18] to facilitate recovery from faults that affect both the computer system, and its environment.", "sec": "sec1", "part": "1"}, {"text": " The Objects access Shared Resources by request because the SharedResource need to know the identity of Objects to guarantee the transaction semantics [9].", "sec": "sec2a1", "part": "1"}], "order": "9", "id": "ref9", "text": "J. Gary, A. Reuter, Transaction Processing: Concepts and Techniques, 1993, Morgan Kaufmann.", "refType": "biblio"}, {"title": "An idealized fault-tolerant architectural component", "context": [{"text": " Existing work in this area mostly emphasizes the creation of fault tolerance mechanisms [13], [21]; descriptions of software architectures with respect to their reliability properties [24], [30]; and the evolution of component-based software architectures by adding or changing components to guarantee reliability properties [7], [10].", "sec": "sec1", "part": "1"}], "order": "10", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A system's structure enables it to generate its intended behavior from its components' behavior. A well-structured system simplifies relationships among components, which can increase dependability. With software systems, the architecture is an abstraction of the structure. Architectural reasoning about dependability has become increasingly important because emerging applications are increasingly complex. We've developed an architectural approach for effectively representing and analyzing fault-...", "documentLink": "/document/1605182", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1605182", "pdfSize": "138KB"}, "id": "ref10", "text": "P. Guerra, C. Rubira, R. de Lemos, \"An idealized fault-tolerant architectural component\", <em>Proceeding of the 24th International Conference on Software Engineering-Workshop on Architecting Dependable Systems</em>, 2002.", "refType": "biblio"}, {"title": "Rpde: a framework for integrating tool fragments", "context": [{"text": "GFTSA involves object-oriented organization [11], pipe-and-filter architecture [2], and the repository style [3].", "sec": "sec2a1", "part": "1"}, {"text": "The Object derives from the object-oriented organization [11] to accommodate the distributed environment.", "sec": "sec2a1", "part": "1"}], "order": "11", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Monolithic tools that can't be extended to handle new kinds of input, not just new function, are hampering development. This model seeks to change that.", "documentLink": "/document/1695858", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1695858", "pdfSize": "11566KB"}, "id": "ref11", "text": "W. Harrison, \"Rpde: a framework for integrating tool fragments\", <em>IEEE Software</em>, vol. SE-4, no. 6, 1987.", "refType": "biblio"}, {"title": "Communicating sequential processes", "context": [{"text": " Cooperative concurrency means that concurrent activities cooperate & communicate with each other [12].", "sec": "sec1", "part": "1"}], "order": "12", "links": {"acmLink": "http://dx.doi.org/10.1145/359576.359585", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref12", "text": "C. A. R. Hoare, \"Communicating sequential processes\", <em>CACM</em>, vol. 21, no. 8, pp. 666-677, 1978.", "refType": "biblio"}, {"title": "Architecture-based exception handling", "context": [{"text": " Existing work in this area mostly emphasizes the creation of fault tolerance mechanisms [13], [21]; descriptions of software architectures with respect to their reliability properties [24], [30]; and the evolution of component-based software architectures by adding or changing components to guarantee reliability properties [7], [10].", "sec": "sec1", "part": "1"}], "order": "13", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Architecture-based development environments are becoming an effective solution towards the construction of robust distributed systems. Through the abstract description of complex software systems configurations in terms of the interconnection of software elements at the interface level, software reuse and evolution get promoted. In addition, as shown by research results from the software architecture domain, it becomes feasible to provide formal notations for the precise description of configura...", "documentLink": "/document/927253", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=927253", "pdfSize": "183KB"}, "id": "ref13", "text": "V. Issarny, J. P. Banatre, \"Architecture-based exception handling\", <em>Proceedings of the 34th Annual Hawaii International Conference on System Sciences IEEE</em>, 2001.", "refType": "biblio"}, {"title": "Eliminating redundancies with a &ldquo;composition with\nadaption&rdquo; meta-programming technique", "context": [{"text": " The XVCL technique (XML-based Variant Configuration Language) [14] is used to customize the formal template of GFTSA to formal models of specific systems automatically.", "sec": "sec1", "part": "1"}, {"text": "XVCL (XML-based Variant Configuration Language) [15], [14], [28] is a meta-programming technique developed to facilitate building flexible, adaptable, and reusable software artifacts.", "sec": "sec3", "part": "1"}], "order": "14", "links": {"acmLink": "http://dx.doi.org/10.1145/940071.940104", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref14", "text": "S. Jarzabek, S. B. Li, \"Eliminating redundancies with a &ldquo;composition with\nadaption&rdquo; meta-programming technique\", <em>European Software Engineering Conference and ACM SIGSOFT Symposium on the Foundation of Software Engineering</em>, pp. 237-246, 2003-September.", "refType": "biblio"}, {"title": "Xml-based method and tool for handling variant requirements\nin domain models", "context": [{"text": "XVCL (XML-based Variant Configuration Language) [15], [14], [28] is a meta-programming technique developed to facilitate building flexible, adaptable, and reusable software artifacts.", "sec": "sec3", "part": "1"}], "order": "15", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A domain model describes common and variant requirements for a system family. UML notations used in requirements analysis and software modeling can be extended with variation points to cater for variant requirements. However, UML models for a large single system are already complicated enough. With variants UML domain models soon become too complicated to be useful. The main reasons are the explosion of possible variant combinations, complex dependencies among variants and inability to trace var...", "documentLink": "/document/948556", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=948556", "pdfSize": "802KB"}, "id": "ref15", "text": "S. Jarzabek, H. Zhang, \"Xml-based method and tool for handling variant requirements\nin domain models\", <em>5th IEEE International Symposium on Requirements Engineering</em>, pp. 166-173, 2001-August.", "refType": "biblio"}, {"title": "Fault Tolerance: Principles and Practice", "context": [{"text": "Each Object has its own exception context [31] to deal with the exceptions occurring in the execution process, similar to the concept of an idealized fault tolerant component [16].", "sec": "sec2a2", "part": "1"}], "order": "16", "links": {"crossRefLink": "http://dx.doi.org/10.1007/978-3-7091-8990-0", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref16", "text": "P. A. Lee, T. Anderson, Fault Tolerance: Principles and Practice, 1990, Prentice Hall.", "refType": "biblio"}, {"title": "An event based architecture definition language", "context": [{"text": " The formalisms of an architecture style can be used to provide precise, explicit, common idioms & patterns to the software system designers [17], [19], [25].", "sec": "sec1", "part": "1"}], "order": "17", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper discusses general requirements for architecture definition languages, and describes the syntax and semantics of the subset of the Rapide language that is designed to satisfy these requirements. Rapide is a concurrent event-based simulation language for defining and simulating the behavior of system architectures. Rapide is intended for modelling the architectures of concurrent and distributed systems, both hardware and software in order to represent the behavior of distributed systems...", "documentLink": "/document/464548", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=464548", "pdfSize": "1787KB"}, "id": "ref17", "text": "D. Luckham, J. Vera, \"An event based architecture definition language\", <em>IEEE Transactions on Software Engineering</em>, vol. 21, 1995.", "refType": "biblio"}, {"title": "Atomic Transactions", "context": [{"text": " We need to use a coordinated error recovery mechanism [4], [9], [31], [22], and transaction semantics [18] to facilitate recovery from faults that affect both the computer system, and its environment.", "sec": "sec1", "part": "1"}], "order": "18", "id": "ref18", "text": "N. A. Lynch, M. Merrit, W. E. Wehil, A. Fekete, Atomic Transactions, 1993, Morgan Kaufmann.", "refType": "biblio"}, {"title": "Specifying distributed software\narchitecture", "context": [{"text": " The formalisms of an architecture style can be used to provide precise, explicit, common idioms & patterns to the software system designers [17], [19], [25].", "sec": "sec1", "part": "1"}], "order": "19", "id": "ref19", "text": "J. Magee, N. Dulay, S. Eisenbach, J. Kramer, \"Specifying distributed software\narchitecture\", <em>Proceedings of 5th European Software Engineering Conference</em>, 1994.", "refType": "biblio"}, {"title": "Formal verification for fault-tolerant architecture: Prolegomena\nto the design of pvs", "context": [{"text": " PVS (Prototype Verification System) [20] is a verification system developed at SRI.", "sec": "sec5", "part": "1"}], "order": "20", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "PVS is the most recent in a series of verification systems developed at SRI. Its design was strongly influenced, and later refined, by our experiences in developing formal specifications and mechanically checked verifications for the fault-tolerant architecture, algorithms, and implementations of a model \"reliable computing platform\" (RCP) for life-critical digital flight-control applications, and by a collaborative project to formally verify the design of a commercial avionics processor called ...", "documentLink": "/document/345827", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=345827", "pdfSize": "2518KB"}, "id": "ref20", "text": "S. Owre, J. Rushby, \"Formal verification for fault-tolerant architecture: Prolegomena\nto the design of pvs\", <em>IEEE Transactions on Software Engineering</em>, vol. SE-21, no. 2, pp. 107-125, 1995.", "refType": "biblio"}, {"title": "Increasing\nthe confidence in off-the-shelf components: a software connector-based approach", "context": [{"text": " Existing work in this area mostly emphasizes the creation of fault tolerance mechanisms [13], [21]; descriptions of software architectures with respect to their reliability properties [24], [30]; and the evolution of component-based software architectures by adding or changing components to guarantee reliability properties [7], [10].", "sec": "sec1", "part": "1"}], "order": "21", "links": {"acmLink": "http://dx.doi.org/10.1145/375212.375228", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref21", "text": "M. Rakic, N. Medvidovic, \"Increasing\nthe confidence in off-the-shelf components: a software connector-based approach\", <em>Proceedings of the 2001 Symposium on Software Reusability</em>, pp. 11-18, 2001-May.", "refType": "biblio"}, {"title": "Coordinated atomic actions: from concept to implementation", "context": [{"text": " In practice, different kinds of concurrency might co-exist in a system, which thus would require a general supporting framework for controlling & coordinating those concurrent activities [22].", "sec": "sec1", "part": "1"}, {"text": " We need to use a coordinated error recovery mechanism [4], [9], [31], [22], and transaction semantics [18] to facilitate recovery from faults that affect both the computer system, and its environment.", "sec": "sec1", "part": "1"}], "order": "22", "id": "ref22", "text": "B. Randell, A. Romanovsky, R. Stroud, J. Xu, A. F. Zorzo, \"Coordinated atomic actions: from concept to implementation\", <em>Special Issue of IEEE Transactions on Computers</em>, 1997.", "refType": "biblio"}, {"title": "Formal verification of algorithms for critical\nsystems", "context": [{"text": "Reasoning about the formal model of the system enables the designer to gain confidence in the correctness of the system development [23].", "sec": "sec2c", "part": "1"}], "order": "23", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The authors describe their experience with formal, machine-checked verification of algorithms for critical applications, concentrating on a Byzantine fault-tolerant algorithm for synchronizing the clocks in the replicated computers of a digital flight control system. The problems encountered in unsynchronized systems and the necessity, and criticality, of fault-tolerant synchronization are described. An overview of one such algorithm and of the arguments for its correctness are given. A verifica...", "documentLink": "/document/210304", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=210304", "pdfSize": "1304KB"}, "id": "ref23", "text": "J. M. Rushby, F. von Henke, \"Formal verification of algorithms for critical\nsystems\", <em>IEEE Transactions on Software Engineering</em>, vol. SE-19, no. 1, pp. 13-23, 1993.", "refType": "biblio"}, {"title": "Fault Tolerant Software Architectures", "context": [{"text": " Existing work in this area mostly emphasizes the creation of fault tolerance mechanisms [13], [21]; descriptions of software architectures with respect to their reliability properties [24], [30]; and the evolution of component-based software architectures by adding or changing components to guarantee reliability properties [7], [10].", "sec": "sec1", "part": "1"}], "order": "24", "id": "ref24", "text": "T. Saridakis, V. Issarny, <em>Fault Tolerant Software Architectures</em>, 1999.", "refType": "biblio"}, {"title": "Software Architecture: Perspectives on an Emerging Discipline", "context": [{"text": " The formalisms of an architecture style can be used to provide precise, explicit, common idioms & patterns to the software system designers [17], [19], [25].", "sec": "sec1", "part": "1"}, {"text": " Many researchers [1], [25] have used Z to formalize the state & computations of software architectures.", "sec": "sec2b", "part": "1"}], "order": "25", "id": "ref25", "text": "M. Shaw, D. Garlan, Software Architecture: Perspectives on an Emerging Discipline, 1996, Prentice-Hall.", "refType": "biblio"}, {"title": "Extending <ref_formula><tex>$\\omega$</tex></ref_formula> for\nobject-z", "context": [{"text": " For the formal verification of the different properties of the system, we have used an extension to Object-Z as introduced in [26].", "sec": "sec2b", "part": "1"}, {"text": " The process of reasoning needs to use formal reasoning rules based on the semantics of Object-Z [26] to prove that fault tolerant properties can be derived from the formal model of GFTSA.", "sec": "sec2c", "part": "1"}], "order": "26", "links": {"crossRefLink": "http://dx.doi.org/10.1007/3-540-60271-2_126", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref26", "text": "G. Smith, \"Extending <ref_formula><tex>\\$omega\\$</tex></ref_formula> for\nobject-z\", <em>9th International Conference of Z Users Lecture Notes in Computer Science</em>, vol. 967, 1995.", "refType": "biblio"}, {"title": "The Object-Z Specification Language", "context": [{"text": " Object-Z [8], [27] is an object oriented structure that can describe internal state transitions, and interface communications, of software components.", "sec": "sec1", "part": "1"}, {"text": " Object-Z [8], [27] is an extension of Z to accommodate the object-oriented style.", "sec": "sec2b", "part": "1"}, {"text": " For full description of Object-Z notations, please refer to [27].", "sec": "sec2b", "part": "1"}], "order": "27", "links": {"crossRefLink": "http://dx.doi.org/10.1007/978-1-4615-5265-9", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref27", "text": "G. Smith, The Object-Z Specification Language, 2000, Kluwer Academic Publishers.", "refType": "biblio"}, {"title": "Xvcl: A tutorial", "context": [{"text": "XVCL (XML-based Variant Configuration Language) [15], [14], [28] is a meta-programming technique developed to facilitate building flexible, adaptable, and reusable software artifacts.", "sec": "sec3", "part": "1"}], "order": "28", "id": "ref28", "text": "M. S. Soe, H. Zhang, S. Jarzabek, \"Xvcl: A tutorial\", <em>Proc. of 14th Int. Conf. on Software Engineering and Knowledge Engineering SEKE'02</em>, pp. 341-349, July 2002, ACM Press.", "refType": "biblio"}, {"title": "The Z notation: A Reference Manual", "context": [{"text": "Z [29] is a formal language based on set theory & predicate logic, which can help describe internal state transitions, and interface communications of a system by the state & operation schema definitions.", "sec": "sec2b", "part": "1"}], "order": "29", "id": "ref29", "text": "J.M. Spivey, <em>The Z notation: A Reference Manual</em>, 1989, Prentice-Hall.", "refType": "biblio"}, {"title": "Provably dependable software architecture", "context": [{"text": " Existing work in this area mostly emphasizes the creation of fault tolerance mechanisms [13], [21]; descriptions of software architectures with respect to their reliability properties [24], [30]; and the evolution of component-based software architectures by adding or changing components to guarantee reliability properties [7], [10].", "sec": "sec1", "part": "1"}], "order": "30", "links": {"acmLink": "http://dx.doi.org/10.1145/288408.288442", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref30", "text": "V. Stavridou, A. Riemenschneider, \"Provably dependable software architecture\", <em>Proceedings of the Third ACM SIGPLAN International Software Architecture Workshop</em>, 1998.", "refType": "biblio"}, {"title": "Fault\ntolerance in concurrent object-oriented software through coordinated error\nrecovery", "context": [{"text": " We need to use a coordinated error recovery mechanism [4], [9], [31], [22], and transaction semantics [18] to facilitate recovery from faults that affect both the computer system, and its environment.", "sec": "sec1", "part": "1"}, {"text": "Each Object has its own exception context [31] to deal with the exceptions occurring in the execution process, similar to the concept of an idealized fault tolerant component [16].", "sec": "sec2a2", "part": "1"}], "order": "31", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Presents a scheme for coordinated error recovery between multiple interacting objects in a concurrent object-oriented system. A conceptual framework for fault tolerance is established based on a general object concurrency model that is supported by most concurrent object-oriented languages and systems. This framework integrates two complementary concepts-conversations and transactions. Conversations (associated with cooperative exception handling) are used to provide coordinated error recovery b...", "documentLink": "/document/466948", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=466948", "pdfSize": "1185KB"}, "id": "ref31", "text": "J. Xu, B. Randell, A. Romanovasky, C. Rubira, R. Stroud, Z. Wu, \"Fault\ntolerance in concurrent object-oriented software through coordinated error\nrecovery\", <em>Proc. 25th Int. Symp. on Fault-Tolerant Computing</em>, pp. 499-508, 1995-June.", "refType": "biblio"}], "citations": {"paperCitations": {"nonIeee": [{"title": "From verified model to executable program: the PAT approach", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s11334-015-0269-z", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Huiquan Zhu, Jing Sun, Jin Song Dong, Shang-Wei Lin, \"From verified model to executable program: the PAT approach\", <em>Innovations in Systems and Software Engineering</em>, pp. , 2015, ISSN 1614-5046.", "order": "1"}, {"title": "Formal Modeling and Verification of Multi-agent System Architecture", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.aasri.2013.10.068", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Ling Yuan, Ping Fan, \"Formal Modeling and Verification of Multi-agent System Architecture\", <em>AASRI Procedia</em>, vol. 5, pp. 126, 2013, ISSN 22126716.", "order": "2"}, {"title": "Internetware", "links": {"crossRefLink": "http://dx.doi.org/10.1007/978-981-10-2546-4_4", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Hong Mei, Jian L\u00fc, pp. 71, 2016, ISBN 978-981-10-2545-7.", "order": "3"}, {"title": "Software architecture-based analysis and testing: a look into achievements and future challenges", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s00607-013-0338-9", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Antonia Bertolino, Paola Inverardi, Henry Muccini, \"Software architecture-based analysis and testing: a look into achievements and future challenges\", <em>Computing</em>, pp. , 2013, ISSN 0010-485X.", "order": "4"}, {"title": "A software architecture centric self-adaptation approach for Internetware", "links": {"crossRefLink": "http://dx.doi.org/10.1007/s11432-008-0052-y", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Hong Mei, Gang Huang, Ling Lan, JunGuo Li, \"A software architecture centric self-adaptation approach for Internetware\", <em>Science in China Series F: Information Sciences</em>, vol. 51, pp. 722, 2008, ISSN 1009-2757.", "order": "5"}, {"title": "Lecture Notes in Computer Science", "links": {"crossRefLink": "http://dx.doi.org/10.1007/978-3-642-02414-6_5", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Junguo Li, Xiangping Chen, Gang Huang, Hong Mei, Franck Chauvel, <em>Lecture Notes in Computer Science</em>, vol. 5582, pp. 69, 2009, ISSN 0302-9743, ISBN 978-3-642-02413-9.", "order": "6"}], "ieee": [{"title": "Context Awareness Systems Design and Reasoning", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4463733", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4463733", "pdfSize": "471KB"}, "displayText": "Jin Song Dong, Yuzhang Feng, Jing Sun, Jun Sun, \"Context Awareness Systems Design and Reasoning\", <em>Leveraging Applications of Formal Methods Verification and Validation 2006. ISoLA 2006. Second International Symposium on</em>, pp. 335-340, 2006.", "order": "1"}, {"title": "Fault-Tolerant Online Backup Service: Formal Modeling and Reasoning", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5197363", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5197363", "pdfSize": "486KB"}, "displayText": "Hua Wang, Ke Zhou, Ling Yuan, \"Fault-Tolerant Online Backup Service: Formal Modeling and Reasoning\", <em>Networking Architecture and Storage 2009. NAS 2009. IEEE International Conference on</em>, pp. 452-460, 2009.", "order": "2"}, {"title": "Web Service Personalized Quality of Service Prediction via Reputation-Based Matrix Factorization", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/7202924", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=7202924", "pdfSize": "1214KB"}, "displayText": "Jianlong Xu, Zibin Zheng, Michael R. Lyu, \"Web Service Personalized Quality of Service Prediction via Reputation-Based Matrix Factorization\", <em>Reliability IEEE Transactions on</em>, vol. 65, pp. 28-37, 2016, ISSN 0018-9529.", "order": "3"}]}, "patentCitationCount": "0", "contentType": "periodicals", "isEarlyAccess": false, "lastupdate": "2016-11-14T18:12:02", "publisher": "IEEE", "title": "Generic Fault Tolerant Software Architecture Reasoning and Customization", "nonIeeeCitationCount": "6", "publicationNumber": "24", "formulaStrippedArticleTitle": "Generic Fault Tolerant Software Architecture Reasoning and Customization", "mediaPath": "/mediastore/IEEE/content/media/24/35614/1688078", "mlTime": "PT0.12487S", "ieeeCitationCount": "3"}}