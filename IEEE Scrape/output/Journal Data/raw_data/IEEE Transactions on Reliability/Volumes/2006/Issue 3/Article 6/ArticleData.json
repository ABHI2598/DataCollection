{"details": {"issn": [{"value": "0018-9529", "format": "Print ISSN"}, {"value": "1558-1721", "format": "Online ISSN"}], "htmlAbstractLink": "/document/1688080/", "pubLink": "/xpl/RecentIssue.jsp?punumber=24", "title": "Evaluation of Software-Implemented Fault-Tolerance (SIFT) Approach in Gracefully Degradable Multi-Computer Systems", "doi": "10.1109/TR.2006.879663", "isSMPTE": false, "xplore-pub-id": "24", "articleNumber": "1688080", "endPage": "457", "isPromo": false, "mediaPath": "/mediastore/IEEE/content/media/24/35614/1688080", "isNotDynamicOrStatic": true, "isJournal": true, "ephemeraFlag": "false", "isNumber": "35614", "persistentLink": "http://ieeexplore.ieee.org/servlet/opac?punumber=24", "startPage": "451", "standardTitle": "Evaluation of Software-Implemented Fault-Tolerance (SIFT) Approach in Gracefully Degradable Multi-Computer Systems", "publicationDate": "Sept. 2006", "pdfPath": "/iel5/24/35614/01688080.pdf", "mlTime": "PT0.087504S", "publicationNumber": "24", "copyrightYear": "2006", "isOpenAccess": false, "isCustomDenial": false, "conferenceDate": " ", "isBook": false, "contentType": "periodicals", "openAccessFlag": "no", "displayPublicationTitle": "IEEE Transactions on Reliability", "authors": [{"bio": {"p": ["Dimiter R. Avresky has published more then 115 papers, including IEEE Transactions journals papers, in the areas of: scalable high-speed networks (performance analysis, network control, routing, fault tolerance), protocol testing and software verification, parallel computers, parallel programming, computer architecture, testing and fault tolerance, and functional programming. Dr. Avresky has been a guest editor of four IEEE journals (IEEE Transactions on Computers 02/2002, IEEE Transactions on Parallel and Distributed Systems 02/2001, IEEE Micro 2001, and IEEE Micro 1998), and The Journal of Supercomputing, 2000, Kluwer Academic Publishers in USA. He has been funded by the National Science Foundation, Hewlett Packard, Compaq, Tandem, NASA, Motorola Research Labs, Bell Labs, and others institutions in the USA. Dr. Dimiter Avresky has supervised 11 Ph.D students. In addition, seven books and five book chapters have been published: \u201cDependable Network Computing, Kluwer Academic Publishers, 2000, USA,\u201d \u201cFault-Tolerant Parallel and Distributed Systems, Kluwer Academic Publishers, December 1997, USA,\u201d \u201cFault-Tolerant Parallel and Distributed Systems, Computer Society Press, USA, December 1995,\u201d \u201cHardware and Software Fault-Tolerance in Parallel Computing Systems, Ellis Horwood, Simon&Schuster International Group, Chichester, England, August 1992.\u201d Dr. D. Avresky is a founder and a Chairman of The IEEE International Symposium on Network Computing and Applications (NCA), Cambridge, MA, (2002, 2003, 2004, 2005 and 2006.) General Chair of The 2005 IEEE International Conference on Cluster Computing, 27\u201330 September 2005, Boston MA, USA. Also served as a reviewer for The IEEE Transactions Computers, IEEE Transactions on Parallel and Distributed Systems and other refereed journals."]}, "affiliation": "Dept. of Electr. & Comput. Eng., Northeastern Univ., Boston, MA", "name": "D.R. Avresky"}, {"bio": {"p": ["Sean J. Geoghegan graduated with his Ph.D. in Computer Science from Texas A&M University in May 1998 where his subject emphasis was self checking software components for single and multiple processor systems. At this time, he also served as the director of development for Powerware Solutions, a start-up company developing energy management tools for the municipal water utility industry. He later worked at O.I. Analytical developing quality control tools for the beverage industry. Currently, Dr. Geoghegan is an Assistant Professor in the Computer Science Department at the University of Arkansas at Little Rock, where he continues his research, and partners with local industries to develop various custom software tools. He is member of IEEE Computer Society."]}, "name": "S.J. Geoghegan"}, {"bio": {"p": ["Yavuz Varoglu received his Ph.D. in electrical and computer engineering from the North Eastern University, Boston, USA, in 2005. Dr. Varoglu has over 10 years of industrial experience in software engineering. His research interests include network fault-tolerance and reliability, partition tolerance, and overlay networks."]}, "name": "Y. Varoglu"}], "isEphemera": false, "isEarlyAccess": false, "lastupdate": "2016-11-14T13:00:36", "abstract": "This paper presents an analytical method for evaluating the reliability improvement for any size of multi-computer system based on Software-Implemented Fault-Tolerance (SIFT). The method is based on the equivalent failure rate Gamma, the single node failure rate lambda, the number of nodes in the system, N, the repair rate mu, the fault coverage factor c, the reconfiguration rate delta, and the percentage of blocking faults b<sub>1</sub> and b<sub>2</sub>. The impact of these parameters on the reliability improvement has been evaluated for a gracefully degradable multi-computer system using our proposed analytical technique based on Markov chains. To validate our approach, we used the SIFT method which implements error detection at the node level, combined with a fast reconfiguration algorithm for avoiding faulty nodes. It is worth noting that the proposed method is applicable to any multi-computer systems' topology. The evaluation work presented in this paper focuses on the combination of analytical and experimental approaches, and more precisely on Markov chains. The SIFT method has been successfully implemented for a multi-computer system, nCube. The time overhead (reconfiguration &amp; recomputation time) incurred by the injected fault, and the fault coverage factor c, are experimentally evaluated by means of a parallel version of the Software Object-Oriented Fault-Injection Tool (nSOFIT). The implemented SIFT approach can be used for real-time applications, when the time constraints should be met despite failures in the gracefully degradable multi-computer system", "subType": "IEEE IEEE Transaction", "sections": {"multimedia": "false", "abstract": "true", "footnotes": "false", "disclaimer": "false", "keywords": "true", "citedby": "true", "references": "true", "figures": "true", "authors": "true"}, "copyrightOwner": "IEEE", "isStandard": false, "articleId": "1688080", "xplore-issue": "35614", "publisher": "IEEE", "issueLink": "/xpl/tocresult.jsp?isnumber=35614", "isACM": false, "allowComments": false, "isStaticHtml": false, "rightsLink": "http://s100.copyright.com/AppDispatchServlet?publisherName=ieee&publication=0018-9529&title=Evaluation+of+Software-Implemented+Fault-Tolerance+%28SIFT%29+Approach+in+Gracefully+Degradable+Multi-Computer+Systems&isbn=&publicationDate=Sept.+2006&author=D.R.+Avresky&ContentID=10.1109/TR.2006.879663&orderBeanReset=true&startPage=451&endPage=457&volumeNum=55&issueNum=3", "citationCount": "4", "keywords": [{"kwd": ["Fault tolerant systems", "Degradation", "Object oriented modeling", "Software tools", "Central Processing Unit", "Operating systems", "Upper bound", "Fault detection", "Topology", "Real time systems"], "type": "IEEE Keywords"}, {"kwd": ["system recovery", "error detection", "Markov processes", "object-oriented programming", "real-time systems", "software fault tolerance"], "type": "INSPEC: Controlled Indexing"}, {"kwd": ["real-time application", "software-implemented fault-tolerance", "SIFT method", "multi-computer system", "Markov chains", "error detection", "fast reconfiguration algorithm", "software object-oriented fault-injection tool"], "type": "INSPEC: Non-Controlled Indexing"}, {"kwd": ["reliability improvement", "Fault tolerance", "graceful degradation", "Markov chain", "mean time to failure", "multi-computers", "reconfiguration"], "type": "Author Keywords "}], "issue": "3", "chronOrPublicationDate": "Sept. 2006", "isFreeDocument": false, "userInfo": {"subscribedContent": false, "fileCabinetUser": false, "showGet802Link": false, "member": false, "individual": false, "showPatentCitations": true, "showOpenUrlLink": false, "institute": false, "guest": false, "fileCabinetContent": false}, "formulaStrippedArticleTitle": "Evaluation of Software-Implemented Fault-Tolerance (SIFT) Approach in Gracefully Degradable Multi-Computer Systems", "publicationTitle": "IEEE Transactions on Reliability", "isConference": false, "isDynamicHtml": false, "volume": "55", "accessionNumber": "9091688"}, "citations": {"mediaPath": "/mediastore/IEEE/content/media/24/35614/1688080", "publisher": "IEEE", "patentCitationCount": "0", "publicationNumber": "24", "contentType": "periodicals", "formulaStrippedArticleTitle": "Evaluation of Software-Implemented Fault-Tolerance (SIFT) Approach in Gracefully Degradable Multi-Computer Systems", "isEarlyAccess": false, "paperCitations": {"ieee": [{"title": "Cloud-Niagara: A high availability and low overhead fault tolerance middleware for the cloud", "displayText": "Asif Imran, Alim Ul Gias, Rayhanur Rahman, Amit Seal, Tajkia Rahman, Farhan Ishraque, Kazi Sakib, \"Cloud-Niagara: A high availability and low overhead fault tolerance middleware for the cloud\", <em>Computer and Information Technology (ICCIT) 2013 16th International Conference on</em>, pp. 271-276, 2014.", "order": "1", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6997344", "pdfSize": "1270KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6997344"}}, {"title": "Optimal Model-Based Policies for Component Migration of Mobile Cloud Services", "displayText": "Rene Gabner, Hans-Peter Schwefel, Karin Anna Hummel, Gunter Haring, \"Optimal Model-Based Policies for Component Migration of Mobile Cloud Services\", <em>Network Computing and Applications (NCA) 2011 10th IEEE International Symposium on</em>, pp. 195-202, 2011.", "order": "2", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6038602", "pdfSize": "812KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6038602"}}, {"title": "Coverage influence on the dependability of PLC architectures", "displayText": "E. I. Gergely, H. Madsen, L. Coroiu, Fl. Popentiu-Vladicescu, \"Coverage influence on the dependability of PLC architectures\", <em>Soft Computing Applications (SOFA) 2010 4th International Workshop on</em>, pp. 27-32, 2010.", "order": "3", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5565630", "pdfSize": "198KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5565630"}}, {"title": "Efficient and Concurrent Reliable Realization of the Secure Cryptographic SHA-3 Algorithm", "displayText": "Siavash Bayat-Sarmadi, Mehran Mozaffari-Kermani, Arash Reyhani-Masoleh, \"Efficient and Concurrent Reliable Realization of the Secure Cryptographic SHA-3 Algorithm\", <em>Computer-Aided Design of Integrated Circuits and Systems IEEE Transactions on</em>, vol. 33, pp. 1105-1109, 2014, ISSN 0278-0070.", "order": "4", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6835288", "pdfSize": "1717KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6835288"}}]}, "mlTime": "PT0.057147S", "title": "Evaluation of Software-Implemented Fault-Tolerance (SIFT) Approach in Gracefully Degradable Multi-Computer Systems", "lastupdate": "2016-11-14T13:00:36", "ieeeCitationCount": "4", "nonIeeeCitationCount": "0"}, "references": [{"id": "ref1", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=755820", "pdfSize": "279KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The problem of tolerating faulty nodes in hypercubes has been studied by many researchers either by using spares or by reconfiguration. Algorithms for tolerating faulty nodes and links in hypercubes are presented. The algorithms are based on using general spanning trees (GST), complete unbalanced spanning trees (CUST), and balanced spanning trees (BST) for reconfiguring the hypercube to avoid faulty nodes and links. The algorithms contain two phases: the first phase involves the construction of ...", "documentLink": "/document/755820"}, "context": [{"sec": "sec2a1", "part": "1", "text": " These blocking faults were discussed in [1]."}, {"sec": "sec3", "part": "1", "text": " A balanced Spanning Tree (BST) was used in [1] for embedding any tree-based algorithm in hypercubes."}, {"sec": "sec3", "part": "1", "text": " The second experiment involved a 16-node BST in which \\$v_{f}=7\\$, \\$v_{c}=15\\$, \\$v_{p}=3\\$, and \\$v_{new}=11\\$, where \\$v_{f}\\$, \\$v_{c}\\$, \\$v_{p}\\$, and \\$v_{new}\\$ are defined in [1], [8]."}], "title": "Embedding and reconfiguration of Spanning\ntrees in faulty Hypercube", "order": "1", "text": "D. R. Avresky, \"Embedding and reconfiguration of Spanning\ntrees in faulty Hypercube\", <em>IEEE Transaction on Parallel and Distributed Systems</em>, vol. 10, no. 3, pp. 211-222, March 1999."}, {"id": "ref2", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=654406", "pdfSize": "130KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/654406"}, "context": [{"sec": "sec1", "part": "1", "text": " The software-based fault-injection tools are widely used for validating the error-detection software and mechanisms [2], [5], [7]."}, {"sec": "sec3", "part": "1", "text": " The time overhead (reconfiguration and recomputation time) incurred by the injected fault, and the fault coverage factor \\$c\\$, is experimentally evaluated by means of a parallel version of the Software Object-Oriented Fault-Injection Tool nSOFIT [2]."}, {"sec": "sec3", "part": "1", "text": " The tool (nSOFIT) [2] is designed to evaluate the coverage factor \\$c\\$ of the implemented error-detection technique by software-based fault injection in a computer system, while the user application is executing."}], "title": "A software-based fault injecton tool", "order": "2", "text": "D. R. Avresky, S. J. Geoghegan, P. K. Tapadiya, \"A software-based fault injecton tool\", <em>International Journal of Computer Systems Science and Engineering</em>, vol. 13, no. 6, pp. 125-135, Nov. 1998."}, {"id": "ref3", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=558838", "pdfSize": "1031KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Proposes a formal approach for adding fault detection to software. An assertion-based formalism is used to represent algorithm specifications. This representation is then used to generate a flowgraph or decision-to-decision graph (ddgraph), which is used to construct an execution path tree. The information gained from this algorithm representation is used to aid in the design of software-based fault tolerance techniques. Algorithm-based fault tolerance (ABFT) techniques are used to detect data s...", "documentLink": "/document/558838"}, "context": [{"sec": "sec3", "part": "1", "text": " In [3], the authors obtain a flow graph, and a ddgraph from an algorithm's specifications in order to place error-detection checks."}], "title": "Method for designing and placing check sets\nbased on control flow analysis of programs", "order": "3", "text": "S. J. Geoghegan, D. R. Avresky, \"Method for designing and placing check sets\nbased on control flow analysis of programs\", <em>IEEE Proceedings of the Seventh International Symposium on Software Reliability Engineering</em>, pp. 256-265, 1996-Oct. 30Nov. 2."}, {"id": "ref4", "refType": "biblio", "context": [{"sec": "sec1", "part": "1", "text": " A spanning tree is a connected graph that spans the nodes of the graph, forming a tree with no cycles [4]."}], "title": "Introduction to Algorithms", "order": "4", "text": "T. Cormen, C. Leiserson, R. Rivest, Introduction to Algorithms, 1990, McGraw-Hill."}, {"id": "ref5", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=395831", "pdfSize": "931KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The paper presents an integrated software fault injection environment (DOCTOR) which is capable of (1) generating synthetic workloads under which system dependability is evaluated, (2) injecting various types of faults with different options, and (3) collecting performance and dependability data. A comprehensive graphical user interface is also provided. The software implemented fault-injection tools supports three types of faults: memory faults, CPU faults, and communication faults. Each inject...", "documentLink": "/document/395831"}, "context": [{"sec": "sec1", "part": "1", "text": " The software-based fault-injection tools are widely used for validating the error-detection software and mechanisms [2], [5], [7]."}], "title": "DOCTOR: an integrated software fault injection environment\nfor distributed real-time systems", "order": "5", "text": "S. Han, K. G. Shin, H. A. Rosenberg, \"DOCTOR: an integrated software fault injection environment\nfor distributed real-time systems\", <em>Proceedings of the International Computer Performance and Dependability Symposium</em>, pp. 204-213, 1995-Apr."}, {"id": "ref6", "refType": "biblio", "context": [{"sec": "sec3", "part": "1", "text": " For estimating the probability of detection of a given fault type, the number of significant experiments necessary for achieving an accuracy of \\$\\pm r\\%\\$, and a confidence level of \\$100(1-\\alpha)\\$, can be calculated by the formula \\$\\eta=(z_{1-(\\alpha/2)}^{2}p(1-p))/r^{2}\\$, where \\$z_{1-(\\alpha/2)}\\$ is the \\$(1-(\\alpha/2))\\$ quantile of a unite \\$s\\$-normal variate, \\$p\\$ is the probability of fault detection (proportion of observations in the class), \\$\\pm r\\$ is the desired accuracy, \\$100(1-\\alpha)\\%\\$ is the desired confidence level, and \\$\\alpha\\$ is the significance level [6]."}], "title": "The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling", "order": "6", "text": "R. Jain, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design Measurement Simulation and Modeling, 1991, John Wiley & Sons, Inc."}, {"id": "ref7", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=534627", "pdfSize": "1224KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In the research reported in this paper, transient faults were injected in the nodes and in the communication subsystem (by using software fault injection) of a commercial parallel machine running several real applications. The results showed that a significant percentage of faults caused the system to produce wrong results while the application seemed to terminate normally, thus demonstrating that fault tolerance techniques are required in parallel systems, not only to assure that long-running a...", "documentLink": "/document/534627"}, "context": [{"sec": "sec1", "part": "1", "text": " The software-based fault-injection tools are widely used for validating the error-detection software and mechanisms [2], [5], [7]."}], "title": "Experimental assessment of parallel\nsystems", "order": "7", "text": "J. G. Silva, \"Experimental assessment of parallel\nsystems\", <em>IEEE Proceedings of the Fault-Torelant Computing</em>, vol. 26, pp. 415-424, 1996."}, {"id": "ref8", "refType": "biblio", "context": [{"sec": "sec3", "part": "1", "text": " In this study [8], each experiment was allowed to run until 150 significant trials were executed."}, {"sec": "sec3", "part": "1", "text": " The second experiment involved a 16-node BST in which \\$v_{f}=7\\$, \\$v_{c}=15\\$, \\$v_{p}=3\\$, and \\$v_{new}=11\\$, where \\$v_{f}\\$, \\$v_{c}\\$, \\$v_{p}\\$, and \\$v_{new}\\$ are defined in [1], [8]."}], "title": "Software implemented fault tolerance in\nhypercube (experimental system), (short paper)", "order": "8", "text": "D. R. Avresky, S. Geoghegan, \"Software implemented fault tolerance in\nhypercube (experimental system) (short paper)\", <em>IEEE Proceedings of the Fault-Tolerant Computing</em>, vol. 28, 1998-June."}, {"id": "ref9", "refType": "biblio", "context": [{"sec": "sec2a2", "part": "1", "text": " We can conduct an analysis by considering the equivalent failure rate \\$\\Gamma\\$, associated with the model presented in [9]."}], "title": "System Reliability: Evaluation and Prediction in Engineering", "order": "9", "text": "A. Pages, M. Gordan, System Reliability: Evaluation and Prediction in Engineering, pp. 189-219, 1986, Springer-Verlag New York Inc."}, {"id": "ref10", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1016/B978-1-4832-0772-8.50006-6"}, "context": [{"sec": "sec3", "part": "1", "text": " The SIFT approach for hypercube topology, using a BST, is suitable for divide-and-conquer, sorting [10], and similar tree-based algorithms."}], "title": "Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes", "order": "10", "text": "F. T. Leighton, Introduction to Parallel Algorithms and Architectures: Arrays Trees Hypercubes, pp. 277-290, 1992, Morgan Caufman Pub. Inc."}, {"id": "ref11", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "acmLink": "http://dx.doi.org/10.1145/356924.356930"}, "context": [{"sec": "sec3", "part": "1", "text": " The algorithm uses a quadtree to store and/or compress two-dimensional arrays or graphical regions such as those used for image processing [11]."}], "title": "The quadtree and related hierarchical data structures", "order": "11", "text": "H. Samet, \"The quadtree and related hierarchical data structures\", <em>ACM Computing Surveys</em>, vol. 16, no. 2, pp. 187-260, 1984."}, {"id": "ref12", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=238482", "pdfSize": "1272KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The authors describe a dependability evaluation method based on fault injection that establishes the link between the experimental evaluation of the fault tolerance process and the fault occurrence process. The main characteristics of a fault injection test sequence aimed at evaluating the coverage of the fault tolerance process are presented. Emphasis is given to the derivation of experimental measures. The various steps by which the fault occurrence and fault tolerance processes are combined t...", "documentLink": "/document/238482"}, "context": [{"sec": "sec1", "part": "1", "text": "The model presented shows that the coverage factor has a profound effect on the reliability, as studied in [12]."}, {"sec": "sec2a3", "part": "1", "text": " The average fault coverage factor \\$c\\$ is based on data from the literature [12], [13]."}, {"sec": "sec3", "part": "1", "text": " The coverage factor analysis is based on the results presented in [12], [13]."}], "title": "Fault injection and dependability of fault-tolerant systems", "order": "12", "text": "J. Arlat, A. Costes, Y. Crouzet, J. C. Laprie, D. Powell, \"Fault injection and dependability of fault-tolerant systems\", <em>IEEE Transactions on Computers</em>, vol. 42, no. 8, pp. 913-932, Aug. 1993."}, {"id": "ref13", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=364537", "pdfSize": "1342KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper addresses the problem of estimating the coverage of a fault tolerance mechanism through statistical professing of observations collected in fault injection experiments. A formal definition of coverage is given in terms of the fault and system activity sets that characterize the input space. Two categories of sampling techniques are considered for coverage estimation: sampling in the whole space and sampling in a space partitioned into classes. The estimators for each technique are com...", "documentLink": "/document/364537"}, "context": [{"sec": "sec2a3", "part": "1", "text": " The average fault coverage factor \\$c\\$ is based on data from the literature [12], [13]."}, {"sec": "sec3", "part": "1", "text": " The coverage factor analysis is based on the results presented in [12], [13]."}], "title": "Estimators for fault tolerance coverage evaluation", "order": "13", "text": "D. Powell, E. Martins, J. Arlat, \"Estimators for fault tolerance coverage evaluation\", <em>IEEE Transactions on Computers</em>, vol. 44, pp. 261-274, 1995."}], "arnumber": "1688080"}