{"details": {"issn": [{"value": "0018-9529", "format": "Print ISSN"}, {"value": "1558-1721", "format": "Online ISSN"}], "htmlAbstractLink": "/document/4378410/", "pubLink": "/xpl/RecentIssue.jsp?punumber=24", "title": "Reliability MicroKernel: Providing Application-Aware Reliability in the OS", "doi": "10.1109/TR.2007.909758", "isSMPTE": false, "xplore-pub-id": "24", "articleNumber": "4378410", "endPage": "614", "isPromo": false, "mediaPath": "/mediastore/IEEE/content/media/24/4384598/4378410", "isNotDynamicOrStatic": true, "isJournal": true, "ephemeraFlag": "false", "isNumber": "4384598", "persistentLink": "http://ieeexplore.ieee.org/servlet/opac?punumber=24", "startPage": "597", "standardTitle": "Reliability MicroKernel: Providing Application-Aware Reliability in the OS", "publicationDate": "Dec. 2007", "pdfPath": "/iel5/24/4384598/04378410.pdf", "mlTime": "PT0.143942S", "publicationNumber": "24", "copyrightYear": "2007", "isOpenAccess": false, "isCustomDenial": false, "conferenceDate": " ", "isBook": false, "contentType": "periodicals", "openAccessFlag": "no", "displayPublicationTitle": "IEEE Transactions on Reliability", "authors": [{"bio": {"p": ["Long Wang is a Ph.D. candidate in the Department of Electrical and Computer Engineering at the University of Illinois, Urbana-Champaign. His research interests include fault tolerance, system reliability, and system analysis. Wang received an MS in computer science from the University of Illinois, Urbana-Champaign. He is a student member of the IEEE."]}, "affiliation": "Univ. of Illinois at Urbana-Champaign, Urbana-Champaign", "name": "Long Wang"}, {"bio": {"p": ["Zbigniew Kalbarczyk is principal research scientist at the University of Illinois, Urbana-Champaign. His research interests include automated design, implementation, and evaluation of dependable and secure computing systems. Kalbarczyk received a PhD in computer science from the Bulgarian Academy of Sciences. He is a member of the IEEE and the IEEE Computer Society."]}, "affiliation": "Univ. of Illinois at Urbana-Champaign, Urbana-Champaign", "name": "Zbigniew Kalbarczyk"}, {"bio": {"p": ["Weining Gu is a Ph.D. candidate in the Department of Electrical and Computer Engineering, University of Illinois at Urbana-Champaign. He received an M.S. degree in electrical and computer engineering from the University of Illinois at Urbana-Champaign in 2004. He also received M.E. and B.E. degrees in computer science in Nanjing University of Aeronautics & Astronautics and Beijing University of Aeronautics & Astronautics in China, respectively. His research interests include the design of dependable/secure systems and networks, dependability evaluation, and benchmarking of computing and communication systems. He is a member of the IEEE."]}, "affiliation": "Univ. of Illinois at Urbana-Champaign, Urbana-Champaign", "name": "Weining Gu"}, {"bio": {"p": ["Ravishankar K. Iyer is director of the Coordinated Science Laboratory, and George and Ann Fisher Distinguished Professor of Engineering at the University of Illinois, Urbana-Champaign. His research interests include reliable and secure computing, measurement and evaluation, and automated design. Iyer received a PhD from the University of Queensland, Australia. He is an IEEE fellow, an associate fellow of the American Institute for Aeronautics and Astronautics, and a member of the ACM, Sigma Xi, and the IFIP Technical Committee on Fault-Tolerant Computing (WG 10.4)."]}, "affiliation": "Univ. of Illinois at Urbana-Champaign, Urbana-Champaign", "name": "Ravishankar K. Iyer"}], "isEphemera": false, "isEarlyAccess": false, "lastupdate": "2016-11-12T01:55:12", "abstract": "This paper describes the reliability MicroKernel (RMK) framework, a loadable kernel module (or a device driver) for providing application-aware reliability, and dynamically configuring reliability mechanisms. Characteristics of application/system execution are exploited transparently through application-aware reliability techniques to achieve low-latency detection, and low-overhead checkpointing. The RMK prototype is implemented in both Linux, and Windows; and it supports detection of application/OS failures, and transparent application checkpointing. Experiment results show that the system hang detection and application hang detection, which exploit characteristics of application, and system behavior, can achieve high coverage (100% observed in our experiments) with a low false positive rate. Moreover, the performance overhead of RMK, and its detection/checkpointing mechanisms, is small: 0.6% for application hang detection, and 0.1% for transparent application checkpointing in the experiments.", "subType": "IEEE IEEE Transaction", "sections": {"multimedia": "false", "abstract": "true", "footnotes": "true", "disclaimer": "false", "keywords": "true", "citedby": "true", "references": "true", "figures": "true", "authors": "true"}, "copyrightOwner": "IEEE", "isStandard": false, "articleId": "4378410", "xplore-issue": "4384598", "publisher": "IEEE", "issueLink": "/xpl/tocresult.jsp?isnumber=4384598", "isACM": false, "allowComments": false, "isStaticHtml": false, "rightsLink": "http://s100.copyright.com/AppDispatchServlet?publisherName=ieee&publication=0018-9529&title=Reliability+MicroKernel%3A+Providing+Application-Aware+Reliability+in+the+OS&isbn=&publicationDate=Dec.+2007&author=Long+Wang&ContentID=10.1109/TR.2007.909758&orderBeanReset=true&startPage=597&endPage=614&volumeNum=56&issueNum=4", "citationCount": "10", "keywords": [{"kwd": ["Pins", "Checkpointing", "Application software", "Hardware", "Linux", "Operating systems", "Computer crashes", "Computer architecture", "Monitoring", "Kernel"], "type": "IEEE Keywords"}, {"kwd": ["reliability", "checkpointing", "Linux", "operating system kernels"], "type": "INSPEC: Controlled Indexing"}, {"kwd": ["application hang detection", "reliability microkernel", "application-aware reliability", "operating system", "Linux", "Windows", "transparent application checkpointing"], "type": "INSPEC: Non-Controlled Indexing"}, {"kwd": ["transparent application checkpointing", "Application aware reliability", "OS-level error detection", "system crash/hang detection"], "type": "Author Keywords "}], "issue": "4", "chronOrPublicationDate": "Dec. 2007", "isFreeDocument": false, "userInfo": {"subscribedContent": false, "fileCabinetUser": false, "showGet802Link": false, "member": false, "individual": false, "showPatentCitations": true, "showOpenUrlLink": false, "institute": false, "guest": false, "fileCabinetContent": false}, "formulaStrippedArticleTitle": "Reliability MicroKernel: Providing Application-Aware Reliability in the OS", "publicationTitle": "IEEE Transactions on Reliability", "isConference": false, "isDynamicHtml": false, "volume": "56", "accessionNumber": "9747849"}, "citations": {"mediaPath": "/mediastore/IEEE/content/media/24/4384598/4378410", "publisher": "IEEE", "patentCitationCount": "3", "publicationNumber": "24", "contentType": "periodicals", "patentCitations": [{"grantDate": "25 February 2014", "inventors": "Mukherjee, Joy; Pruscino, Angelo; Kumar, Sunil; Kumar, Sujeet; Tripathi, Anuj; Prasanth, Macharapu Sai", "patentNumber": "8660816", "ipcClassList": "G06F0113400000", "pdfLink": "http://patentimages.storage.googleapis.com/pdfs/US8660816.pdf", "title": "Method, system, and computer program product for determining a hang state and distinguishing a hang state from an idle state", "order": "1", "pocClassList": "702182000, 702179000, 702186000, 702188000, 713323000, 714037000, 714038120, 714038130, 714047100, 714049000, 718104000", "pocClasses": ["702182000", "702179000", "702186000", "702188000", "713323000", "714037000", "714038120", "714038130", "714047100", "714049000", "718104000"], "filingDate": "07 May 2009", "id": "08660816", "patentAbstract": "A system, method, and computer program product are described for distinguishing between a computing system that is hung in a hang state and systems that are in an idle or otherwise non-hang state which do not need intervention before regaining the ability to adequately process work. According to some approaches, heuristics are employed to perform hang and idle system detection and validation. Data representative of systems resources are analyzed and transformed in order to identify systems that are in a hang state.", "patentLink": "http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=8660816.PN.&OS=PN/8660816", "assignees": ["ORACLE INTERNATIONAL CORP"], "ipcClasses": ["G06F0113400000"], "appNum": "12437365"}, {"grantDate": "12 March 2013", "inventors": "Ben-Yehuda, Shmuel; Pelleg, Dan; Russell, Lance Warren", "patentNumber": "8397106", "ipcClassList": "G06F0110000000", "pdfLink": "http://patentimages.storage.googleapis.com/pdfs/US8397106.pdf", "title": "Detecting no progress state of an application", "order": "2", "pocClassList": "714048000, 714010000", "pocClasses": ["714048000", "714010000"], "filingDate": "16 April 2010", "id": "08397106", "patentAbstract": "A method, system, and computer usable program product for detecting a no progress state of an application are provided in the illustrative embodiments. A resource usage and an output of a set of applications are monitored. The resource usage and the output are measured to determine a resource usage value and an output value at a given time. A determination is made whether the resource usage value is included in a sub-range of a resource usage scale and the output value is included in a sub-range of an output scale where the sub-range of the resource usage scale corresponds to the sub-range of the output scale. The no progress state of the application is detected if the determination is negative", "patentLink": "http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=8397106.PN.&OS=PN/8397106", "assignees": ["INTERNATIONAL BUSINESS MACHINES CORP"], "ipcClasses": ["G06F0110000000"], "appNum": "12762226"}, {"grantDate": "20 October 2011", "inventors": "PELLEG, Dan; RUSSELL, Lance, Warren; BEN YEHUDA, Shmuel", "order": "3", "patentNumber": "WO2011128411", "title": "DETECTING NO PROGRESS STATE OF AN APPLICATION", "assignees": ["INTERNATIONAL BUSINESS MACHINES CORP"], "patentLink": "https://patentscope.wipo.int/search/en/detail.jsf?docId=WO2011128411&recNum=50&docAn=DE2014100299&queryString=&maxRec=2801215", "filingDate": "14 April 2011", "id": "WO2011128411", "patentAbstract": "A method, system, and computer usable program product for detecting a no progress state of an application are provided in the illustrative embodiments. A resource usage and an output of a set of applications are monitored. The resource usage and the output are measured to determine a resource usage value and an output value at a given time. A determination is made whether the resource usage value is included in a sub-range of a resource usage scale and the output value is included in a sub-range of an output scale where the sub-range of the resource usage scale corresponds to the sub-range of the output scale. The no progress state of the application is detected if the determination is negative.", "ipcClassList": "G06F0110000000, G06F0113600000", "ipcClasses": ["G06F0110000000", "G06F0113600000"], "appNum": "EP2011055928"}], "formulaStrippedArticleTitle": "Reliability MicroKernel: Providing Application-Aware Reliability in the OS", "isEarlyAccess": false, "paperCitations": {"ieee": [{"title": "What Is System Hang and How to Handle It", "displayText": "Yian Zhu, Yue Li, Jingling Xue, Tian Tan, Jialong Shi, Yang Shen, Chunyan Ma, \"What Is System Hang and How to Handle It\", <em>Software Reliability Engineering (ISSRE) 2012 IEEE 23rd International Symposium on</em>, pp. 141-150, 2012, ISSN 1071-9458.", "order": "1", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6405362", "pdfSize": "370KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6405362"}}, {"title": "Adaptive monitoring in microkernel OSs", "displayText": "Domenico Cotroneo, Domenico Di Leo, Roberto Natella, \"Adaptive monitoring in microkernel OSs\", <em>Dependable Systems and Networks Workshops (DSN-W) 2010 International Conference on</em>, pp. 66-72, 2010.", "order": "2", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5542619", "pdfSize": "530KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5542619"}}, {"title": "Assessment and Improvement of Hang Detection in the Linux Operating System", "displayText": "Domenico Cotroneo, Roberto Natella, Stefano Russo, \"Assessment and Improvement of Hang Detection in the Linux Operating System\", <em>Reliable Distributed Systems 2009. SRDS '09. 28th IEEE International Symposium on</em>, pp. 288-294, 2009, ISSN 1060-9857.", "order": "3", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5283184", "pdfSize": "721KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5283184"}}, {"title": "Formalizing System Behavior for Evaluating a System Hang Detector", "displayText": "Long Wang, Zbigniew Kalbarczyk, Ravishankar K. Iyer, \"Formalizing System Behavior for Evaluating a System Hang Detector\", <em>Reliable Distributed Systems 2008. SRDS '08. IEEE Symposium on</em>, pp. 269-278, 2008, ISSN 1060-9857.", "order": "4", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4690821", "pdfSize": "349KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/4690821"}}, {"title": "An OS-level Framework for Anomaly Detection in Complex Software Systems", "displayText": "Antonio Bovenzi, Francesco Brancati, Stefano Russo, Andrea Bondavalli, \"An OS-level Framework for Anomaly Detection in Complex Software Systems\", <em>Dependable and Secure Computing IEEE Transactions on</em>, vol. 12, pp. 366-372, 2015, ISSN 1545-5971.", "order": "5", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6847216", "pdfSize": "635KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6847216"}}, {"title": "VM-&#x03BC;Checkpoint: Design, Modeling, and Assessment of Lightweight In-Memory VM Checkpointing", "displayText": "Long Wang, Zbigniew Kalbarczyk, Ravishankar K. Iyer, Arun Iyengar, \"VM-&#x03BC;Checkpoint: Design Modeling and Assessment of Lightweight In-Memory VM Checkpointing\", <em>Dependable and Secure Computing IEEE Transactions on</em>, vol. 12, pp. 243-255, 2015, ISSN 1545-5971.", "order": "6", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6824750", "pdfSize": "1031KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6824750"}}, {"title": "Characterizing Direct Monitoring Techniques in Software Systems", "displayText": "Marcello Cinque, Domenico Cotroneo, Raffaele Della Corte, Antonio Pecchia, \"Characterizing Direct Monitoring Techniques in Software Systems\", <em>Reliability IEEE Transactions on</em>, vol. 65, pp. 1665-1681, 2016, ISSN 0018-9529.", "order": "7", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=7493640", "pdfSize": "2561KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/7493640"}}, {"title": "Event Logs for the Analysis of Software Failures: A Rule-Based Approach", "displayText": "Marcello Cinque, Domenico Cotroneo, Antonio Pecchia, \"Event Logs for the Analysis of Software Failures: A Rule-Based Approach\", <em>Software Engineering IEEE Transactions on</em>, vol. 39, pp. 806-821, 2013, ISSN 0098-5589.", "order": "8", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6320555", "pdfSize": "1958KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6320555"}}, {"title": "Assessing Direct Monitoring Techniques to Analyze Failures of Critical Industrial Systems", "displayText": "Marcello Cinque, Domenico Cotroneo, Raffaele Della Corte, Antonio Pecchia, \"Assessing Direct Monitoring Techniques to Analyze Failures of Critical Industrial Systems\", <em>Software Reliability Engineering (ISSRE) 2014 IEEE 25th International Symposium on</em>, pp. 212-222, 2014, ISSN 1071-9458.", "order": "9", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6982628", "pdfSize": "802KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6982628"}}, {"title": "A framework improving availability for consumer electronics", "displayText": "Qingcheng Li, Xiaoli Gong, Jin Zhang, Yang Liu, \"A framework improving availability for consumer electronics\", <em>Computer Science and Information Technology 2009. ICCSIT 2009. 2nd IEEE International Conference on</em>, pp. 352-356, 2009.", "order": "10", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5234932", "pdfSize": "86KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5234932"}}]}, "mlTime": "PT0.128964S", "title": "Reliability MicroKernel: Providing Application-Aware Reliability in the OS", "lastupdate": "2016-11-12T01:55:12", "ieeeCitationCount": "10", "nonIeeeCitationCount": "0"}, "references": [{"id": "ref1", "refType": "biblio", "context": [], "title": "Clock and timer circuits", "order": "1", "text": "D. Bovet, M. Cesati, \"Clock and timer circuits\" in Understanding the Linux Kernel, 2005, O'Reilly & Associates, Inc."}, {"id": "ref2", "refType": "biblio", "context": [], "title": "Trace Distribution Center, Performance Evaluation Laboratory,", "order": "2", "text": "<em>Trace Distribution Center Performance Evaluation Laboratory</em>,  [online]  Available: http://tds.cs.byu.edu/tds."}, {"id": "ref3", "refType": "biblio", "context": [{"sec": "sec1", "part": "1", "text": " While some of the existing operating systems may provide (by design) reliability support, e.g., IBM AIX [3], and High-Availability Linux [4], their emphasis is on achieving system reliability rather than exploiting execution characteristics of applications to improve application reliability."}, {"sec": "sec2", "part": "1", "text": " Reliability architectures in IBM AIX [3], and High-Availability Linux [4] are designed to be closely coupled with the systems."}], "title": "Open, secure, scalable, reliable UNIX for POWER5 servers,", "order": "3", "text": "<em>Open secure scalable reliable UNIX for POWER5 servers</em>, 2004."}, {"id": "ref4", "refType": "biblio", "context": [{"sec": "sec1", "part": "1", "text": " While some of the existing operating systems may provide (by design) reliability support, e.g., IBM AIX [3], and High-Availability Linux [4], their emphasis is on achieving system reliability rather than exploiting execution characteristics of applications to improve application reliability."}, {"sec": "sec2", "part": "1", "text": " Reliability architectures in IBM AIX [3], and High-Availability Linux [4] are designed to be closely coupled with the systems."}], "title": "The Evolution of the Linux-HA Project", "order": "4", "text": "A. Robertson, \"The Evolution of the Linux-HA Project\", <em>UKUUG LISA/Winter Conference on High-Availability and Reliability</em>, 2004-Feb."}, {"id": "ref5", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=466997", "pdfSize": "487KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The concept of middleware provides a transparent way to augment and change the characteristics of a service provider as seen from a client. Fault tolerant policies are ideal candidates for middleware implementation. We have defined and implemented operating system based middleware support that provides the power and flexibility needed by diverse fault tolerant policies. This mechanism, called the sentry, has been built into the UNIX 4.3 BSD operating system server running on a Mach 3.0 kernel. T...", "documentLink": "/document/466997"}, "context": [], "title": "Fault-tolerance for off-the-shelf applications\nand hardware", "order": "5", "text": "M. Russinovich, Z. Segall, \"Fault-tolerance for off-the-shelf applications\nand hardware\", <em>Proc. of the 25th International Symposium on Fault-Tolerant Computing</em>, 1995."}, {"id": "ref6", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=109278", "pdfSize": "422KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "An alternative approach to building an entire operating system (OS) separating those parts of the OS that control the basic hardware resources (the kernel) from those that determine the unique characteristics of an OS environment, is examined, taking the Mach kernel as an example. Mach features which support OS emulation are discussed. In-kernel and out-of-kernel emulation are described. Two instances of the latter approach, the multithreaded Unix server and the multiserver Unix, are considered....", "documentLink": "/document/109278"}, "context": [{"sec": "sec2", "part": "1", "text": " Microkernel systems such as Mach [6], and Chorus [7], [26] provide basic resource management, and communications, rather than explicitly focus on reliability."}], "title": "Mach: A foundation for open systems", "order": "6", "text": "R. Rashid, R. Baron, A. Forin, D. Golub, M. Jones, D. Julin, D. Orr, R. Sanzi, \"Mach: A foundation for open systems\", <em>Proc. 2nd Workshop Workstation Operating System</em>, 1989-Sept."}, {"id": "ref7", "refType": "biblio", "context": [{"sec": "sec2", "part": "1", "text": " Microkernel systems such as Mach [6], and Chorus [7], [26] provide basic resource management, and communications, rather than explicitly focus on reliability."}], "title": "Overview\nof the CHORUS distributed operating systems", "order": "7", "text": "M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemont, F. Herrmann, C. Kaiser, S. Langlois, P. Lonard, W. Neuhauser, \"Overview\nof the CHORUS distributed operating systems\", <em>USENIX Workshop on Microkernels and Other Kernel-Architectures</em>, 1992."}, {"id": "ref8", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1007/11408901_8"}, "context": [], "title": "An architectural framework for detecting process hangs/crashes", "order": "8", "text": "N. Nakka, G. P. Saggese, Z. Kalbarczyk, R. K. Iyer, \"An architectural framework for detecting process hangs/crashes\", <em>The European Dependable Computing Conference 2005</em>, pp. 103-121."}, {"id": "ref9", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1311929", "pdfSize": "382KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper explores hardware-implemented error-detection and security mechanisms embedded as modules in a hardware-level framework called the reliability and security engine (RSE), which is implemented as an integral part of a modern microprocessor. The RSE interacts with the processor through an input/output interface. The CHECK instruction, a special extension of the instruction set architecture of the processor, is the interface of the application with the RSE. The detection mechanisms descri...", "documentLink": "/document/1311929"}, "context": [{"sec": "sec2", "part": "1", "text": " Hardware reliability frameworks, such as the Reliability and Security Engine (RSE) [9], provide application-aware mechanisms using programmable hardware modules to support the detection/recovery of runtime errors."}], "title": "An architectural framework for providing reliability and\nsecurity support", "order": "9", "text": "N. Nakka, Z. Kalbarczyk, R. K. Iyer, J. Xu, \"An architectural framework for providing reliability and\nsecurity support\", <em>International Conference on Dependable Systems and Networks</em>, pp. 585-594, 2004."}, {"id": "ref10", "refType": "biblio", "context": [], "title": "Operations Manual: PCI Watch-Dog Timer Card", "order": "10", "text": "<em>Operations Manual: PCI Watch-Dog Timer Card</em>,  [online]  Available: http://www.decision-computer.de/dowSHD/sonstiges/manualPCIwatchdog.PDF."}, {"id": "ref11", "refType": "biblio", "context": [{"sec": "sec2", "part": "1", "text": " Some existing detection mechanisms cannot operate when the interrupts are disabled due to system hangs, e.g., KHM [11]."}], "title": "Error injection-based failure profile of the IEEE 1394 bus", "order": "11", "text": "D. Beauregard, <em>Error injection-based failure profile of the IEEE 1394 bus</em>, 2003."}, {"id": "ref12", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1405971", "pdfSize": "227KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Many current approaches to software-implemented fault tolerance (SIFT) rely on process replication, which is often prohibitively expensive for practical use due to its high performance overhead and cost. The adaptive reconfigurable mobile objects of reliability (Armor) middleware architecture offers a scalable low-overhead way to provide high-dependability services to applications. It uses coordinated multithreaded processes to manage redundant resources across interconnected nodes, detect error...", "documentLink": "/document/1405971"}, "context": [], "title": "Application fault tolerance with armor middleware", "order": "12", "text": "Z. Kalbarczyk, R. K. Iyer, L. Wang, \"Application fault tolerance with armor middleware\", <em>IEEE Internet Computing</em>, vol. 9, no. 2, pp. 28-37, 2005."}, {"id": "ref13", "refType": "biblio", "context": [{"sec": "sec2", "part": "1", "text": " Some checkpoint mechanisms preserve the entire process image for failure recovery, or process migration [14], [15], while others provide incremental checkpointing [13], [28], [29], [31]."}, {"sec": "sec2", "part": "1", "text": " Libckpt [13] checkpoints dirty pages of a process."}, {"sec": "sec2", "part": "1", "text": " Mechanisms in [13], and [31] allow users to specify critical data for checkpointing; these require application instrumentation."}, {"sec": "sec7", "part": "1", "text": " Plank's libckpt [13], rely on user-level knowledge to decide when to take checkpoint for addressing consistency with the I/O state, OS-issued signals, and message queues."}, {"sec": "sec8d", "part": "1", "text": " These results are consistent with the measurements in libckpt [13] (85% of overhead reduction), and libFT [31] (0.1% performance overhead)."}], "title": "Libckpt: Transparent checkpointing under unix", "order": "13", "text": "J. S. Plank, M. Beck, G. Kingsley, K. Li title, \"Libckpt: Transparent checkpointing under unix\", <em>Conference Proceedings Usenix Winter 1995 Technical Conference</em>, pp. 213-223, 1995-January."}, {"id": "ref14", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "acmLink": "http://dx.doi.org/10.1145/844128.844162"}, "context": [{"sec": "sec2", "part": "1", "text": " Some checkpoint mechanisms preserve the entire process image for failure recovery, or process migration [14], [15], while others provide incremental checkpointing [13], [28], [29], [31]."}], "title": "The\ndesign and implementation of zap: A system for migrating computing environments", "order": "14", "text": "S. Osman, D. Subhraveti, G. Su, J. Nieh, \"The\ndesign and implementation of zap: A system for migrating computing environments\", <em>ACM SIGOPS Operating Systems Review</em>, vol. 36, 2002."}, {"id": "ref15", "refType": "biblio", "context": [{"sec": "sec2", "part": "1", "text": " Some checkpoint mechanisms preserve the entire process image for failure recovery, or process migration [14], [15], while others provide incremental checkpointing [13], [28], [29], [31]."}], "title": "Truly transparent checkpointing of parallel applications,", "order": "15", "text": "E. Pinheiro, <em>Truly transparent checkpointing of parallel applications</em>, Dec. 1997."}, {"id": "ref16", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1311939", "pdfSize": "316KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper proposes an application-transparent, low-overhead checkpointing strategy for maintaining consistency of control structures in a commercial main memory database (MMDB) system, based on the ARMOR (adaptive reconfigurable mobile object of reliability) infrastructure. Performance measurements and availability estimates show that the proposed checkpointing scheme significantly enhances database availability (an extra nine in improvement compared with major-recovery-based solutions) while i...", "documentLink": "/document/1311939"}, "context": [], "title": "Checkpointing\nof control structures in main memory database systems", "order": "16", "text": "L. Wang, Z. Kalbarczyk, R. K. Iyer, H. Vora, T. Chahande, \"Checkpointing\nof control structures in main memory database systems\", <em>The International Conference on Dependable Systems and Networks</em>, pp. 687-692, 2004."}, {"id": "ref17", "refType": "biblio", "context": [{"sec": "sec2", "part": "1", "text": " Others, like the Linux NMI watchdog timer [17], do not detect hangs if the timer interrupt continues to function despite the system hang."}], "title": "Checking the NMI watchdogs", "order": "17", "text": "D. Bovet, M. Cesati, \"Checking the NMI watchdogs\" in Understanding the Linux Kernel, 2005, O'Reilly & Associates, Inc."}, {"id": "ref18", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=480144", "pdfSize": "775KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Embedded systems generally interact with the outside world. Thus, some real-time constraints may be imposed on the system design. Verification of these constraints requires computing a tight upper bound on the worst case execution time (WCET) of a hardware/software system. The problem of bounding WCET is particularly difficult on modern processors, which use cache-based memory systems that vary memory access time significantly. This must be accurately modeled in order to tightly bound WCET. Exis...", "documentLink": "/document/480144"}, "context": [{"sec": "sec6", "part": "1", "text": " The AHD exploits the fact that the count of instructions executed in a well-defined code block or code section can be statistically bounded [18].1111Note that the problem of determining the worst case execution time or instruction count of a program or code block is, in general, not decidable, and is equivalent to the halting problem."}], "title": "Performance\nestimation of embedded software with instruction cache modeling", "order": "18", "text": "Y. S. Li, S. Malik, A. Wolfe, \"Performance\nestimation of embedded software with instruction cache modeling\", <em>ACM Trans. on Design Automation of Electronic Systems</em>, vol. 4, no. 3."}, {"id": "ref19", "refType": "biblio", "context": [], "title": "Microsoft Windows Internals", "order": "19", "text": "M. E. Russinovich, D. A. Solomon, Microsoft Windows Internals, 2005, Microsoft Press."}, {"id": "ref20", "refType": "biblio", "context": [{"sec": "sec8c", "part": "1", "text": " The web clients on the client machine are launched by WebStone [20], a benchmark program for web servers."}], "title": "WebSTONE: The First Generation in HTTP Server Benchmarking", "order": "20", "text": "G. Trent, M. Sake, WebSTONE: The First Generation in HTTP Server Benchmarking, Feb. 1995, MTS Silicon Graphics."}, {"id": "ref21", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "acmLink": "http://dx.doi.org/10.1145/502034.502042"}, "context": [{"sec": "sec5", "part": "1", "text": " [21] claim that 34% of kernel bugs in Linux 2.4.1 potentially lead to system hangs."}], "title": "An empirical study of operating\nsystems errors", "order": "21", "text": "A. Chou, J. Yang, B. Chelf, S. Hallem, D. Engler, \"An empirical study of operating\nsystems errors\", <em>Symposium on Operating Systems Principles</em>, 2001."}, {"id": "ref22", "refType": "biblio", "context": [{"sec": "sec5a", "part": "1", "text": " In addition to this fault model, we consider another case of system hang in which the OS halts the processor while waiting for a response from a blocking I/O operation [22] that fails for some reason; or the OS executes a halt instruction due, for example, to an error in a control flow of a program."}, {"sec": "sec5a", "part": "1", "text": " However, a timestamp counter still counts clock cycles [22], and can be used to detect system hangs due to a halted processor."}], "title": "IA-32 Intel Architecture Software Developer's Manual, Volume 3: System Programming Guide", "order": "22", "text": "<em>IA-32 Intel Architecture Software Developer's Manual Volume 3: System Programming Guide</em>, 2006."}, {"id": "ref23", "refType": "biblio", "context": [], "title": "IA-32 Intel Architecture Software Developer's Manual, Volume 1: Basic Architecture", "order": "23", "text": "<em>IA-32 Intel Architecture Software Developer's Manual Volume 1: Basic Architecture</em>, 2006."}, {"id": "ref24", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=839467", "pdfSize": "97KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Many fault injection tools are available for dependability assessment. Although these tools are good at injecting a single fault model into a single system, they suffer from two main limitations for use in distributed systems: (1) no single tool is sufficient for injecting all necessary fault models; (2) it is difficult to port these tools to new systems. NFTAPE, a tool for composing automated fault injection experiments from available lightweight fault injectors, triggers, monitors, and other c...", "documentLink": "/document/839467"}, "context": [{"sec": "sec8", "part": "1", "text": " NFTAPE [24], a software toolset, is used to launch fault injections, and assess the effectiveness of individual RMK modules in terms of their error coverage."}], "title": "Dependability assessment in distributed systems with lightweight\nfault injectors in NFTAPE", "order": "24", "text": "D. T. Stott, B. Floering, D. Burke, Z. Kalbarczyk, R. K. Iyer, \"Dependability assessment in distributed systems with lightweight\nfault injectors in NFTAPE\", <em>Proc. of the Dependable Computing for Critical Applications Conf.</em>, 1998."}, {"id": "ref25", "refType": "biblio", "context": [{"sec": "sec7b", "part": "1", "text": " Apache consists of a parent server process, and multiple child server processes, as depicted in Fig.\u00a010(a) [25]."}], "title": "Writing Apache Modules with Perl and C", "order": "25", "text": "L. Stein, D. MacEachern, Writing Apache Modules with Perl and C, 1999, O'Reilly & Associates, Inc."}, {"id": "ref26", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=781030", "pdfSize": "421KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper addresses the problem of using COTS microkernels in dependable systems. Because they are not developed with this aim, their behavior in the presence of faults is a main concern to system designers. We propose a novel approach to contain the effect of both external and internal faults that may affect their behavior. As microkernels can be decomposed into simple components, modeling of their expected behavior in the absence of faults is most often possible, which allows for the easy def...", "documentLink": "/document/781030"}, "context": [{"sec": "sec2", "part": "1", "text": " Microkernel systems such as Mach [6], and Chorus [7], [26] provide basic resource management, and communications, rather than explicitly focus on reliability."}], "title": "MetaKernels and fault containment wrappers", "order": "26", "text": "F. Salles, M. Rodriguez, J.-C. Fabre, J. Arlat, \"MetaKernels and fault containment wrappers\", <em>Proc. of the 29th International Symposium on Fault-Tolerant Computing</em>, pp. 22-29, 1999."}, {"id": "ref27", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=980005", "pdfSize": "1451KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The commercial offer concerning microkernel technology constitutes an attractive alternative for developing operating systems to suit a wide range of application domains. However, the integration of commercial off-the-shelf (COTS) microkernels into critical embedded computer systems is a problem for system developers, in particular due to the lack of objective data concerning their behavior in the presence of faults. This paper addresses this issue by describing a prototype environment, called M...", "documentLink": "/document/980005"}, "context": [], "title": "Dependability of COTS Microkernel-based systems", "order": "27", "text": "J. Arlat, J.-C. Fabre, M. Rodriguez, F. Salles, \"Dependability of COTS Microkernel-based systems\", <em>IEEE Trans. Computers</em>, vol. 51, no. 2, Feb. 2002."}, {"id": "ref28", "refType": "biblio", "context": [{"sec": "sec2", "part": "1", "text": " Some checkpoint mechanisms preserve the entire process image for failure recovery, or process migration [14], [15], while others provide incremental checkpointing [13], [28], [29], [31]."}, {"sec": "sec7a", "part": "1", "text": " A shadow process [28] may be forked for checkpointing purposes."}], "title": "Flashback: A lightweight extension for rollback and deterministic\nreplay for software debugging", "order": "28", "text": "S. M. Srinivasan, S. Kandula, C. R. Andrews, Y. Zhou, \"Flashback: A lightweight extension for rollback and deterministic\nreplay for software debugging\", <em>USENIX Annual Technical Conference General Track</em>, pp. 29-44, 2004."}, {"id": "ref29", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=17", "pdfSize": "972KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The Sequoia computer is a tightly coupled multiprocessor that avoids most of the fault-tolerance disadvantages of tight coupling by using a fault-tolerant hardware-design approach. An overview is give of how the hardware architecture and operating system (OS) work together to provide a high degree of fault tolerance with good system performance. A description of hardware is followed by a discussion of the multiprocessor synchronization problem. Kernel support for fault recovery and the recovery ...", "documentLink": "/document/17"}, "context": [{"sec": "sec2", "part": "1", "text": " Some checkpoint mechanisms preserve the entire process image for failure recovery, or process migration [14], [15], while others provide incremental checkpointing [13], [28], [29], [31]."}, {"sec": "sec2", "part": "1", "text": " Cache-based checkpointing [29] needs additional hardware to enable storing of application-relevant states."}], "title": "Sequoia: A fault-tolerant tightly coupled\nmultiprocessor for transaction processing", "order": "29", "text": "P. Bernstein, \"Sequoia: A fault-tolerant tightly coupled\nmultiprocessor for transaction processing\", <em>IEEE Computer</em>, Feb. 1988."}, {"id": "ref30", "refType": "biblio", "context": [], "title": "Characterization of Linux Kernel behavior under errors", "order": "30", "text": "W. Gu, Z. Kalbarczyk, R. K. Iyer, Z. Yang, \"Characterization of Linux Kernel behavior under errors\", <em>The International Conference on Dependable Systems and Networks</em>, 2003."}, {"id": "ref31", "refType": "biblio", "context": [{"sec": "sec2", "part": "1", "text": " Some checkpoint mechanisms preserve the entire process image for failure recovery, or process migration [14], [15], while others provide incremental checkpointing [13], [28], [29], [31]."}, {"sec": "sec2", "part": "1", "text": " Mechanisms in [13], and [31] allow users to specify critical data for checkpointing; these require application instrumentation."}, {"sec": "sec8d", "part": "1", "text": " These results are consistent with the measurements in libckpt [13] (85% of overhead reduction), and libFT [31] (0.1% performance overhead)."}], "title": "Software-implemented fault tolerance: technologies and experience", "order": "31", "text": "Y. Huang, C. Kintala, \"Software-implemented fault tolerance: technologies and experience\", <em>Proc. IEEE Fault-Tolerant Computing Symp.</em>, 1993-June."}, {"id": "ref32", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=689455", "pdfSize": "114KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper describes the design, implementation, and evaluation of a run-time system for clusters of workstations that allows the rapid testing of checkpoint protocols with standard benchmarks. To achieve this goal, RENEW provides a flexible set of operations that facilitates the integration of a protocol in the system with reduced programming effort. To support a broad range of applications, RENEW exports, as its external interface, the industry endorsed Message Passing Interface (MPI). Three d...", "documentLink": "/document/689455"}, "context": [], "title": "RENEW: A tool for fast and efficient implementation of checkpoint\nprotocols", "order": "32", "text": "N. Neves, W. K. Fuchs, \"RENEW: A tool for fast and efficient implementation of checkpoint\nprotocols\", <em>Proc. of the 28th International Symposium on Fault-Tolerant Computing (FTCS)</em>, 1998-June."}, {"id": "ref33", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1467855", "pdfSize": "234KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Current supercomputing systems consisting of thousands of nodes cannot meet the demands of emerging high-performance scientific applications. As a result, a new generation of supercomputing systems consisting of hundreds of thousands of nodes is being proposed. However, these systems are likely to experience far more frequent failures than today's systems, and such failures must be tackled effectively. Coordinated checkpointing is a common technique to deal with failures in supercomputers. This ...", "documentLink": "/document/1467855"}, "context": [], "title": "Modeling coordinated checkpointing for large-scale supercomputers", "order": "33", "text": "L. Wang, K. Pattabiraman, Z. Kalbarczyk, R. K. Iyer, \"Modeling coordinated checkpointing for large-scale supercomputers\", <em>International Conference on Dependable Systems and Networks</em>, 2005."}, {"id": "ref34", "refType": "biblio", "context": [{"sec": "sec2", "part": "1", "text": " While an enhanced compiler can be used to automate the application instrumentation, user-provided directives are still needed to identify the location (in the application code) where the instrumentation should be added [34]."}], "title": "Compiler-assisted checkpointing,", "order": "34", "text": "M. Beck, J. S. Plank, G. Kingsley, <em>Compiler-assisted checkpointing</em>, 1994."}, {"id": "ref35", "refType": "biblio", "context": [{"sec": "sec4", "part": "1", "text": " On Windows, the context switch routine, SwapContext(), is not exported, and can be intercepted by applying the kernel inline hooking technique [35], which allows searching for predefined instruction patterns in the kernel code space (ntoskrnl.exe)."}], "title": "Rootkits: Subverting the Windows Kernel", "order": "35", "text": "G. Hoglund, J. Butler, Rootkits: Subverting the Windows Kernel, July 2005, Addison-Wesley Professional."}, {"id": "ref36", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=877845", "pdfSize": "867KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Operating systems form a foundation for robust application software, making it important to understand how effective they are at handling exceptional conditions. The Ballista testing system was used to characterize the handling of exceptional input parameter values for up to 233 POSIX functions and system calls on each of 15 widely used operating system (OS) implementations. This identified ways to crash systems with a single call, ways to cause task hangs within OS code, ways to cause abnormal ...", "documentLink": "/document/877845"}, "context": [{"sec": "sec6", "part": "1", "text": " For example, it is reported in [36] that 6 out of 11,986 experiments with bad parameters lead to hangs of POSIX functions in Linux 2.0.18."}], "title": "The exception handling effectiveness of\nPOSIX operating systems", "order": "36", "text": "P. Koopman, J. DeVale, \"The exception handling effectiveness of\nPOSIX operating systems\", <em>IEEE Trans. Software Engineering</em>, vol. 26, no. 9, 2000."}], "arnumber": "4378410"}