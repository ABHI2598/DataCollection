{"details": {"issn": [{"value": "0018-9529", "format": "Print ISSN"}, {"value": "1558-1721", "format": "Online ISSN"}], "htmlAbstractLink": "/document/4220787/", "pubLink": "/xpl/RecentIssue.jsp?punumber=24", "title": "Count Models for Software Quality Estimation", "doi": "10.1109/TR.2007.896757", "isSMPTE": false, "xplore-pub-id": "24", "articleNumber": "4220787", "endPage": "222", "isPromo": false, "mediaPath": "/mediastore/IEEE/content/media/24/4220773/4220787", "isNotDynamicOrStatic": true, "isJournal": true, "ephemeraFlag": "false", "isNumber": "4220773", "persistentLink": "http://ieeexplore.ieee.org/servlet/opac?punumber=24", "startPage": "212", "standardTitle": "Count Models for Software Quality Estimation", "publicationDate": "June 2007", "pdfPath": "/iel5/24/4220773/04220787.pdf", "mlTime": "PT0.13889S", "publicationNumber": "24", "copyrightYear": "2007", "isOpenAccess": false, "isCustomDenial": false, "conferenceDate": " ", "isBook": false, "contentType": "periodicals", "openAccessFlag": "no", "displayPublicationTitle": "IEEE Transactions on Reliability", "authors": [{"bio": {"p": ["Taghi M. Khoshgoftaar is a professor of the Department of Computer Science and Engineering, Florida Atlantic University, and the Director of the Empirical Software Engineering Laboratory, and the Data Mining and Machine Learning Laboratory. His research interests are in software engineering, software metrics, software reliability and quality engineering, computational intelligence, computer performance evaluation, data mining, machine learning, and statistical modeling. He has published more than 300 refereed papers in these areas. He is a member of the IEEE, IEEE Computer Society, and IEEE Reliability Society. He was the program chair, and General Chair of the IEEE International Conference on Tools with Artificial Intelligence in 2004, and 2005 respectively. He has served on technical program committees of various international conferences, symposia, and workshops. Also, he has served as North American Editor of the Software Quality Journal, and is on the editorial boards of the journals Software Quality, and Fuzzy systems."]}, "affiliation": "Dept. of Comput. Sci. & Eng., Florida Atlantic Univ., Boca Raton, FL", "name": "Taghi M. Khoshgoftaar"}, {"bio": {"p": ["Kehan Gao received the Ph.D. degree in Computer Engineering from Florida Atlantic University, Boca Raton, FL, USA, in 2003. She is currently an Assistant Professor in the Department of Mathematics and Computer Science at Eastern Connecticut State University. Her research interests include software engineering, software metrics, software reliability and quality engineering, computer performance modeling, computational intelligence, and data mining. She is a member of the IEEE Computer Society, and the Association for Computing Machinery."]}, "name": "Kehan Gao"}], "isEphemera": false, "isEarlyAccess": false, "lastupdate": "2016-11-12T01:54:20", "abstract": "Identifying which software modules, during the software development process, are likely to be faulty is an effective technique for improving software quality. Such an approach allows a more focused software quality &amp; reliability enhancement endeavor. The development team may also like to know the number of faults that are likely to exist in a given program module, i.e., a quantitative quality prediction. However, classification techniques such as the logistic regression model (lrm) cannot be used to predict the number of faults. In contrast, count models such as the Poisson regression model (prm), and the zero-inflated Poisson (zip) regression model can be used to obtain both a qualitative classification, and a quantitative prediction for software quality. In the case of the classification models, a classification rule based on our previously developed generalized classification rule is used. In the context of count models, this study is the first to propose a generalized classification rule. Case studies of two industrial software systems are examined, and for each we developed two count models, (prm, and zip), and a classification model (lrm). Evaluating the predictive capabilities of the models, we concluded that the prm, and the zip models have similar classification accuracies as the lrm. The count models are also used to predict the number of faults for the two case studies. The zip model yielded better fault prediction accuracy than the prm. As compared to other quantitative prediction models for software quality, such as multiple linear regression (mlr), the prm, and zip models have a unique property of yielding the probability that a given number of faults will occur in any module", "subType": "IEEE IEEE Transaction", "sections": {"multimedia": "false", "abstract": "true", "footnotes": "true", "disclaimer": "false", "keywords": "true", "citedby": "true", "references": "true", "figures": "false", "authors": "true"}, "copyrightOwner": "IEEE", "isStandard": false, "articleId": "4220787", "xplore-issue": "4220773", "publisher": "IEEE", "issueLink": "/xpl/tocresult.jsp?isnumber=4220773", "isACM": false, "allowComments": false, "isStaticHtml": false, "rightsLink": "http://s100.copyright.com/AppDispatchServlet?publisherName=ieee&publication=0018-9529&title=Count+Models+for+Software+Quality+Estimation&isbn=&publicationDate=June+2007&author=Taghi+M.+Khoshgoftaar&ContentID=10.1109/TR.2007.896757&orderBeanReset=true&startPage=212&endPage=222&volumeNum=56&issueNum=2", "citationCount": "5", "keywords": [{"kwd": ["Software quality", "Predictive models", "Fault diagnosis", "Programming", "Logistics", "Context modeling", "Computer industry", "Software systems", "Accuracy", "Linear regression"], "type": "IEEE Keywords"}, {"kwd": ["stochastic processes", "principal component analysis", "regression analysis", "software metrics", "software quality", "software reliability"], "type": "INSPEC: Controlled Indexing"}, {"kwd": ["software metrics", "software quality estimation count model", "software development process", "software reliability enhancement", "software quality classification", "logistic regression model", "Poisson regression model", "zero-inflated Poisson regression model", "software quality prediction model", "multiple linear regression", "fault probability", "principal component analysis"], "type": "INSPEC: Non-Controlled Indexing"}, {"kwd": ["zero-inflated Poisson", "Logistic regression", "Poisson regression", "principal components analysis", "software fault prediction", "software metrics", "software quality classification"], "type": "Author Keywords "}], "issue": "2", "chronOrPublicationDate": "June 2007", "isFreeDocument": false, "userInfo": {"subscribedContent": false, "fileCabinetUser": false, "showGet802Link": false, "member": false, "individual": false, "showPatentCitations": true, "showOpenUrlLink": false, "institute": false, "guest": false, "fileCabinetContent": false}, "formulaStrippedArticleTitle": "Count Models for Software Quality Estimation", "publicationTitle": "IEEE Transactions on Reliability", "isConference": false, "isDynamicHtml": false, "volume": "56", "accessionNumber": "9501630"}, "citations": {"mediaPath": "/mediastore/IEEE/content/media/24/4220773/4220787", "publisher": "IEEE", "patentCitationCount": "0", "publicationNumber": "24", "contentType": "periodicals", "formulaStrippedArticleTitle": "Count Models for Software Quality Estimation", "isEarlyAccess": false, "paperCitations": {"nonIeee": [{"title": "A systematic and comprehensive investigation of methods to build and evaluate fault prediction models", "displayText": "Erik Arisholm, Lionel C. Briand, Eivind B. Johannessen, \"A systematic and comprehensive investigation of methods to build and evaluate fault prediction models\", <em>Journal of Systems and Software</em>, vol. 83, pp. 2, 2010, ISSN 01641212.", "order": "1", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1016/j.jss.2009.06.055"}}, {"title": "A Decision Tree Regression based Approach for the Number of Software Faults Prediction", "displayText": "Santosh Singh Rathore, Sandeep Kumar, \"A Decision Tree Regression based Approach for the Number of Software Faults Prediction\", <em>ACM SIGSOFT Software Engineering Notes</em>, vol. 41, pp. 1, 2016, ISSN 01635948.", "order": "2", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "acmLink": "http://dx.doi.org/10.1145/2853073.2853083"}}, {"title": "An empirical study of some software fault prediction techniques for the number of faults prediction", "displayText": "Santosh S. Rathore, Sandeep Kumar, \"An empirical study of some software fault prediction techniques for the number of faults prediction\", <em>Soft Computing</em>, pp. , 2016, ISSN 1432-7643.", "order": "3", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1007/s00500-016-2284-x"}}, {"title": "Parameter estimation by Hellinger type distance for multivariate distributions based upon probability generating functions", "displayText": "Choung Min Ng, Seng-Huat Ong, H.M. Srivastava, \"Parameter estimation by Hellinger type distance for multivariate distributions based upon probability generating functions\", <em>Applied Mathematical Modelling</em>, vol. 37, pp. 7374, 2013, ISSN 0307904X.", "order": "4", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1016/j.apm.2013.02.044"}}, {"title": "Linear and Non-linear Heterogeneous Ensemble Methods to Predict the Number of Faults in Software Systems", "displayText": "Santosh Singh Rathore, Sandeep Kumar, \"Linear and Non-linear Heterogeneous Ensemble Methods to Predict the Number of Faults in Software Systems\", <em>Knowledge-Based Systems</em>, pp. , 2016, ISSN 09507051.", "order": "5", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1016/j.knosys.2016.12.017"}}]}, "mlTime": "PT0.071144S", "title": "Count Models for Software Quality Estimation", "lastupdate": "2016-11-12T01:54:20", "ieeeCitationCount": "0", "nonIeeeCitationCount": "5"}, "references": [{"id": "ref1", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=995794", "pdfSize": "325KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software quality is an important external software attribute that is difficult to measure objectively. In this case study, we empirically validate a set of object-oriented metrics in terms of their usefulness in predicting fault-proneness, an important software quality indicator We use a set of ten software product metrics that relate to the following software attributes: the size of the software, coupling, cohesion, inheritance, and reuse. Eight hypotheses on the correlations of the metrics wit...", "documentLink": "/document/995794"}, "context": [{"sec": "sec1", "part": "1", "text": "The overall objective of software quality modeling is to seek the underlying relationship between the software metrics, and the program faults [1], [2]."}], "title": "Predicting\nfault-proneness using OO metrics. An industrial case study", "order": "1", "text": "Y. Ping, T. Systa, H. Muller, \"Predicting\nfault-proneness using OO metrics. An industrial case study\", <em>Proceedings: 6th European Conference on Software Maintenance and Reengineering</em>, pp. 99-107, 2002-Mar."}, {"id": "ref2", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1702015", "pdfSize": "2675KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A major portion of the effort expended in developing commercial software today is associated with program testing. Schedule and/ or resource constraints frequently require that testing be conducted so as to uncover the greatest number of errors possible in the time allowed. In this paper we describe a study undertaken to assess the potential usefulness of various product-and process-related measures in identifying error-prone software. Our goal was to establish an empirical basis for the efficie...", "documentLink": "/document/1702015"}, "context": [{"sec": "sec1", "part": "1", "text": "The overall objective of software quality modeling is to seek the underlying relationship between the software metrics, and the program faults [1], [2]."}], "title": "Identifying error-prone software&mdash;an empirical study", "order": "2", "text": "V. Y. Shen, T. Yu, S. M. Thebaut, L. R. Paulsen, \"Identifying error-prone software&mdash;an empirical study\", <em>IEEE Trans. Software Eng.</em>, vol. SE-11, pp. 317-323, Apr. 1985."}, {"id": "ref3", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1142/S0218539399000292"}, "context": [{"sec": "sec1", "part": "1", "text": " A variety of techniques have been developed for software quality estimation [3]\u2013[5], most of which are suited for either prediction or classification, but not for both, such as the multiple linear regression [5] (only for prediction), and logistic regression [3] (only for classification)."}, {"sec": "sec1", "part": "1", "text": " In the context of software quality classification models, Khoshgoftaar et al. have investigated several techniques, including case-based reasoning [8], decision trees [9], [10], and logistic regression [3]."}, {"sec": "sec1", "part": "1", "text": " We compare the count models with classification based on the logistic regression technique [3]."}, {"sec": "sec2", "part": "1", "text": " We present the details of classification with the count models, prm, and zip, while modeling details for logistic regression are presented in [3]."}, {"sec": "sec2c", "part": "1", "text": " A further detailed explanation of logistic regression can be found in [3]."}], "title": "Logistic regression modeling of software\nquality", "order": "3", "text": "T. M. Khoshgoftaar, E. B. Allen, \"Logistic regression modeling of software\nquality\", <em>International Journal of Reliability Quality and Safety Engineering</em>, vol. 6, no. 4, pp. 303-317, Dec. 1999."}, {"id": "ref4", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=595888", "pdfSize": "137KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Society relies on telecommunications to such an extent that telecommunications software must have high reliability. Enhanced measurement for early risk assessment of latent defects (EMERALD) is a joint project of Nortel and Bell Canada for improving the reliability of telecommunications software products. This paper reports a case study of neural-network modeling techniques developed for the EMERALD system. The resulting neural network is currently in the prototype testing phase at Nortel. Neura...", "documentLink": "/document/595888"}, "context": [{"sec": "sec1", "part": "1", "text": " A variety of techniques have been developed for software quality estimation [3]\u2013[4][5], most of which are suited for either prediction or classification, but not for both, such as the multiple linear regression [5] (only for prediction), and logistic regression [3] (only for classification)."}], "title": "Applications of neural networks to software\nquality modeling of a very large telecommunications system", "order": "4", "text": "T. M. Khoshgoftaar, E. B. Allen, J. P. Hudepohl, S. J. Aud, \"Applications of neural networks to software\nquality modeling of a very large telecommunications system\", <em>Trans. Neural Networks</em>, vol. 8, no. 4, pp. 902-909, Jul. 1997."}, {"id": "ref5", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1023/B:SQJO.0000042059.16470.f0"}, "context": [{"sec": "sec1", "part": "1", "text": " A variety of techniques have been developed for software quality estimation [3]\u2013[5], most of which are suited for either prediction or classification, but not for both, such as the multiple linear regression [5] (only for prediction), and logistic regression [3] (only for classification)."}, {"sec": "sec1", "part": "1", "text": " [5], [12], Ebert [13], and Takahashi et al. [14]."}, {"sec": "sec1", "part": "1", "text": "Some techniques used for building software quality prediction models include regression trees [20], multiple linear regression (mlr) [5], and fuzzy logic [21]."}], "title": "Application of multivariate analysis for software fault\nprediction", "order": "5", "text": "N. Ohlsson, M. Zhao, M. Helander, \"Application of multivariate analysis for software fault\nprediction\", <em>Software Quality Journal</em>, vol. 7, no. 1, pp. 51-66, 1998."}, {"id": "ref6", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=989459", "pdfSize": "623KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Poisson regression model is widely used in software quality modeling. When the response variable of a data set includes a large number of zeros, Poisson regression model will underestimate the probability of zeros. A zero-inflated model changes the mean structure of the pure Poisson model. The predictive quality is therefore improved. In this paper, we examine a full-scale industrial software system and develop two models, Poisson regression and zero-inflated Poisson regression. To our knowledge...", "documentLink": "/document/989459"}, "context": [{"sec": "sec1", "part": "1", "text": " However, count models can be used to calibrate both classification models, and prediction models [6], [7]."}, {"sec": "sec1", "part": "1", "text": " Count models is a class of models that includes Poisson regression (prm) [7], negative binomial regression [15], truncated [16], hurdle [17], and zero-inflated Poisson (zip) regression [6]."}, {"sec": "sec4c", "part": "1", "text": " The Vuong's hypothesis test is used to investigate the comparative appropriateness of the count models, prm, and zip [6], [25]."}, {"sec": "sec5b", "part": "1", "text": "The Vuong's hypothesis test used to investigate the comparative appropriateness of the count models [6], [25] gave a value of 8.49, indicating that once again the zip model is more appropriate at the 1% significance level."}], "title": "An application of zero-inflated Poisson regression for software\nfault prediction", "order": "6", "text": "T. M. Khoshgoftaar, K. Gao, R. M. Szabo, \"An application of zero-inflated Poisson regression for software\nfault prediction\", <em>Proceedings of the Twelfth International Symposium on Software Reliability Engineering</em>, pp. 66-73, 2001-November."}, {"id": "ref7", "refType": "biblio", "context": [{"sec": "sec1", "part": "1", "text": " However, count models can be used to calibrate both classification models, and prediction models [6], [7]."}, {"sec": "sec1", "part": "1", "text": " Count models is a class of models that includes Poisson regression (prm) [7], negative binomial regression [15], truncated [16], hurdle [17], and zero-inflated Poisson (zip) regression [6]."}, {"sec": "sec1", "part": "1", "text": " In a related study, we investigated the application of prm for classifying software modules as \\$fp\\$, or \\$nfp\\$ [7]."}], "title": "Classification with count models", "order": "7", "text": "T. M. Khoshgoftaar, K. Gao, R. M. Szabo, \"Classification with count models\", <em>Proceedings of Eighth ISSAT International Conference on Reliability and Quality in Design</em>, pp. 180-184, 2002-August-79."}, {"id": "ref8", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1142/S0218194002000883"}, "context": [{"sec": "sec1", "part": "1", "text": " In the context of software quality classification models, Khoshgoftaar et al. have investigated several techniques, including case-based reasoning [8], decision trees [9], [10], and logistic regression [3]."}], "title": "Predicting fault-prone modules in embedded systems using\nanalogy-based classification models", "order": "8", "text": "T. M. Khoshgoftaar, B. Cukic, N. Seliya, \"Predicting fault-prone modules in embedded systems using\nanalogy-based classification models\", <em>International Journal of Software Engineering and Knowledge Engineering</em>, vol. 12, no. 2, pp. 201-221, Apr. 2002."}, {"id": "ref9", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1044344", "pdfSize": "486KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software faults are defects in software modules that might cause failures. Software developers tend to focus on faults, because they are closely related to the amount of rework necessary to prevent future operational software failures. The goal of this paper is to predict which modules are fault-prone and to do it early enough in the life cycle to be useful to developers. A regression tree is an algorithm represented by an abstract tree, where the response variable is a real quantity. Software m...", "documentLink": "/document/1044344"}, "context": [{"sec": "sec1", "part": "1", "text": " In the context of software quality classification models, Khoshgoftaar et al. have investigated several techniques, including case-based reasoning [8], decision trees [9], [10], and logistic regression [3]."}], "title": "Using regression trees to classify fault-prone software\nmodules", "order": "9", "text": "T. M. Khoshgoftaar, E. B. Allen, J. Deng, \"Using regression trees to classify fault-prone software\nmodules\", <em>IEEE Trans. Reliability</em>, vol. 51, no. 4, pp. 455-462, Dec. 2002."}, {"id": "ref10", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=885872", "pdfSize": "940KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software quality classification models can predict which modules are to be considered fault-prone, and which are not, based on software product metrics, process metrics and execution metrics. Such predictions can be used to target improvement efforts to those modules that need them the most. Classification-tree modeling is a robust technique for building such software quality models. However, the model structure may be unstable, and accuracy may suffer when the predictors are highly correlated. ...", "documentLink": "/document/885872"}, "context": [{"sec": "sec1", "part": "1", "text": " In the context of software quality classification models, Khoshgoftaar et al. have investigated several techniques, including case-based reasoning [8], decision trees [9], [10], and logistic regression [3]."}, {"sec": "sec4b", "part": "1", "text": "Principle components analysis [10], [24] was used to extract two s-significant components, \\$PC_{1}\\$, and \\$PC_{2}\\$, from the original\neight software metrics."}], "title": "Improving tree-based models of software quality with principal\ncomponents analysis", "order": "10", "text": "T. M. Khoshgoftaar, E. B. Allen, R. Shan, \"Improving tree-based models of software quality with principal\ncomponents analysis\", <em>Proceedings: Eleventh International Symposium on Software Reliability Engineering</em>, pp. 198-209, 2000-Oct."}, {"id": "ref11", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1019484", "pdfSize": "1493KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A number of papers have investigated the relationships between design metrics and the detection of faults in object-oriented software. Several of these studies have shown that such models can be accurate in predicting faulty classes within one particular software product. In practice, however, prediction models are built on certain products to be used on subsequent software development projects. How accurate can these models be, considering the inevitable differences that may exist across projec...", "documentLink": "/document/1019484"}, "context": [{"sec": "sec1", "part": "1", "text": " [11], Ohlsson et al. [5], [12], Ebert [13], and Takahashi et al. [14]."}], "title": "Assessing the applicability of fault-proneness models across\nobject-oriented software projects", "order": "11", "text": "L. C. Briand, W. L. Melo, J. Wust, \"Assessing the applicability of fault-proneness models across\nobject-oriented software projects\", <em>IEEE Trans. Software Engineering</em>, vol. 28, no. 7, pp. 706-720, July 2002."}, {"id": "ref12", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=738484", "pdfSize": "258KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software systems are often getting older than expected, and it is a challenge to try to make sure that they grow old gracefully. This implies that methods are needed to ensure that system components are possible to maintain. In this paper, the need to investigate, classify and study software components is emphasized. A classification method is proposed. It is based on classifying the software components into green, yellow and red components. The classification scheme is complemented with a discu...", "documentLink": "/document/738484"}, "context": [{"sec": "sec1", "part": "1", "text": " Similar research has been done by other authors, such as Briand et al. [11], Ohlsson et al. [5], [12], Ebert [13], and Takahashi et al. [14]."}], "title": "Identification of green, yellow and red\nlegacy components", "order": "12", "text": "M. C. Ohlsson, C. Wohlin, \"Identification of green yellow and red\nlegacy components\", <em>Proceedings: International Conference on Software Maintenance</em>, pp. 6-15, 1998-November."}, {"id": "ref13", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1007/BF00209184"}, "context": [{"sec": "sec1", "part": "1", "text": " Similar research has been done by other authors, such as Briand et al. [11], Ohlsson et al. [5], [12], Ebert [13], and Takahashi et al. [14]."}], "title": "Classification techniques for metric-based software development", "order": "13", "text": "C. Ebert, \"Classification techniques for metric-based software development\", <em>Software Quality Journal</em>, vol. 5, no. 4, pp. 255-272, December 1996."}, {"id": "ref14", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=630869", "pdfSize": "1133KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A methodology for generating an optimum software quality classification tree using software complexity metrics to discriminate between high-quality modules and low-quality modules is proposed. The process of tree generation is an application of the AIC (Akaike Information Criterion) procedures to the binomial distribution. AIC procedures are based on maximum likelihood estimation and the least number of complexity metrics. It is an improvement of the software quality classification tree generati...", "documentLink": "/document/630869"}, "context": [{"sec": "sec1", "part": "1", "text": " [14]."}], "title": "Building software quality classification\ntrees: Approach, experimentation, evaluation", "order": "14", "text": "R. Takahashi, Y. Muraoka, Y. Nakamura, \"Building software quality classification\ntrees: Approach experimentation evaluation\", <em>Proceedings: 8th International Symposium on Software Reliability Engineering</em>, pp. 222-233, 1997-November."}, {"id": "ref15", "refType": "biblio", "context": [{"sec": "sec1", "part": "1", "text": " Count models is a class of models that includes Poisson regression (prm) [7], negative binomial regression [15], truncated [16], hurdle [17], and zero-inflated Poisson (zip) regression [6]."}], "title": "Accounting for Excess Zeros and Sample Selection in Poisson and Nega-tive Binomial Regression Models", "order": "15", "text": "W. H. Green, <em>Accounting for Excess Zeros and Sample Selection in Poisson and Nega-tive Binomial Regression Models</em>, 1994."}, {"id": "ref16", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1017/CBO9780511814365"}, "context": [{"sec": "sec1", "part": "1", "text": " Count models is a class of models that includes Poisson regression (prm) [7], negative binomial regression [15], truncated [16], hurdle [17], and zero-inflated Poisson (zip) regression [6]."}], "title": "Regression Analysis of Count Data", "order": "16", "text": "A. C. Cameron, P. K. Trivedi, Regression Analysis of Count Data, 1998, Cambridge University Press."}, {"id": "ref17", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1016/0304-4076(86)90002-3"}, "context": [{"sec": "sec1", "part": "1", "text": " Count models is a class of models that includes Poisson regression (prm) [7], negative binomial regression [15], truncated [16], hurdle [17], and zero-inflated Poisson (zip) regression [6]."}], "title": "Specification and testing of some modified\ncount data models", "order": "17", "text": "J. Mullahy, \"Specification and testing of some modified\ncount data models\", <em>Journal of Econometrics</em>, vol. 33, pp. 341-365, 1986."}, {"id": "ref18", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=877340", "pdfSize": "147KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A practical classification rule for a SQ (software quality) model considers the needs of the project to use a model to guide targeting software RE (reliability enhancement) efforts, such as extra reviews early in development. Such a rule is often more useful than alternative rules. This paper discusses several classification rules for SQ models, and recommends a generalized classification rule, where the effectiveness and efficiency of the model for guiding software RE efforts can be explicitly ...", "documentLink": "/document/877340"}, "context": [{"sec": "sec1", "part": "1", "text": " Software modules were classified according to the most likely classification rule [18]."}, {"sec": "sec1", "part": "1", "text": " These factors have an important effect on the usefulness of classification models [18], [19]."}, {"sec": "sec2a", "part": "1", "text": " To incorporate the different costs of misclassifications with different proportions of the two classes, and allow the selection of a preferred model, a generalized classification rule was proposed previously [18]. where \\$c\\$ is a model parameter, which can be varied to obtain a model with the preferred balance between the Type I, and Type II error rates."}], "title": "A practical classification rule for software\nquality models", "order": "18", "text": "T. M. Khoshgoftaar, E. B. Allen, \"A practical classification rule for software\nquality models\", <em>IEEE Trans. Reliability</em>, vol. 49, no. 2, pp. 209-216, Jun. 2000."}, {"id": "ref19", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=637165", "pdfSize": "786KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A software quality model can make timely predictions of the class of a module, such as not fault prone or fault prone. These enable one to improve software development processes by targeting reliability improvement techniques more effectively and efficiently. Published software quality classification models generally minimize the number of misclassifications. The contribution of the paper is empirical evidence, supported by theoretical considerations, that such models can significantly benefit f...", "documentLink": "/document/637165"}, "context": [{"sec": "sec1", "part": "1", "text": " These factors have an important effect on the usefulness of classification models [18], [19]."}, {"sec": "sec2", "part": "1", "text": " Such an approach is not useful [19], however, when the proportion of \\$fp\\$ modules is very small, and the costs of misclassifying a \\$nfp\\$, and a \\$fp\\$ are different."}], "title": "The impact of costs of misclassification\non software quality modeling", "order": "19", "text": "T. M. Khoshgoftaar, E. B. Allen, \"The impact of costs of misclassification\non software quality modeling\", <em>Proceedings: 4th International Software Metrics Symposium</em>, pp. 54-62, 1997-November."}, {"id": "ref20", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1011339", "pdfSize": "427KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Complex high-assurance software systems depend highly on reliability of their underlying software applications. Early identification of high-risk modules can assist in directing quality enhancement efforts to modules that are likely to have a high number of faults. Regression tree models are simple and effective as software quality prediction models, and timely predictions from such models can be used to achieve high software reliability. This paper presents a case study from our comprehensive e...", "documentLink": "/document/1011339"}, "context": [{"sec": "sec1", "part": "1", "text": "Some techniques used for building software quality prediction models include regression trees [20], multiple linear regression (mlr) [5], and fuzzy logic [21]."}], "title": "Tree-based software quality models for fault\nprediction", "order": "20", "text": "T. M. Khoshgoftaar, N. Seliya, \"Tree-based software quality models for fault\nprediction\", <em>Proceedings: 8th International Software Metrics Symposium</em>, pp. 203-214, 2002-Jun."}, {"id": "ref21", "refType": "biblio", "context": [{"sec": "sec1", "part": "1", "text": "Some techniques used for building software quality prediction models include regression trees [20], multiple linear regression (mlr) [5], and fuzzy logic [21]."}], "title": "Application of fuzzy linear regression model for predicting\nprogram faults", "order": "21", "text": "Z. Xu, T. M. Khoshgoftaar, E. B. Allen, \"Application of fuzzy linear regression model for predicting\nprogram faults\", <em>Proceedings: Sixth ISSAT International Conference on Reliability and Quality in Design</em>, pp. 96-101, 2000-Aug."}, {"id": "ref22", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4220784", "pdfSize": "586KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Count models, such as the Poisson regression model, and the negative binomial regression model, can be used to obtain software fault predictions. With the aid of such predictions, the development team can improve the quality of operational software. The zero-inflated, and hurdle count models may be more appropriate when, for a given software system, the number of modules with faults are very few. Related literature lacks quantitative guidance regarding the application of count models for softwar...", "documentLink": "/document/4220784"}, "context": [{"sec": "sec2b", "part": "1", "text": " The pdf, theory, and other details for the Poisson, and Zero-inflated Poisson regression models are elaborated in [22]."}, {"sec": "sec4b", "part": "1", "text": "The parameters of the Poisson regression, and zero-inflated Poisson regression models are estimated using the maximum likelihood estimation [22]."}, {"sec": "sec5", "part": "1", "text": " Further details on this system are provided in [22]."}], "title": "A comprehensive empirical study of count models for software\nfault prediction", "order": "22", "text": "K. Gao, T. M. Khoshgoftaar, \"A comprehensive empirical study of count models for software\nfault prediction\", <em>IEEE Trans. Reliability</em>, vol. 56, no. 2, Jun. 2007."}, {"id": "ref23", "refType": "biblio", "links": {"pdfLink": "/stamp/stamp.jsp?tp=&arnumber=177367", "pdfSize": "580KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The objective in the construction of models of software quality is to use measures that may be obtained relatively early in the software development life cycle to provide reasonable initial estimates of the quality of an evolving software system. Measures of software quality and software complexity to be used in this modeling process exhibit systematic departures of the normality assumptions of regression modeling. Two new estimation procedures are introduced, and their performances in the model...", "documentLink": "/document/177367"}, "context": [{"sec": "sec3", "part": "1", "text": " In the case of ARE, because the actual value of the dependent variable may be zero, we add a \u20181' to the denominator to make the definition always well-defined [23]."}], "title": "Predictive modeling techniques of software\nquality from software measures", "order": "23", "text": "T. M. Khoshgoftaar, J. C. Munson, B. B. Bhattacharya, G. D. Richardson, \"Predictive modeling techniques of software\nquality from software measures\", <em>IEEE Trans. Software Engineering</em>, vol. 18, no. 11, pp. 979-987, Nov. 1992."}, {"id": "ref24", "refType": "biblio", "context": [{"sec": "sec4b", "part": "1", "text": "Principle components analysis [10], [24] was used to extract two s-significant components, \\$PC_{1}\\$, and \\$PC_{2}\\$, from the original\neight software metrics."}], "title": "Intermediate Statistical Methods and Applications: A Computer Package Approach", "order": "24", "text": "M. L. Berenson, D. M. Levine, M. Goldstein, Intermediate Statistical Methods and Applications: A Computer Package Approach, 1983, Prentice Hall."}, {"id": "ref25", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.2307/1912557"}, "context": [{"sec": "sec4c", "part": "1", "text": " The Vuong's hypothesis test is used to investigate the comparative appropriateness of the count models, prm, and zip [6], [25]."}, {"sec": "sec5b", "part": "1", "text": "The Vuong's hypothesis test used to investigate the comparative appropriateness of the count models [6], [25] gave a value of 8.49, indicating that once again the zip model is more appropriate at the 1% significance level."}], "title": "Likelihood ratio tests for model selection\nand non-nested hypotheses", "order": "25", "text": "Q. H. Vuong, \"Likelihood ratio tests for model selection\nand non-nested hypotheses\", <em>Econometrica</em>, vol. 57, no. 2, pp. 307-333, Mar. 1989."}, {"id": "ref26", "refType": "biblio", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "crossRefLink": "http://dx.doi.org/10.1080/00207720500159995"}, "context": [{"sec": "sec4c", "part": "1", "text": " A further in-depth discussion on the relative performance of these two count models is presented in [26]."}], "title": "Comparing software fault predictions of pure and zero-inflated\nPoisson regression models", "order": "26", "text": "T. M. Khoshgoftaar, K. Gao, R. M. Szabo, \"Comparing software fault predictions of pure and zero-inflated\nPoisson regression models\", <em>International Journal of Systems Science</em>, vol. 36, no. 11, pp. 705-715, Sep. 2005."}], "arnumber": "4220787"}