{"arnumber": "4967914", "details": {"title": "Staffing Level and Cost Analyses for Software Debugging Activities Through Rate-Based Simulation Approaches", "volume": "58", "keywords": [{"type": "IEEE Keywords", "kwd": ["Costs", "Software debugging", "Analytical models", "Fault detection", "Software reliability", "Failure analysis", "Queueing analysis", "Programming", "Data analysis", "Performance analysis"]}, {"type": "INSPEC: Controlled Indexing", "kwd": ["software reliability", "program testing", "queueing theory", "software development management"]}, {"type": "INSPEC: Non-Controlled Indexing", "kwd": ["software failure data", "software debugging activity", "rate based simulation approach", "cost analysis", "software reliability", "software failure process", "fault removal time", "fault detection activity", "queueing theory", "software development", "G/G/infin queueing model", "G/G/m queueing model"]}, {"type": "Author Keywords ", "kwd": ["software testing", "Fault correction", "non-homogeneous Poisson process (NHPP)", "software reliability growth model (SRGM)"]}], "issue": "4", "link": "http://ieeexplore.ieee.org/servlet/opac?punumber=24", "authors": [{"affiliation": "Dept. of Comput. Sci., Nat. Tsing Hua Univ., Hsinchu, Taiwan", "bio": {"p": ["Chu-Ti Lin received the B.S. (2003) in Computer Science from National Tsing Hua University (NTHU), Hsinchu, Taiwan. Currently he is a Ph.D. student at NTHU. He has several papers published in international journals, and conference proceedings. His research interests include software reliability, software process improvement, and Internet applications."]}, "name": "Chu-Ti Lin"}, {"affiliation": "Dept. of Comput. Sci., Nat. Tsing Hua Univ., Hsinchu, Taiwan", "bio": {"p": ["Chin-Yu Huang (M'08) is currently an Associate Professor in the Department of Computer Science at National Tsing Hua University, Hsinchu, Taiwan. He received the MS (1994), and the Ph.D. (2000) in Electrical Engineering from National Taiwan University, Taipei. He was with the Bank of Taiwan from 1994 to 1999, and was a senior software engineer at Taiwan Semiconductor Manufacturing Company from 1999 to 2000. Before joining NTHU in 2003, he was a division chief of the Central Bank of China, Taipei. He received the Ta-You Wu Memorial Award from the National Science Council of Taiwan in 2008. His research interests are software reliability engineering, software testing, software metrics, software testability, fault tree analysis, and system safety assessment. He is a member of IEEE."]}, "name": "Chin-Yu Huang"}], "publisher": "IEEE", "doi": "10.1109/TR.2009.2019669", "abstract": "Research in the field of software reliability, dedicated to the analysis of software failure processes, is quite diverse. In recent years, several attractive rate-based simulation approaches have been proposed. Thus far, it appears that most existing simulation approaches do not take into account the number of available debuggers (or developers). In practice, the number of debuggers will be carefully controlled. If all debuggers are busy, they may not address newly detected faults for some time. Furthermore, practical experience shows that fault-removal time is not negligible, and the number of removed faults generally lags behind the total number of detected faults, because fault detection activities continue as faults are being removed. Given these facts, we apply the queueing theory to describe and explain possible debugging behavior during software development. Two simulation procedures are developed based on G/G/infin, and G/G/m queueing models, respectively. The proposed methods will be illustrated using real software failure data. The analysis conducted through the proposed framework can help project managers assess the appropriate staffing level for the debugging team from the standpoint of performance, and cost-effectiveness."}, "references": [{"title": "Software Reliability Modeling", "context": [{"text": " According to ANSI's definition, software reliability is the probability of failure-free software operation for a specified period of time in a specified environment [1]\u2013[5].", "sec": "sec1", "part": "1"}, {"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[10].", "sec": "sec1", "part": "1"}, {"text": " With SRGM, project managers can quantify useful metrics, such as software reliability, MTTF, MTBF, or the number of remaining faults at any time, etc [1]\u2013[5].", "sec": "sec1", "part": "1"}, {"text": " The determination of optimal software release time is also a common, practical application of SRGM [1], [4].", "sec": "sec1", "part": "1"}, {"text": "Over the past three decades, many NHPP-based models have been proposed to estimate the reliability growth of software products [1]\u2013[5].", "sec": "sec2a", "part": "1"}, {"text": " To estimate and predict \\$\\lambda(t)\\$, we can apply SRGM to calculate the failure intensity [1]\u2013[4].", "sec": "sec3a", "part": "1"}, {"text": " Our assumptions are as follows [1]\u2013[3], [7], [13], [15].\n\n1)The software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n2)All faults are independent, and equally detectable.", "sec": "sec3b", "part": "1"}, {"text": " We then set \\$stop\\_time=21\\$, and \\$dt=0.001\\$; and we further chose the rate function of the Inflected S-Shaped Model [1] as \\$\\lambda(t)\\$, because it provided a good fit to the observed data.", "sec": "sec4b", "part": "1"}, {"text": " The fault detection was simulated using the rate function of the Goel-Okumoto model [1].", "sec": "sec4c", "part": "1"}], "order": "1", "links": {"crossRefLink": "http://dx.doi.org/10.1142/1390", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref1", "text": "M. Xie, Software Reliability Modeling, 1991, World Scientific Publishing Company.", "refType": "biblio"}, {"title": "Handbook of Software Reliability Engineering", "context": [{"text": " According to ANSI's definition, software reliability is the probability of failure-free software operation for a specified period of time in a specified environment [1]\u2013[2][5].", "sec": "sec1", "part": "1"}, {"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[2][10].", "sec": "sec1", "part": "1"}, {"text": " With SRGM, project managers can quantify useful metrics, such as software reliability, MTTF, MTBF, or the number of remaining faults at any time, etc [1]\u2013[2][5].", "sec": "sec1", "part": "1"}, {"text": "In recent decades, rate-based simulation approaches have been proposed to analyze stochastic failure processes [2], [7], [14], [15].", "sec": "sec1", "part": "1"}, {"text": "Over the past three decades, many NHPP-based models have been proposed to estimate the reliability growth of software products [1]\u2013[2][5].", "sec": "sec2a", "part": "1"}, {"text": " Farr & Lyu [2] also pointed out that the NHPP model has formed the basis for the models using the observed number of faults per unit time group.", "sec": "sec2a", "part": "1"}, {"text": " Moreover, Tausworthe & Lyu [2], [14] argued that most SRGM only focus on the failure observation during the test phase, or the operational phase.", "sec": "sec2b", "part": "1"}, {"text": " Thus, general simulation techniques have been developed to relax certain unreasonable assumptions [2], [14].", "sec": "sec2b", "part": "1"}, {"text": "Tausworthe & Lyu [2], [14] proposed a set of simulation procedures based on the concept of pure birth NHCTMC.", "sec": "sec2b", "part": "1"}, {"text": " To estimate and predict \\$\\lambda(t)\\$, we can apply SRGM to calculate the failure intensity [1]\u2013[2][4].", "sec": "sec3a", "part": "1"}, {"text": " Our assumptions are as follows [1]\u2013[2][3], [7], [13], [15].\n\n1)The software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n2)All faults are independent, and equally detectable.", "sec": "sec3b", "part": "1"}, {"text": " Further, each time unit is divided into a large number of runs, and the length of each run should be short enough that multiple events in a run are rare [2], [7], [14].", "sec": "sec3b", "part": "1"}, {"text": " Both selected data sets were collected in interval-domain format [2]\u2013[4].", "sec": "sec4a", "part": "1"}, {"text": " The statistics for \\$\\lambda(t)\\$ are all one-week-ahead predictions [2], i.e. all failure data prior to the given time are used to predict the number of failures in the next time unit.", "sec": "sec4b", "part": "1"}], "order": "2", "id": "ref2", "text": "Handbook of Software Reliability Engineering, 1996, McGraw Hill.", "refType": "biblio"}, {"title": "Software Reliability, Measurement, Prediction and Application", "context": [{"text": " According to ANSI's definition, software reliability is the probability of failure-free software operation for a specified period of time in a specified environment [1]\u2013[3][5].", "sec": "sec1", "part": "1"}, {"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[3][10].", "sec": "sec1", "part": "1"}, {"text": " With SRGM, project managers can quantify useful metrics, such as software reliability, MTTF, MTBF, or the number of remaining faults at any time, etc [1]\u2013[3][5].", "sec": "sec1", "part": "1"}, {"text": " Musa [3] reported that the number of debugging personnel is one of the major constraints on the rate of testing.", "sec": "sec1", "part": "1"}, {"text": "Over the past three decades, many NHPP-based models have been proposed to estimate the reliability growth of software products [1]\u2013[3][5].", "sec": "sec2a", "part": "1"}, {"text": " Musa [3] argued that the fault removal process is characterized on an average basis by assuming that the fault correction rate is proportional to the hazard rate.", "sec": "sec2a", "part": "1"}, {"text": " In the past, some researchers [3], [15], [25]\u2013[28] have attempted to predict software debugging behavior using a queueing model.", "sec": "sec3", "part": "1"}, {"text": " Musa [3] reported that there are three resources that govern the pace of debugging, and each resource represents an important part of the software debugging process.", "sec": "sec3", "part": "1"}, {"text": " To estimate and predict \\$\\lambda(t)\\$, we can apply SRGM to calculate the failure intensity [1]\u2013[3][4].", "sec": "sec3a", "part": "1"}, {"text": " Further, the probabilities for the increments of the failure process \\$N(t)\\$ can be assigned as [3]  where the function \\$o(\\Delta t)\\$ is defined as This function indicates that the probability of multiple failures during a time interval \\$(t,t+\\Delta t)\\$ is negligible for small values of \\$\\Delta t\\$.", "sec": "sec3a", "part": "1"}, {"text": " Our assumptions are as follows [1]\u2013[3], [7], [13], [15].\n\n1)The software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n2)All faults are independent, and equally detectable.", "sec": "sec3b", "part": "1"}, {"text": "The first data set (DS1) was from system T1 of the Rome Air Development Center project [3].", "sec": "sec4a", "part": "1"}, {"text": " Both selected data sets were collected in interval-domain format [2]\u2013[3][4].", "sec": "sec4a", "part": "1"}], "order": "3", "id": "ref3", "text": "J. D. Musa, A. Iannino, K. Okumoto, Software Reliability Measurement Prediction and Application, 1987, McGraw Hill.", "refType": "biblio"}, {"title": "Software Reliability", "context": [{"text": " According to ANSI's definition, software reliability is the probability of failure-free software operation for a specified period of time in a specified environment [1]\u2013[4][5].", "sec": "sec1", "part": "1"}, {"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[4][10].", "sec": "sec1", "part": "1"}, {"text": " With SRGM, project managers can quantify useful metrics, such as software reliability, MTTF, MTBF, or the number of remaining faults at any time, etc [1]\u2013[4][5].", "sec": "sec1", "part": "1"}, {"text": " The determination of optimal software release time is also a common, practical application of SRGM [1], [4].", "sec": "sec1", "part": "1"}, {"text": "Over the past three decades, many NHPP-based models have been proposed to estimate the reliability growth of software products [1]\u2013[4][5].", "sec": "sec2a", "part": "1"}, {"text": " To estimate and predict \\$\\lambda(t)\\$, we can apply SRGM to calculate the failure intensity [1]\u2013[4].", "sec": "sec3a", "part": "1"}, {"text": " Both selected data sets were collected in interval-domain format [2]\u2013[4].", "sec": "sec4a", "part": "1"}, {"text": " In general, re-staffing often occurs as a result of the following conditions [4], [29].", "sec": "sec4d", "part": "1"}], "order": "4", "id": "ref4", "text": "H. Pham, Software Reliability, 2000, Springer-Verlag.", "refType": "biblio"}, {"title": "Enhancing and measuring the predictive capabilities of testing-effort\ndependent software reliability models", "context": [{"text": " According to ANSI's definition, software reliability is the probability of failure-free software operation for a specified period of time in a specified environment [1]\u2013[5].", "sec": "sec1", "part": "1"}, {"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[5][10].", "sec": "sec1", "part": "1"}, {"text": " With SRGM, project managers can quantify useful metrics, such as software reliability, MTTF, MTBF, or the number of remaining faults at any time, etc [1]\u2013[5].", "sec": "sec1", "part": "1"}, {"text": "Over the past three decades, many NHPP-based models have been proposed to estimate the reliability growth of software products [1]\u2013[5].", "sec": "sec2a", "part": "1"}], "order": "5", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.jss.2007.10.002", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref5", "text": "C. T. Lin, C. Y. Huang, \"Enhancing and measuring the predictive capabilities of testing-effort\ndependent software reliability models\", <em>Journal of Systems and Software</em>, vol. 81, no. 6, pp. 1025-1038, June 2008.", "refType": "biblio"}, {"title": "Neural-network-based approaches\nfor software reliability estimation using dynamic weighted combinational models", "context": [{"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[6][10].", "sec": "sec1", "part": "1"}, {"text": " In the past, many researchers [6], [12], [13] have shown that neural networks offer promising approaches to software reliability estimation.", "sec": "sec1", "part": "1"}, {"text": "Apart from the NHPP models, many researchers have applied neural networks to predict FCP, and to estimate software reliability [6], [12], [13], [22] [23].", "sec": "sec2a", "part": "1"}, {"text": " Su & Huang [6] also proposed an ANN-based dynamic weighted combinational approach to predict software reliability.", "sec": "sec2a", "part": "1"}], "order": "6", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.jss.2006.06.017", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref6", "text": "Y. S. Su, C. Y. Huang, \"Neural-network-based approaches\nfor software reliability estimation using dynamic weighted combinational models\", <em>Journal of Systems and Software</em>, vol. 80, no. 4, pp. 606-615, April 2007.", "refType": "biblio"}, {"title": "A simulation approach to structure-based\nsoftware reliability analysis", "context": [{"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[7][10].", "sec": "sec1", "part": "1"}, {"text": "In recent decades, rate-based simulation approaches have been proposed to analyze stochastic failure processes [2], [7], [14], [15].", "sec": "sec1", "part": "1"}, {"text": " If the failure behavior is modeled by a failure rate, \\$N(t)\\$ can be modeled by a class of NHCTMC [7].", "sec": "sec2b", "part": "1"}, {"text": " Later, Gokhale & Lyu [7] proposed a simulation technique to analyze structure-based software reliability.", "sec": "sec2b", "part": "1"}, {"text": " Our assumptions are as follows [1]\u2013[3], [7], [13], [15].\n\n1)The software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n2)All faults are independent, and equally detectable.", "sec": "sec3b", "part": "1"}, {"text": " Further, each time unit is divided into a large number of runs, and the length of each run should be short enough that multiple events in a run are rare [2], [7], [14].", "sec": "sec3b", "part": "1"}, {"text": "Following similar work in [7], and [14], we can simulate the FDP.", "sec": "sec3b1", "part": "1"}], "order": "7", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Structure-based techniques enable an analysis of the influence of individual components on the application reliability. In an effort to ensure analytical tractability, prevalent structure-based analysis techniques are based on assumptions which preclude the use of these techniques for reliability analysis during the testing and operational phases. In this paper, we develop simulation procedures to assess the impact of individual components on the reliability of an application in the presence of ...", "documentLink": "/document/1498770", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1498770", "pdfSize": "1697KB"}, "id": "ref7", "text": "S. Gokhale, M. R. Lyu, \"A simulation approach to structure-based\nsoftware reliability analysis\", <em>IEEE Trans. Software Engineering</em>, vol. 31, no. 8, pp. 643-656, August 2005.", "refType": "biblio"}, {"title": "Architecture-based software\nreliability analysis: Overview and limitations", "context": [{"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[8][10].", "sec": "sec1", "part": "1"}], "order": "8", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "With the growing size and complexity of software applications, research in the area of architecture-based software reliability analysis has gained prominence. The purpose of this paper is to provide an overview of the existing research in this area, critically examine its limitations, and suggest ways to address the identified limitations", "documentLink": "/document/4099190", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4099190", "pdfSize": "757KB"}, "id": "ref8", "text": "S. Gokhale, \"Architecture-based software\nreliability analysis: Overview and limitations\", <em>IEEE Trans. Dependable and Secure Computing</em>, vol. 4, no. 1, pp. 32-40, Jan. 2007.", "refType": "biblio"}, {"title": "Software reliability trend\nanalyses from theoretical to practical considerations", "context": [{"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[9][10].", "sec": "sec1", "part": "1"}], "order": "9", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "This paper addresses the problem of reliability growth characterization and analysis. It is intended to show how reliability trend analyses can help the project manager in controlling the progress of the development activities and in appreciating the efficiency of the test programs. Reliability trend change may result from various reasons, some of them are desirable and expected (such as reliability growth due to fault removal) and some of them are undesirable (such as slowing down Of the testin...", "documentLink": "/document/317434", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=317434", "pdfSize": "786KB"}, "id": "ref9", "text": "K. Kanoun, J. C. Laprie, \"Software reliability trend\nanalyses from theoretical to practical considerations\", <em>IEEE Trans. Software Engineering</em>, vol. 20, no. 9, pp. 740-747, Sept. 1994.", "refType": "biblio"}, {"title": "A unified scheme of some non-homogenous\nPoisson process models for software reliability estimation", "context": [{"text": " Over the past three decades, numerous methods have been proposed to predict software failure process, and assess software reliability [1]\u2013[10].", "sec": "sec1", "part": "1"}], "order": "10", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, we describe how several existing software reliability growth models based on Nonhomogeneous Poisson processes (NHPPs) can be comprehensively derived by applying the concept of weighted arithmetic, weighted geometric, or weighted harmonic mean. Furthermore, based on these three weighted means, we thus propose a more general NHPP model from the quasi arithmetic viewpoint. In addition to the above three means, we formulate a more general transformation that includes a parametric fami...", "documentLink": "/document/1183936", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1183936", "pdfSize": "310KB"}, "id": "ref10", "text": "C. Y. Huang, M. R. Lyu, S. Y. Kuo, \"A unified scheme of some non-homogenous\nPoisson process models for software reliability estimation\", <em>IEEE Trans. Software Engineering</em>, vol. 29, no. 3, pp. 261-269, March 2003.", "refType": "biblio"}, {"title": "On the effect of fault removal in software\ntesting-Bayesian reliability estimation approach", "context": [{"text": "Since the 1970s, numerous parametric software reliability growth models (SRGM) have been proposed, and they can be used to describe the temporal behavior of a fault detection process (FDP) based on a stochastic process [11].", "sec": "sec1", "part": "1"}], "order": "11", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In this paper, we propose some reliability estimation methods in software testing. The proposed methods are based on the familiar Bayesian statistics, and can be characterized by using test outcomes in input domain models. It is shown that the resulting approaches are capable of estimating software reliability in the case where the detected software faults are removed. In numerical examples, we compare the proposed methods with the existing method, and investigate the effect of fault removal on ...", "documentLink": "/document/4021991", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4021991", "pdfSize": "434KB"}, "id": "ref11", "text": "H. Okamura, H. Furumura, T. Dohi, \"On the effect of fault removal in software\ntesting-Bayesian reliability estimation approach\", <em>Proceedings of the 17th International Symposium on Software Reliability Engineering</em>, pp. 247-255, 2006-November.", "refType": "biblio"}, {"title": "Prediction of software reliability using\nconnectionist models", "context": [{"text": " In the past, many researchers [6], [12], [13] have shown that neural networks offer promising approaches to software reliability estimation.", "sec": "sec1", "part": "1"}, {"text": "Apart from the NHPP models, many researchers have applied neural networks to predict FCP, and to estimate software reliability [6], [12], [13], [22] [23].", "sec": "sec2a", "part": "1"}, {"text": " Karunanithi & Malaiya [12] proposed a neural network architecture which first accepts the execution time as the input, and then shows the number of detected faults.", "sec": "sec2a", "part": "1"}], "order": "12", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The usefulness of connectionist models for software reliability growth prediction is illustrated. The applicability of the connectionist approach is explored using various network models, training regimes, and data representation methods. An empirical comparison is made between this approach and five well-known software reliability growth models using actual data sets from several different software projects. The results presented suggest that connectionist models may adapt well across different...", "documentLink": "/document/148475", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=148475", "pdfSize": "1043KB"}, "id": "ref12", "text": "N. Karunanithi, Y. K. Malaiya, \"Prediction of software reliability using\nconnectionist models\", <em>IEEE Trans. Software Engineering</em>, vol. 18, no. 7, pp. 563-574, July 1992.", "refType": "biblio"}, {"title": "On-line prediction of software reliability using an evolutionary\nconnectionist model", "context": [{"text": " In the past, many researchers [6], [12], [13] have shown that neural networks offer promising approaches to software reliability estimation.", "sec": "sec1", "part": "1"}, {"text": "Apart from the NHPP models, many researchers have applied neural networks to predict FCP, and to estimate software reliability [6], [12], [13], [22] [23].", "sec": "sec2a", "part": "1"}, {"text": " Similarly, Tian & Noore [13] proposed an evolutionary neural-network modeling approach for the prediction of cumulative failure time based on this architecture.", "sec": "sec2a", "part": "1"}, {"text": " That is, the fitting bias of the training set is very slight regarding known data, but the bias is unpredictably large when new data are presented to the network [13].", "sec": "sec2b", "part": "1"}, {"text": " Our assumptions are as follows [1]\u2013[3], [7], [13], [15].\n\n1)The software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n2)All faults are independent, and equally detectable.", "sec": "sec3b", "part": "1"}], "order": "13", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.jss.2004.08.023", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref13", "text": "L. Tian, A. Noore, \"On-line prediction of software reliability using an evolutionary\nconnectionist model\", <em>Journal of Systems and Software</em>, vol. 77, no. 2, pp. 173-180, August 2005.", "refType": "biblio"}, {"title": "A generalized technique for simulating software\nreliability", "context": [{"text": "In recent decades, rate-based simulation approaches have been proposed to analyze stochastic failure processes [2], [7], [14], [15].", "sec": "sec1", "part": "1"}, {"text": " This type of approach can also extend the reliability process to encompass the entire software life-cycle [14].", "sec": "sec1", "part": "1"}, {"text": " Moreover, Tausworthe & Lyu [2], [14] argued that most SRGM only focus on the failure observation during the test phase, or the operational phase.", "sec": "sec2b", "part": "1"}, {"text": " Thus, general simulation techniques have been developed to relax certain unreasonable assumptions [2], [14].", "sec": "sec2b", "part": "1"}, {"text": "Tausworthe & Lyu [2], [14] proposed a set of simulation procedures based on the concept of pure birth NHCTMC.", "sec": "sec2b", "part": "1"}, {"text": " Further, each time unit is divided into a large number of runs, and the length of each run should be short enough that multiple events in a run are rare [2], [7], [14].", "sec": "sec3b", "part": "1"}, {"text": "Following similar work in [7], and [14], we can simulate the FDP.", "sec": "sec3b1", "part": "1"}], "order": "14", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Although several models have been proposed for assessing software reliability, none has emerged as the most effective predictor. The authors offer a general simulation technique that relaxes or removes many of the usual reliability-modeling assumptions and expends the reliability process to encompass the entire software life cycle.", "documentLink": "/document/506464", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=506464", "pdfSize": "1720KB"}, "id": "ref14", "text": "R. C. Tausworthe, M. R. Lyu, \"A generalized technique for simulating software\nreliability\", <em>IEEE Software</em>, vol. 13, no. 2, pp. 77-88, March 1996.", "refType": "biblio"}, {"title": "Measuring and assessing software\nreliability growth through simulation-based approaches", "context": [{"text": "In recent decades, rate-based simulation approaches have been proposed to analyze stochastic failure processes [2], [7], [14], [15].", "sec": "sec1", "part": "1"}, {"text": " In the past, some researchers [3], [15], [25]\u2013[28] have attempted to predict software debugging behavior using a queueing model.", "sec": "sec3", "part": "1"}, {"text": " Our assumptions are as follows [1]\u2013[3], [7], [13], [15].\n\n1)The software system is subject to failures at random times caused by the manifestation of the remaining faults in the system.\n2)All faults are independent, and equally detectable.", "sec": "sec3b", "part": "1"}], "order": "15", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In the past decade, several rate-based simulation approaches were proposed to predict software failure process. But most of them did not take the number of available debuggers into consideration and this may not be reasonable. In practice, the number of debuggers is always limited and controlled. If all debuggers or developers are busy, the new detected faults should be willing to wait (for a long time to be corrected and removed). Besides, practical experiences also show that the fault removal ...", "documentLink": "/document/4291036", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4291036", "pdfSize": "263KB"}, "id": "ref15", "text": "C. T. Lin, C. Y. Huang, C. C. Sue, \"Measuring and assessing software\nreliability growth through simulation-based approaches\", <em>Proceedings of the 31st IEEE Annual International Computer Software and Applications Conference</em>, pp. 439-446, 2007-July.", "refType": "biblio"}, {"title": "Software reliability modelspast, present and future", "context": [{"text": " Xie [16] reported that NHPP models are easy to use, and are the type of software reliability models that are most widely applied.", "sec": "sec2a", "part": "1"}], "order": "16", "id": "ref16", "text": "M. Xie, \"Software reliability modelspast present and future\" in Recent Advances in Reliability Theory: Methodology Practice and Inference, pp. 323-340, 2000.", "refType": "biblio"}, {"title": "Modeling\nand analysis of software fault detection and correction process by considering\ntime dependency", "context": [{"text": " However, we observed that most of these models deal solely with FDP [17].", "sec": "sec2a", "part": "1"}, {"text": " Therefore, model-based methods should be modified to take into account the FCP [17], [20], [21].", "sec": "sec2a", "part": "1"}, {"text": " The second data set (DS2) was collected during the development of a middle-sized software project [17].", "sec": "sec4a", "part": "1"}], "order": "17", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability modeling &amp; estimation plays a critical role in software development, particularly during the software testing stage. Although there are many research papers on this subject, few of them address the realistic time delays between fault detection and fault correction processes. This paper investigates an approach to incorporate the time dependencies between the fault detection, and fault correction processes, focusing on the parameter estimations of the combined model. Maxi...", "documentLink": "/document/4378411", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4378411", "pdfSize": "697KB"}, "id": "ref17", "text": "Y. P. Wu, Q. P. Hu, M. Xie, S. H. Ng, \"Modeling\nand analysis of software fault detection and correction process by considering\ntime dependency\", <em>IEEE Trans. Reliability</em>, vol. 56, no. 4, pp. 629-642, December 2007.", "refType": "biblio"}, {"title": "Software Engineering: Reliability, Development, and Management", "context": [{"text": " Testing is the process of exercising a program with the intention of revealing inherent faults, while debugging activity localizes the root cause of the detected fault, and then corrects the fault [18].", "sec": "sec2a", "part": "1"}], "order": "18", "id": "ref18", "text": "M. L. Shooman, Software Engineering: Reliability Development and Management, 1983, McGraw-Hill, Inc.", "refType": "biblio"}, {"title": "Software reliability growth\nmodels: Assumptions vs. reality", "context": [{"text": " In addition, Wood [19] reported that instantaneous repair is not realistic in practice.", "sec": "sec2a", "part": "1"}], "order": "19", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Software reliability growth models are often differentiated by assumptions regarding testing and defect repair. In this paper, these model assumptions are compared to Tandem's software development and test environment. The key differences between our environment and the standard model assumptions are that (1) the total number of defects can increase due to new code being introduced during system test, but the models normally assume a constant total number of defects, and (2) the defect-finding e...", "documentLink": "/document/630858", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=630858", "pdfSize": "653KB"}, "id": "ref19", "text": "A. Wood, \"Software reliability growth\nmodels: Assumptions vs. reality\", <em>Proceedings of the 8th International Symposium on Software Reliability Engineering</em>, pp. 136-141, 1997-November.", "refType": "biblio"}, {"title": "Fault correction profiles", "context": [{"text": " Therefore, model-based methods should be modified to take into account the FCP [17], [20], [21].", "sec": "sec2a", "part": "1"}], "order": "20", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In general, software reliability models have focused on modeling and predicting the failure detection process and have not given equal priority to modeling the fault correction process. However, it is important to address the fault correction process in order to identify the need for process improvements. Process improvements, in turn, will contribute to achieving software reliability goals. We introduce the concept of a fault correction profile \" a set of functions that predict fault correction...", "documentLink": "/document/1251048", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1251048", "pdfSize": "311KB"}, "id": "ref20", "text": "N. F. Schneidewind, \"Fault correction profiles\", <em>Proceedings of the 14th International Symposium on Software Reliability Engineering</em>, pp. 257-267, 2003-November.", "refType": "biblio"}, {"title": "Software reliability analysis\nby considering fault dependency and debugging time lag", "context": [{"text": " Therefore, model-based methods should be modified to take into account the FCP [17], [20], [21].", "sec": "sec2a", "part": "1"}], "order": "21", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Over the past 30 years, many software reliability growth models (SRGM) have been proposed. Often, it is assumed that detected faults are immediately corrected when mathematical models are developed. This assumption may not be realistic in practice because the time to remove a detected fault depends on the complexity of the fault, the skill and experience of personnel, the size of debugging team, the technique(s) being used, and so on. During software testing, practical experiences show that mutu...", "documentLink": "/document/1688079", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1688079", "pdfSize": "1127KB"}, "id": "ref21", "text": "C. Y. Huang, C. T. Lin, \"Software reliability analysis\nby considering fault dependency and debugging time lag\", <em>IEEE Trans. Reliability</em>, vol. 55, no. 3, pp. 436-450, September 2006.", "refType": "biblio"}, {"title": "Software Defect and Operational Profile Modeling", "context": [{"text": "Apart from the NHPP models, many researchers have applied neural networks to predict FCP, and to estimate software reliability [6], [12], [13], [22] [23].", "sec": "sec2a", "part": "1"}, {"text": " [22] designated the most recent 50 inter-failure times as the multiple-delayed inputs to forecast the occurrence of the next failure.", "sec": "sec2a", "part": "1"}, {"text": " Determination of the proper number of neurons is another common problem in the field of neural network research [22].", "sec": "sec2b", "part": "1"}], "order": "22", "links": {"crossRefLink": "http://dx.doi.org/10.1007/978-1-4615-5593-3", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref22", "text": "K. Y. Cai, Software Defect and Operational Profile Modeling, 1998, Kluwer Academic Publishers.", "refType": "biblio"}, {"title": "Robust recurrent neural network modeling for software fault\ndetection and correction prediction", "context": [{"text": "Apart from the NHPP models, many researchers have applied neural networks to predict FCP, and to estimate software reliability [6], [12], [13], [22] [23].", "sec": "sec2a", "part": "1"}, {"text": " [23] further studied a major ANN architecture, the Elman recurrent networks, to model both the FDP, and FCP for software reliability analysis.", "sec": "sec2a", "part": "1"}], "order": "23", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.ress.2006.04.007", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref23", "text": "Q. P. Hu, M. Xie, S. H. Ng, G. Levitin, \"Robust recurrent neural network modeling for software fault\ndetection and correction prediction\", <em>Reliability Engineering and System Safety</em>, vol. 92, no. 3, pp. 332-340, March 2007.", "refType": "biblio"}, {"title": "Incorporating fault debugging\nactivities into software reliability models: A simulation approach", "context": [{"text": " [24] further considered the possibility of imperfect debugging in the simulation approach.", "sec": "sec2b", "part": "1"}, {"text": " For example, the rate may be an increasing time-dependent function due to the improvement of the debuggers' skills, or it can be a decreasing time-dependent function because the faults at the end of the project may be inherently harder to fix [24].", "sec": "sec4d", "part": "1"}], "order": "24", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "A large number of software reliability growth models have been proposed to analyse the reliability of a software application based on the failure data collected during the testing phase of the application. To ensure analytical tractability, most of these models are based on simplifying assumptions of instantaneous & perfect debugging. As a result, the estimates of the residual number of faults, failure rate, reliability, and optimal software release time obtained from these models tend to be opt...", "documentLink": "/document/1638411", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1638411", "pdfSize": "375KB"}, "id": "ref24", "text": "S. Gokhale, M. R. Lyu, K. S. Trivedi, \"Incorporating fault debugging\nactivities into software reliability models: A simulation approach\", <em>IEEE Trans. Reliability</em>, vol. 55, no. 2, pp. 281-292, June 2006.", "refType": "biblio"}, {"title": "Software reliability prediction\nand assessment using both finite and infinite server queuing approaches", "context": [{"text": " In the past, some researchers [3], [15], [25]\u2013[28] have attempted to predict software debugging behavior using a queueing model.", "sec": "sec3", "part": "1"}], "order": "25", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "Over the past 30 years, many software reliability growth models (SRGMs) have been proposed for estimation of reliability growth of software. In fact, effective debugging is not easy because the fault may not be immediately obvious. In the past, some researchers ever used an infinite server queueing (ISO) model to describe the software debugging behavior. An infinite-server queueing model is considered where access of customers to service is controlled by a gate and the gate is open only if all s...", "documentLink": "/document/4041904", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4041904", "pdfSize": "247KB"}, "id": "ref25", "text": "W. C. Huang, C. Y. Huang, C. C. Sue, \"Software reliability prediction\nand assessment using both finite and infinite server queuing approaches\", <em>Proceedings of the 12th IEEE International Symposium on Pacific Rim Dependable Computing</em>, pp. 194-201, 2006-December.", "refType": "biblio"}, {"title": "A software reliability growth\nmodeling based on infinite server queueing theory", "context": [{"text": " In the past, some researchers [3], [15], [25]\u2013[26][28] have attempted to predict software debugging behavior using a queueing model.", "sec": "sec3", "part": "1"}], "order": "26", "id": "ref26", "text": "S. Inoue, S. Yamada, \"A software reliability growth\nmodeling based on infinite server queueing theory\", <em>Proceedings of the 9th ISSAT International Conference on Reliability and Quality in Design</em>, pp. 305-309, 2003-August.", "refType": "biblio"}, {"title": "An Infinite Server Queueing Model for Software Readiness Assessment and Related Performance Measures", "context": [{"text": " In the past, some researchers [3], [15], [25]\u2013[27][28] have attempted to predict software debugging behavior using a queueing model.", "sec": "sec3", "part": "1"}], "order": "27", "id": "ref27", "text": "K. Z. Yang, <em>An Infinite Server Queueing Model for Software Readiness Assessment and Related Performance Measures</em>, 1996, Syracuse University.", "refType": "biblio"}, {"title": "An infinite server queueing approach for\ndescribing software reliability growth: Unified modeling and estimation framework", "context": [{"text": " In the past, some researchers [3], [15], [25]\u2013[28] have attempted to predict software debugging behavior using a queueing model.", "sec": "sec3", "part": "1"}], "order": "28", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "In general, the software reliability models based on the nonhomogeneous Poisson processes (NHPPs) are quite popular to assess quantitatively the software reliability and its related dependability measures. Nevertheless, it is not so easy to select the best model from a huge number of candidates in the software testing phase, because the predictive performance of software reliability models strongly depends on the fault-detection data. The asymptotic trend of software fault-detection data can be ...", "documentLink": "/document/1371911", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1371911", "pdfSize": "215KB"}, "id": "ref28", "text": "T. Dohi, S. Osaki, K. S. Trivedi, \"An infinite server queueing approach for\ndescribing software reliability growth: Unified modeling and estimation framework\", <em>Proceedings of the 11th Asia-Pacific Software Engineering Conference</em>, pp. 110-119, 2004-December.", "refType": "biblio"}, {"title": "Assessing staffing needs for\na software maintenance project through queuing simulation", "context": [{"text": "A general description of the queuing system can be given as customers arriving for service, waiting for service if it is not immediate, and leaving the system after being served [29]\u2013[31].", "sec": "sec3a", "part": "1"}, {"text": " For common notation, and more background material on the subject, see [29]\u2013[31].", "sec": "sec3a", "part": "1"}, {"text": " In general, re-staffing often occurs as a result of the following conditions [4], [29].", "sec": "sec4d", "part": "1"}], "order": "29", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "We present an approach based on queuing theory and stochastic simulation to help planning, managing, and controlling the project staffing and the resulting service level in distributed multiphase maintenance processes. Data from a Y2K massive maintenance intervention on a large COBOL/JCL financial software system were used to simulate and study different service center configurations for a geographically distributed software maintenance project. In particular, a monolithic configuration correspo...", "documentLink": "/document/1265735", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1265735", "pdfSize": "1183KB"}, "id": "ref29", "text": "G. Antoniol, A. Cimitile, G. A. Di Lucca, M. Di Penta, \"Assessing staffing needs for\na software maintenance project through queuing simulation\", <em>IEEE Trans. Software Engineering</em>, vol. 30, no. 1, January 2004.", "refType": "biblio"}, {"title": "Fundamentals of Queueing Theory", "context": [{"text": "A general description of the queuing system can be given as customers arriving for service, waiting for service if it is not immediate, and leaving the system after being served [29]\u2013[30][31].", "sec": "sec3a", "part": "1"}, {"text": " For common notation, and more background material on the subject, see [29]\u2013[30][31].", "sec": "sec3a", "part": "1"}, {"text": " The negative exponential distribution is a common assumption for service time, and it has the probability function [30] Also, Thus, the probability that a debugger finishes the fault correction in the time interval \\$(t_{s},t_{s}+\\Delta t)\\$, given that it has already been in progress for time \\$t_{s}\\$, is .", "sec": "sec3a", "part": "1"}], "order": "30", "id": "ref30", "text": "D. Gross, C. Harris, Fundamentals of Queueing Theory, 1998, John Wiley & Sons.", "refType": "biblio"}, {"title": "Probability and Statistics with Reliability, Queueing, and Computer Science Application", "context": [{"text": "A general description of the queuing system can be given as customers arriving for service, waiting for service if it is not immediate, and leaving the system after being served [29]\u2013[31].", "sec": "sec3a", "part": "1"}, {"text": " For common notation, and more background material on the subject, see [29]\u2013[31].", "sec": "sec3a", "part": "1"}], "order": "31", "id": "ref31", "text": "K. S. Trivedi, Probability and Statistics with Reliability Queueing and Computer Science Application, 2002, John Wiley and Sons.", "refType": "biblio"}, {"title": "Haste Makes Waste When You Over-Staff to Achieve Schedule Compression", "context": [{"text": " Putnam [32] observes that haste makes waste when over-staffing to achieve schedule compression.", "sec": "sec3c", "part": "1"}], "order": "32", "id": "ref32", "text": "D. Putnam, Haste Makes Waste When You Over-Staff to Achieve Schedule Compression, February 2008,  [online]  Available: http://www.qsm.com/risk_02.html.", "refType": "biblio"}, {"title": "A decision-analytic stopping\nrule for validation of commercial software systems", "context": [{"text": " Nevertheless, delivering a bad product may lead to customer dissatisfaction, and then cause damage to a software company's reputation [33].", "sec": "sec3d", "part": "1"}], "order": "33", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "abstract": "The decision of when to release a software product commercially is not a question of when the software has attained some objectively justifiable degree of correctness. It is, rather, a question of whether the software achieves a reasonable balance among engineering objectives, market demand, customer requirements, and marketing directives of the software organization. We present a rigorous framework for addressing this important decision. Conjugate distributions from statistical decision theory ...", "documentLink": "/document/877849", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=877849", "pdfSize": "199KB"}, "id": "ref33", "text": "T. Chavez, \"A decision-analytic stopping\nrule for validation of commercial software systems\", <em>IEEE Trans. Software Engineering</em>, vol. 26, no. 9, pp. 907-918, September 2000.", "refType": "biblio"}, {"title": "Software Engineering Economics", "context": [{"text": " The cost of fixing a fault after release is usually an order of magnitude greater than fixing the fault prior to release [34].", "sec": "sec3d1", "part": "1"}], "order": "34", "id": "ref34", "text": "B. Boehm, Software Engineering Economics, 1981, Prentice-Hall.", "refType": "biblio"}, {"title": "Analysis of software fault\nremoval policies using a non-homogeneous continuous time Markov chain", "context": [{"text": " In general, the determination of service rate \\$\\mu\\$ depends on the debuggers' abilities, and the repair policy conducted by the debugging team [35].", "sec": "sec4b1", "part": "1"}], "order": "35", "links": {"crossRefLink": "http://dx.doi.org/10.1023/B:SQJO.0000034709.63615.8b", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "id": "ref35", "text": "S. Gokhale, M. R. Lyu, K. S. Trivedi, \"Analysis of software fault\nremoval policies using a non-homogeneous continuous time Markov chain\", <em>Software Quality Journal</em>, vol. 12, no. 3, pp. 211-230, September 2004.", "refType": "biblio"}, {"title": "Software Engineering", "context": [{"text": " That is, several experts on software development techniques estimate the needs individually, consult with each other, and reach an agreed estimate [36].", "sec": "sec4d", "part": "1"}, {"text": " This common technique is called estimation by analogy (also called case-based reasoning) [36].", "sec": "sec4d", "part": "1"}], "order": "36", "id": "ref36", "text": "I. Sommerville, Software Engineering, 2006, Addison-Wesley.", "refType": "biblio"}, {"title": "Software Engineer's Reference Book", "context": [{"text": " When the experts discuss the allocation of staff to specific WBS tasks [37], they may also benefit from the outputs of the proposed approaches.", "sec": "sec4d", "part": "1"}], "order": "37", "id": "ref37", "text": "J. A. McDermid, Software Engineer's Reference Book, 1991, Butterworth-Heinemann.", "refType": "biblio"}], "citations": {"paperCitations": {"nonIeee": [{"title": "A Parametric Empirical Bayes Model to Predict Software Reliability Growth", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.procs.2015.08.416", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "N\u00e9stor R. Barraza, \"A Parametric Empirical Bayes Model to Predict Software Reliability Growth\", <em>Procedia Computer Science</em>, vol. 62, pp. 360, 2015, ISSN 18770509.", "order": "1"}, {"title": "A history-based cost-cognizant test case prioritization technique in regression testing", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.jss.2011.09.063", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Yu-Chi Huang, Kuan-Li Peng, Chin-Yu Huang, \"A history-based cost-cognizant test case prioritization technique in regression testing\", <em>Journal of Systems and Software</em>, vol. 85, pp. 626, 2012, ISSN 01641212.", "order": "2"}, {"title": "Analyzing the effect of imperfect debugging on software fault detection and correction processes via a simulation framework", "links": {"crossRefLink": "http://dx.doi.org/10.1016/j.mcm.2011.07.033", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "displayText": "Chu-Ti Lin, \"Analyzing the effect of imperfect debugging on software fault detection and correction processes via a simulation framework\", <em>Mathematical and Computer Modelling</em>, vol. 54, pp. 3046, 2011, ISSN 08957177.", "order": "3"}], "ieee": [{"title": "Estimation and Analysis of Some Generalized Multiple Change-Point Software Reliability Models", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/5753981", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=5753981", "pdfSize": "608KB"}, "displayText": "Chin-Yu Huang, Michael R. Lyu, \"Estimation and Analysis of Some Generalized Multiple Change-Point Software Reliability Models\", <em>Reliability IEEE Transactions on</em>, vol. 60, pp. 498-514, 2011, ISSN 0018-9529.", "order": "1"}, {"title": "Evaluation and Analysis of Spectrum-Based Fault Localization with Modified Similarity Coefficients for Software Debugging", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6649819", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6649819", "pdfSize": "601KB"}, "displayText": "Yi-Sian You, Chin-Yu Huang, Kuan-Li Peng, Chao-Jung Hsu, \"Evaluation and Analysis of Spectrum-Based Fault Localization with Modified Similarity Coefficients for Software Debugging\", <em>Computer Software and Applications Conference (COMPSAC) 2013 IEEE 37th Annual</em>, pp. 180-189, 2013, ISSN 0730-3157.", "order": "2"}, {"title": "Software reliability modelling and optimization for multi-release software development processes", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6118174", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6118174", "pdfSize": "591KB"}, "displayText": "Q.P. Hu, R. Peng, M. Xie, S.H. Ng, G. Levitin, \"Software reliability modelling and optimization for multi-release software development processes\", <em>Industrial Engineering and Engineering Management (IEEM) 2011 IEEE International Conference on</em>, pp. 1534-1538, 2011, ISSN 2157-362X.", "order": "3"}, {"title": "Simulation of Software Fault Detection and Correction Processes Considering Different Skill Levels of Debuggers", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6974783", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6974783", "pdfSize": "125KB"}, "displayText": "Rui Peng, F.R. Shahrzad, \"Simulation of Software Fault Detection and Correction Processes Considering Different Skill Levels of Debuggers\", <em>Dependable Computing (PRDC) 2014 IEEE 20th Pacific Rim International Symposium on</em>, pp. 157-158, 2014.", "order": "4"}, {"title": "Rate-Based Queueing Simulation Model of Open Source Software Debugging Activities", "links": {"openUrlImgLoc": "/assets/img/btn.find-in-library.png", "documentLink": "/document/6891380", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6891380", "pdfSize": "2547KB"}, "displayText": "Chu-Ti Lin, Yan-Fu Li, \"Rate-Based Queueing Simulation Model of Open Source Software Debugging Activities\", <em>Software Engineering IEEE Transactions on</em>, vol. 40, pp. 1075-1099, 2014, ISSN 0098-5589.", "order": "5"}]}, "patentCitationCount": "0", "contentType": "periodicals", "isEarlyAccess": false, "lastupdate": "2016-11-15T03:30:44", "publisher": "IEEE", "title": "Staffing Level and Cost Analyses for Software Debugging Activities Through Rate-Based Simulation Approaches", "nonIeeeCitationCount": "3", "publicationNumber": "24", "formulaStrippedArticleTitle": "Staffing Level and Cost Analyses for Software Debugging Activities Through Rate-Based Simulation Approaches", "mediaPath": "/mediastore/IEEE/content/media/24/5338641/4967914", "mlTime": "PT0.085347S", "ieeeCitationCount": "5"}}